before
def accumulate(combiner, base, n, term):
    """Return the result of combining the first N terms in a sequence.  The
    terms to be combined are TERM(1), TERM(2), ..., TERM(N).  COMBINER is a
    two-argument function.  Treating COMBINER as if it were a binary operator,
    the return value is
    BASE COMBINER TERM(1) COMBINER TERM(2) ... COMBINER TERM(N)

    >>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5
    15
    >>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5
    26
    >>> accumulate(add, 11, 0, identity) # 11
    11
    >>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2
    25
    >>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2
    72
    """
    "*** YOUR CODE HERE ***"
    
    """
    accumulate(add, 11, 0, identity) # 11
    """

    def accumulator(combiner, n, term, i):
        if(i==n):
            return term(i)
        else:
            return combiner(term(i), accumulator(combiner, n, term, i+1))

    if(n==0):
        return base
    else:
        return base + accumulator(combiner, n, term, 1)

 
def accumulate(combiner, base, n, term):
    """Return the result of combining the first N terms in a sequence.  The
    terms to be combined are TERM(1), TERM(2), ..., TERM(N).  COMBINER is a
    two-argument function.  Treating COMBINER as if it were a binary operator,
    the return value is
    BASE COMBINER TERM(1) COMBINER TERM(2) ... COMBINER TERM(N)

    >>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5
    15
    >>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5
    26
    >>> accumulate(add, 11, 0, identity) # 11
    11
    >>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2
    25
    >>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2
    72
    """
    "*** YOUR CODE HERE ***"
    
    """
    accumulate(add, 11, 0, identity) # 11
    """

    def accumulator(combiner, n, term, i):
        if(i==n):
            return term(i)
        else:
            return combiner(term(i), accumulator(combiner, n, term, i+1))

    if(n==0):
        return base
    else:
        return combiner(base, accumulator(combiner, n, term, 1))


experiment Information: 4 : Program fixed: 417
experiment Information: 4 : Program fixed: 279
experiment Start: 1 : Submission 280
experiment Error: 3 : Program not fixed:
before
def accumulate(combiner, base, n, term):
    """Return the result of combining the first N terms in a sequence.  The
    terms to be combined are TERM(1), TERM(2), ..., TERM(N).  COMBINER is a
    two-argument function.  Treating COMBINER as if it were a binary operator,
    the return value is
        BASE COMBINER TERM(1) COMBINER TERM(2) ... COMBINER TERM(N)

    >>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5
    15
    >>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5
    26
    >>> accumulate(add, 11, 0, identity) # 11
    11
    >>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2
    25
    >>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2
    72
    """
    # if n == 0:
    #     return base
    # else:
    #     term1 = term(1)
    #     accum = combiner(base, term1)
    #     k = 2
    #     while k <= n:
    #         terms = term(k)
    #         accum = combiner(accum, terms)
    #         k += 1
    #     return accum
    return reduce([base] + map(range(1, n+1), term), combiner)

from operator import add, mul

 
def accumulate(combiner, base, n, term):
    """Return the result of combining the first N terms in a sequence.  The
    terms to be combined are TERM(1), TERM(2), ..., TERM(N).  COMBINER is a
    two-argument function.  Treating COMBINER as if it were a binary operator,
    the return value is
        BASE COMBINER TERM(1) COMBINER TERM(2) ... COMBINER TERM(N)

    >>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5
    15
    >>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5
    26
    >>> accumulate(add, 11, 0, identity) # 11
    11
    >>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2
    25
    >>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2
    72
    """
    # if n == 0:
    #     return base
    # else:
    #     term1 = term(1)
    #     accum = combiner(base, term1)
    #     k = 2
    #     while k <= n:
    #         terms = term(k)
    #         accum = combiner(accum, terms)
    #         k += 1
    #     return accum
    res = base
    for i in [term(x) for x in range(1, n+1)]:
        res = combiner(res, i)
    return res

from operator import add, mul


experiment Information: 4 : Program fixed: 295
experiment Start: 1 : Submission 296
experiment Information: 4 : Program fixed: 296
experiment Error: 3 : Program not fixed:
before
def accumulate(combiner, base, n, term):
    """Return the result of combining the first N terms in a sequence.  The
    terms to be combined are TERM(1), TERM(2), ..., TERM(N).  COMBINER is a
    two-argument function.  Treating COMBINER as if it were a binary operator,
    the return value is
        BASE COMBINER TERM(1) COMBINER TERM(2) ... COMBINER TERM(N)

    >>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5
    15
    >>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5
    26
    >>> accumulate(add, 11, 0, identity) # 11
    11
    >>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2
    25
    >>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2
    72
    """
    if n == 1:
        return term(1) + base
    else: 
        return term(n) * combiner(n-1, term)

 
def accumulate(combiner, base, n, term):
    """Return the result of combining the first N terms in a sequence.  The
    terms to be combined are TERM(1), TERM(2), ..., TERM(N).  COMBINER is a
    two-argument function.  Treating COMBINER as if it were a binary operator,
    the return value is
        BASE COMBINER TERM(1) COMBINER TERM(2) ... COMBINER TERM(N)

    >>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5
    15
    >>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5
    26
    >>> accumulate(add, 11, 0, identity) # 11
    11
    >>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2
    25
    >>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2
    72
    """
    def helper(a,n):
        if n == 0:
            return a 
        else:
            a = combiner(a, term(n))
        return helper(a, n-1)
    return helper(base, n)


experiment Start: 1 : Submission 102
experiment Error: 3 : Program not fixed:
before
def accumulate(combiner, base, n, term):
    """Return the result of combining the first N terms in a sequence.  The
    terms to be combined are TERM(1), TERM(2), ..., TERM(N).  COMBINER is a
    two-argument function.  Treating COMBINER as if it were a binary operator,
    the return value is
        BASE COMBINER TERM(1) COMBINER TERM(2) ... COMBINER TERM(N)

    >>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5
    15
    >>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5
    26
    >>> accumulate(add, 11, 0, identity) # 11
    11
    >>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2
    25
    >>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2
    72
    """
    def summation(n,term):
        total, k = 0,1
        while k<=n:
            total,k = total + term(k), k+1
            return total
    if combiner == add:
        return base + summation(n,term)
    else:
        return base + product (n,term)




 
def accumulate(combiner, base, n, term):
    """Return the result of combining the first N terms in a sequence.  The
    terms to be combined are TERM(1), TERM(2), ..., TERM(N).  COMBINER is a
    two-argument function.  Treating COMBINER as if it were a binary operator,
    the return value is
        BASE COMBINER TERM(1) COMBINER TERM(2) ... COMBINER TERM(N)

    >>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5
    15
    >>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5
    26
    >>> accumulate(add, 11, 0, identity) # 11
    11
    >>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2
    25
    >>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2
    72
    """
    if n == 0:
        return base
    return combiner(term(n), accumulate(combiner, base, n-1,term))





experiment Error: 3 : Program not fixed:
before
def accumulate(combiner, base, n, term):
    """Return the result of combining the first N terms in a sequence.  The
    terms to be combined are TERM(1), TERM(2), ..., TERM(N).  COMBINER is a
    two-argument function.  Treating COMBINER as if it were a binary operator,
    the return value is
        BASE COMBINER TERM(1) COMBINER TERM(2) ... COMBINER TERM(N)

    >>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5
    15
    >>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5
    26
    >>> accumulate(add, 11, 0, identity) # 11
    11
    >>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2
    25
    >>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2
    72
    """
    def helper_accumulate(k, term):
        if k>n:
            return base
        else:
            return combiner(term(k), helper_accumulate(k+1), term)
    if n==0:
        return base
    else:
        return helper_accumulate(1, term)

 
def accumulate(combiner, base, n, term):
    """Return the result of combining the first N terms in a sequence.  The
    terms to be combined are TERM(1), TERM(2), ..., TERM(N).  COMBINER is a
    two-argument function.  Treating COMBINER as if it were a binary operator,
    the return value is
        BASE COMBINER TERM(1) COMBINER TERM(2) ... COMBINER TERM(N)

    >>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5
    15
    >>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5
    26
    >>> accumulate(add, 11, 0, identity) # 11
    11
    >>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2
    25
    >>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2
    72
    """
    def helper_accumulate(k, term):
        if k>n:
            return base
        else:
            return combiner(term(k), helper_accumulate(k+1, term))
    if n==0:
        return base
    else:
        return helper_accumulate(1, term)


experiment Information: 4 : Program fixed: 388
experiment Start: 1 : Submission 389
experiment Error: 3 : Program not fixed:
before
def accumulate(combiner, base, n, term):
    """Return the result of combining the first N terms in a sequence.  The
    terms to be combined are TERM(1), TERM(2), ..., TERM(N).  COMBINER is a
    two-argument function.  Treating COMBINER as if it were a binary operator,
    the return value is
        BASE COMBINER TERM(1) COMBINER TERM(2) ... COMBINER TERM(N)

    >>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5
    15
    >>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5
    26
    >>> accumulate(add, 11, 0, identity) # 11
    11
    >>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2
    25
    >>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2
    72
    """
    "*** YOUR CODE HERE ***"
    def rec_n(n, term):
        if n == 0:
            return term(0)
        else:
            return combiner(term(n), rec_n((n-1), term))
    return combiner((base), rec_n(n, term))


 
def accumulate(combiner, base, n, term):
    """Return the result of combining the first N terms in a sequence.  The
    terms to be combined are TERM(1), TERM(2), ..., TERM(N).  COMBINER is a
    two-argument function.  Treating COMBINER as if it were a binary operator,
    the return value is
        BASE COMBINER TERM(1) COMBINER TERM(2) ... COMBINER TERM(N)

    >>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5
    15
    >>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5
    26
    >>> accumulate(add, 11, 0, identity) # 11
    11
    >>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2
    25
    >>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2
    72
    """
    "*** YOUR CODE HERE ***"
    def rec_n(n, term):
        if n == 0:
            return term(0)
        else:
            if n == 1:
                return term(1)
            else:
                return combiner(term(n), rec_n((n-1), term))
    return combiner((base), rec_n(n, term))



experiment Start: 1 : Submission 584
experiment Information: 4 : Program fixed: 430
experiment Start: 1 : Submission 431
experiment Information: 4 : Program fixed: 431
experiment Start: 1 : Submission 432
experiment Error: 3 : Program not fixed:
before
def accumulate(combiner, base, n, term):
    """Return the result of combining the first N terms in a sequence.  The
    terms to be combined are TERM(1), TERM(2), ..., TERM(N).  COMBINER is a
    two-argument function.  Treating COMBINER as if it were a binary operator,
    the return value is
        BASE COMBINER TERM(1) COMBINER TERM(2) ... COMBINER TERM(N)

    >>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5
    15
    >>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5
    26
    >>> accumulate(add, 11, 0, identity) # 11
    11
    >>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2
    25
    >>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2
    72
    """
    amount = base
    x = 1
    while x <= n:
        combiner(amount, term(x))
        x +=1
    return amount

    """if n<1:
        return base
    else:
        return combiner(n, accumulate(combiner, base, n-1, term))"""


 
def accumulate(combiner, base, n, term):
    """Return the result of combining the first N terms in a sequence.  The
    terms to be combined are TERM(1), TERM(2), ..., TERM(N).  COMBINER is a
    two-argument function.  Treating COMBINER as if it were a binary operator,
    the return value is
        BASE COMBINER TERM(1) COMBINER TERM(2) ... COMBINER TERM(N)

    >>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5
    15
    >>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5
    26
    >>> accumulate(add, 11, 0, identity) # 11
    11
    >>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2
    25
    >>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2
    72
    """
    amount = base
    x = 1
    while x <= n:
        amount = combiner(amount, term(x))
        x +=1
    return amount

    """if n<1:
        return base
    else:
        return combiner(n, accumulate(combiner, base, n-1, term))"""



experiment Start: 1 : Submission 255
experiment Information: 4 : Program fixed: 432
experiment Error: 3 : Program not fixed:
before
def accumulate(combiner, base, n, term):
    """Return the result of combining the first N terms in a sequence.  The
    terms to be combined are TERM(1), TERM(2), ..., TERM(N).  COMBINER is a
    two-argument function.  Treating COMBINER as if it were a binary operator,
    the return value is
        BASE COMBINER TERM(1) COMBINER TERM(2) ... COMBINER TERM(N)

    >>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5
    15
    >>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5
    26
    >>> accumulate(add, 11, 0, identity) # 11
    11
    >>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2
    25
    >>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2
    72
    """
    total = base
    def accumulater(combiner, base, n, term, total):
        if n > 0:
            total = combiner(total, term(n))
            return accumulater(combiner, base, n-1, term, total)
        else:
            return total


 
def accumulate(combiner, base, n, term):
    """Return the result of combining the first N terms in a sequence.  The
    terms to be combined are TERM(1), TERM(2), ..., TERM(N).  COMBINER is a
    two-argument function.  Treating COMBINER as if it were a binary operator,
    the return value is
        BASE COMBINER TERM(1) COMBINER TERM(2) ... COMBINER TERM(N)

    >>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5
    15
    >>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5
    26
    >>> accumulate(add, 11, 0, identity) # 11
    11
    >>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2
    25
    >>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2
    72
    """
    total = base
    def accumulater(combiner, base, n, term, total):
        if n > 0:
            total = combiner(total, term(n))
            return accumulater(combiner, base, n-1, term, total)
        else:
            return total
    return accumulater(combiner, base, n, term, total)



experiment Start: 1 : Submission 281
experiment Error: 3 : Program not fixed:
before
def accumulate(combiner, base, n, term):
    """Return the result of combining the first N terms in a sequence.  The
    terms to be combined are TERM(1), TERM(2), ..., TERM(N).  COMBINER is a
    two-argument function.  Treating COMBINER as if it were a binary operator,
    the return value is
        BASE COMBINER TERM(1) COMBINER TERM(2) ... COMBINER TERM(N)

    >>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5
    15
    >>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5
    26
    >>> accumulate(add, 11, 0, identity) # 11
    11
    >>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2
    25
    >>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2
    72
    """
    "*** YOUR CODE HERE ***"""
    if n == 0:
        return n
    return combiner((term(n-1)), term(n)) * n-1

 
def accumulate(combiner, base, n, term):
    """Return the result of combining the first N terms in a sequence.  The
    terms to be combined are TERM(1), TERM(2), ..., TERM(N).  COMBINER is a
    two-argument function.  Treating COMBINER as if it were a binary operator,
    the return value is
        BASE COMBINER TERM(1) COMBINER TERM(2) ... COMBINER TERM(N)

    >>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5
    15
    >>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5
    26
    >>> accumulate(add, 11, 0, identity) # 11
    11
    >>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2
    25
    >>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2
    72
    """
    "*** YOUR CODE HERE ***"""
    if n == 0:
        return combiner(term(n), base)
    elif n == 1:
        return combiner(term(n), base)
    else:
        return combiner(term(n), accumulate(combiner, base, n-1, term))


experiment Information: 4 : Program fixed: 281
experiment Start: 1 : Submission 282
experiment Error: 3 : Program not fixed:
before
def accumulate(combiner, base, n, term):
    """Return the result of combining the first N terms in a sequence.  The
    terms to be combined are TERM(1), TERM(2), ..., TERM(N).  COMBINER is a
    two-argument function.  Treating COMBINER as if it were a binary operator,
    the return value is
        BASE COMBINER TERM(1) COMBINER TERM(2) ... COMBINER TERM(N)

    >>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5
    15
    >>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5
    26
    >>> accumulate(add, 11, 0, identity) # 11
    11
    >>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2
    25
    >>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2
    72
    """

    if base == n:
        return term(base)
    else: 
        return combiner(term(base), accumulate(combiner,base+1, n,term))
 
def accumulate(combiner, base, n, term):
    """Return the result of combining the first N terms in a sequence.  The
    terms to be combined are TERM(1), TERM(2), ..., TERM(N).  COMBINER is a
    two-argument function.  Treating COMBINER as if it were a binary operator,
    the return value is
        BASE COMBINER TERM(1) COMBINER TERM(2) ... COMBINER TERM(N)

    >>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5
    15
    >>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5
    26
    >>> accumulate(add, 11, 0, identity) # 11
    11
    >>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2
    25
    >>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2
    72
    """

    if n == 0:
        return base
    else: 
        return combiner(term(n), accumulate(combiner,base, n-1,term))

experiment Start: 1 : Submission 368
experiment Information: 4 : Program fixed: 282
experiment Start: 1 : Submission 283
experiment Information: 4 : Program fixed: 584
experiment Error: 3 : Program not fixed:
before
def accumulate(combiner, base, n, term):
    """Return the result of combining the first N terms in a sequence.  The
    terms to be combined are TERM(1), TERM(2), ..., TERM(N).  COMBINER is a
    two-argument function.  Treating COMBINER as if it were a binary operator,
    the return value is
        BASE COMBINER TERM(1) COMBINER TERM(2) ... COMBINER TERM(N)

    >>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5
    15
    >>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5
    26
    >>> accumulate(add, 11, 0, identity) # 11
    11
    >>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2
    25
    >>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2
    72
    """
    k = 1
    while k <= n+1:
    	total, k = combiner(term(k), term(k+1)), k+2
    return combiner(total, base)
   


 
def accumulate(combiner, base, n, term):
    """Return the result of combining the first N terms in a sequence.  The
    terms to be combined are TERM(1), TERM(2), ..., TERM(N).  COMBINER is a
    two-argument function.  Treating COMBINER as if it were a binary operator,
    the return value is
        BASE COMBINER TERM(1) COMBINER TERM(2) ... COMBINER TERM(N)

    >>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5
    15
    >>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5
    26
    >>> accumulate(add, 11, 0, identity) # 11
    11
    >>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2
    25
    >>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2
    72
    """
    total, k = base, 1
    while k <= n:
    	total, k = combiner(total,term(k)), k+1
    return total
   



experiment Start: 1 : Submission 554
experiment Error: 3 : Program not fixed:
before
def accumulate(combiner, base, n, term):
    """Return the result of combining the first N terms in a sequence.  The
    terms to be combined are TERM(1), TERM(2), ..., TERM(N).  COMBINER is a
    two-argument function.  Treating COMBINER as if it were a binary operator,
    the return value is
        BASE COMBINER TERM(1) COMBINER TERM(2) ... COMBINER TERM(N)

    >>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5
    15
    >>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5
    26
    >>> accumulate(add, 11, 0, identity) # 11
    11
    >>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2
    25
    >>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2
    72
    """
    "*** YOUR CODE HERE ***"
    from operator import add, mul
    if base == 0:
        return combiner(term(n), accumulate(combiner, base, n-1, term))
    return combiner(base, term(n), accumulate(combiner, base, n-1, term))


 
def accumulate(combiner, base, n, term):
    """Return the result of combining the first N terms in a sequence.  The
    terms to be combined are TERM(1), TERM(2), ..., TERM(N).  COMBINER is a
    two-argument function.  Treating COMBINER as if it were a binary operator,
    the return value is
        BASE COMBINER TERM(1) COMBINER TERM(2) ... COMBINER TERM(N)

    >>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5
    15
    >>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5
    26
    >>> accumulate(add, 11, 0, identity) # 11
    11
    >>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2
    25
    >>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2
    72
    """
    "*** YOUR CODE HERE ***"
    from operator import add, mul
    if n == 0:
        return base
    if n == 1:
        return combiner(base, term(n)) 
    return combiner(term(n), accumulate(combiner, base, n-1, term)) 



experiment Error: 3 : Program not fixed:
before
def accumulate(combiner, base, n, term):
    """Return the result of combining the first N terms in a sequence.  The
    terms to be combined are TERM(1), TERM(2), ..., TERM(N).  COMBINER is a
    two-argument function.  Treating COMBINER as if it were a binary operator,
    the return value is
        BASE COMBINER TERM(1) COMBINER TERM(2) ... COMBINER TERM(N)

    >>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5
    15
    >>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5
    26
    >>> accumulate(add, 11, 0, identity) # 11
    11
    >>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2
    25
    >>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2
    72
    """
    "*** YOUR CODE HERE ***"
    def partial_accum(k,accum):
        if k==n+1:
            return accum
        else:
            return partial_accum(k+1,combiner(accum,term(k)))
    return partial_product(1,base)

 
def accumulate(combiner, base, n, term):
    """Return the result of combining the first N terms in a sequence.  The
    terms to be combined are TERM(1), TERM(2), ..., TERM(N).  COMBINER is a
    two-argument function.  Treating COMBINER as if it were a binary operator,
    the return value is
        BASE COMBINER TERM(1) COMBINER TERM(2) ... COMBINER TERM(N)

    >>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5
    15
    >>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5
    26
    >>> accumulate(add, 11, 0, identity) # 11
    11
    >>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2
    25
    >>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2
    72
    """
    "*** YOUR CODE HERE ***"
    def partial_accum(k,accum):
        if k==n+1:
            return accum
        else:
            return partial_accum(k+1,combiner(accum,term(k)))
    return partial_accum(1,base)


experiment Error: 3 : Program not fixed:
before
def accumulate(combiner, base, n, term):
    """Return the result of combining the first N terms in a sequence.  The
    terms to be combined are TERM(1), TERM(2), ..., TERM(N).  COMBINER is a
    two-argument function.  Treating COMBINER as if it were a binary operator,
    the return value is
        BASE COMBINER TERM(1) COMBINER TERM(2) ... COMBINER TERM(N)

    >>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5
    15
    >>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5
    26
    >>> accumulate(add, 11, 0, identity) # 11
    11
    >>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2
    25
    >>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2
    72
    """
    # if n == 0: 
    #     return base 
    # if combiner == mul:
    #     total = 1
    # if combiner == add:
    #     total = 0
    # counter = 1
    # while counter <= n: 
    #     total = combiner(total, term(counter))
    #     counter += 1 
    # return combiner(base, total)   
    def helper(combiner, n, term):
        current, next = term(1), term(2) 
        while n > 0: 
            total += term(n)
            n -= 1
            return total
    return combiner(base, helper(combiner, n, term)) 

 
def accumulate(combiner, base, n, term):
    """Return the result of combining the first N terms in a sequence.  The
    terms to be combined are TERM(1), TERM(2), ..., TERM(N).  COMBINER is a
    two-argument function.  Treating COMBINER as if it were a binary operator,
    the return value is
        BASE COMBINER TERM(1) COMBINER TERM(2) ... COMBINER TERM(N)

    >>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5
    15
    >>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5
    26
    >>> accumulate(add, 11, 0, identity) # 11
    11
    >>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2
    25
    >>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2
    72
    """
    # if n == 0: 
    #     return base 
    # if combiner == mul:
    #     total = 1
    # if combiner == add:
    #     total = 0
    # counter = 1
    # while counter <= n: 
    #     total = combiner(total, term(counter))
    #     counter += 1 
    # return combiner(base, total)   
    if n == 0:
        return base
    return accumulate(combiner, combiner(term(n), base), n - 1, term)


experiment Error: 3 : Program not fixed:
before
def accumulate(combiner, base, n, term):
    """Return the result of combining the first N terms in a sequence.  The
    terms to be combined are TERM(1), TERM(2), ..., TERM(N).  COMBINER is a
    two-argument function.  Treating COMBINER as if it were a binary operator,
    the return value is
        BASE COMBINER TERM(1) COMBINER TERM(2) ... COMBINER TERM(N)

    >>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5
    15
    >>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5
    26
    >>> accumulate(add, 11, 0, identity) # 11
    11
    >>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2
    25
    >>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2
    72
    """
    "*** YOUR CODE HERE ***"
    if base == 0:
        return combiner(base, term(accumulate(combiner, base, n-1, term)))

from operator import add, mul

 
def accumulate(combiner, base, n, term):
    """Return the result of combining the first N terms in a sequence.  The
    terms to be combined are TERM(1), TERM(2), ..., TERM(N).  COMBINER is a
    two-argument function.  Treating COMBINER as if it were a binary operator,
    the return value is
        BASE COMBINER TERM(1) COMBINER TERM(2) ... COMBINER TERM(N)

    >>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5
    15
    >>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5
    26
    >>> accumulate(add, 11, 0, identity) # 11
    11
    >>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2
    25
    >>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2
    72
    """
    "*** YOUR CODE HERE ***"
    if n == 0:
        return base
    else:
        return combiner(term(n), accumulate(combiner, base, n-1, term))
from operator import add, mul


experiment Start: 1 : Submission 103
experiment Information: 0 : Input does not compile
experiment Start: 1 : Submission 104
experiment Information: 4 : Program fixed: 283
experiment Start: 1 : Submission 284
experiment Information: 4 : Program fixed: 284
experiment Information: 4 : Program fixed: 104
experiment Start: 1 : Submission 105
experiment Information: 4 : Program fixed: 105
experiment Start: 1 : Submission 106
experiment Information: 4 : Program fixed: 106
experiment Start: 1 : Submission 107
experiment Information: 4 : Program fixed: 554
experiment Start: 1 : Submission 555
experiment Error: 3 : Program not fixed:
before
def accumulate(combiner, base, n, term):
    """Return the result of combining the first N terms in a sequence.  The
    terms to be combined are TERM(1), TERM(2), ..., TERM(N).  COMBINER is a
    two-argument function.  Treating COMBINER as if it were a binary operator,
    the return value is
        BASE COMBINER TERM(1) COMBINER TERM(2) ... COMBINER TERM(N)

    >>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5
    15
    >>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5
    26
    >>> accumulate(add, 11, 0, identity) # 11
    11
    >>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2
    25
    >>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2
    72
    """
    i = 1
    total = 1
    if combiner == add:
        while i <= n:
            total += term(i)
            i += 1
        total = total + base
    elif combiner == mul:
        while i <= n:
            total = total * term(i)
            i += 1
        total = total * base
    return total

 
def accumulate(combiner, base, n, term):
    """Return the result of combining the first N terms in a sequence.  The
    terms to be combined are TERM(1), TERM(2), ..., TERM(N).  COMBINER is a
    two-argument function.  Treating COMBINER as if it were a binary operator,
    the return value is
        BASE COMBINER TERM(1) COMBINER TERM(2) ... COMBINER TERM(N)

    >>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5
    15
    >>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5
    26
    >>> accumulate(add, 11, 0, identity) # 11
    11
    >>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2
    25
    >>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2
    72
    """
    i = 1
    if combiner == add:
        total = 0
        while i <= n:
            total += term(i)
            i += 1
        total = total + base
    elif combiner == mul:
        total = 1
        while i <= n:
            total = total * term(i)
            i += 1
        total = total * base
    return total


experiment Start: 1 : Submission 108
experiment Error: 3 : Program not fixed:
before
def accumulate(combiner, base, n, term):
    """Return the result of combining the first N terms in a sequence.  The
    terms to be combined are TERM(1), TERM(2), ..., TERM(N).  COMBINER is a
    two-argument function.  Treating COMBINER as if it were a binary operator,
    the return value is
        BASE COMBINER TERM(1) COMBINER TERM(2) ... COMBINER TERM(N)

    >>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5
    15
    >>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5
    26
    >>> accumulate(add, 11, 0, identity) # 11
    11
    >>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2
    25
    >>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2
    72
    """
    "*** YOUR CODE HERE ***"
    if n == 1:
        return term(n)
    if n == 0:
        return base
    else:
        return combiner(base, term(n-1))
    #i = 1
    #total = base
    #while i <= n:
    #    total = combiner(total, term(i))
    #    i += 1
    #return total

 
def accumulate(combiner, base, n, term):
    """Return the result of combining the first N terms in a sequence.  The
    terms to be combined are TERM(1), TERM(2), ..., TERM(N).  COMBINER is a
    two-argument function.  Treating COMBINER as if it were a binary operator,
    the return value is
        BASE COMBINER TERM(1) COMBINER TERM(2) ... COMBINER TERM(N)

    >>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5
    15
    >>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5
    26
    >>> accumulate(add, 11, 0, identity) # 11
    11
    >>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2
    25
    >>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2
    72
    """
    "*** YOUR CODE HERE ***"
    i = 1
    total = base
    while i <= n:
        total = combiner(total, term(i))
        i += 1
    return total


experiment Start: 1 : Submission 109
experiment Error: 3 : Program not fixed:
before
def accumulate(combiner, base, n, term):
    """Return the result of combining the first N terms in a sequence.  The
    terms to be combined are TERM(1), TERM(2), ..., TERM(N).  COMBINER is a
    two-argument function.  Treating COMBINER as if it were a binary operator,
    the return value is
        BASE COMBINER TERM(1) COMBINER TERM(2) ... COMBINER TERM(N)

    >>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5
    15
    >>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5
    26
    >>> accumulate(add, 11, 0, identity) # 11
    11
    >>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2
    25
    >>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2
    72
    """
    if n == 0:
        return base
    else:
        return combiner( base, accumulate(combiner, 0, n, term) )

 
def accumulate(combiner, base, n, term):
    """Return the result of combining the first N terms in a sequence.  The
    terms to be combined are TERM(1), TERM(2), ..., TERM(N).  COMBINER is a
    two-argument function.  Treating COMBINER as if it were a binary operator,
    the return value is
        BASE COMBINER TERM(1) COMBINER TERM(2) ... COMBINER TERM(N)

    >>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5
    15
    >>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5
    26
    >>> accumulate(add, 11, 0, identity) # 11
    11
    >>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2
    25
    >>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2
    72
    """
    if n == 0:
        return base
    else:
        return combiner( term(n), accumulate(combiner,base , n - 1 , term) )


experiment Information: 4 : Program fixed: 109
experiment Start: 1 : Submission 110
experiment Information: 4 : Program fixed: 110
experiment Start: 1 : Submission 111
experiment Error: 0 : def accumulate(combiner, base, n, term):
    """Return the result of combining the first N terms in a sequence.  The
    terms to be combined are TERM(1), TERM(2), ..., TERM(N).  COMBINER is a
    two-argument function.  Treating COMBINER as if it were a binary operator,
    the return value is
        BASE COMBINER TERM(1) COMBINER TERM(2) ... COMBINER TERM(N)

    >>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5
    15
    >>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5
    26
    >>> accumulate(add, 11, 0, identity) # 11
    11
    >>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2
    25
    >>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2
    72

    accumulate(combiner, base, n, term)
    """
    "*** YOUR CODE HERE ***"

    terms = [term(x) for x in range(1, n + 1)]
    if n == 1 or n == 0:
        return combiner(base, terms[n-1])
    else:
        return combiner(terms[n-1], accumulate(combiner, base, n-1, term))


experiment Information: 0 : Total time: 81.4204
experiment Information: 5 : Total submissions: 607
experiment Information: 5 : input does not compile: 8
experiment Information: 5 : Fixed: 372
experiment Information: 5 : Not Fixed: 235
experiment Information: 5 : parser not implemented: 13
experiment Information: 5 : Total of groups: 359
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-a)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 17
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\x => Match(x, StartsWithTarget(Target(LeafWildcard("ConstantExpressionNode")))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 3
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithTarget(Target(LeafWildcard("NameExpressionNode")))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ExpressionStatementNode, TChild(Target(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(ExpressionStatementNode, TChild(Target(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(ExpressionStatementNode, TChild(Target(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(AssignmentStatementNode, Children(ConstNode(TupleExpressionNode-False, Children(ReferenceNode(node, StartsWithParent(Node(TupleExpressionNode-False, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK)))), SingleChild(ConstNode(TupleExpressionNode-False, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), Tutor.synthesis.MagicK)))))))), Selected(\x => Match(x, StartsWithParent(Node(ExpressionStatementNode, TChild(Target(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(ExpressionStatementNode, TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ExpressionStatementNode, TChild(Target(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode"))))))))), Tutor.synthesis.MagicK), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), InOrderSort(ast))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 7
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("ArgNode"), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), Tutor.synthesis.MagicK)))))), 2), Selected(\x => Match(x, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("ArgNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("ArgNode"), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("ArgNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, Children(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-combiner), SingleChild(LeafConstNode(NameExpressionNode-add)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-k), SingleChild(LeafConstNode(ConstantExpressionNode-0))))))))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChildren(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))), Tutor.synthesis.MagicK)))))), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChildren(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChildren(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChildren(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 6
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("CallExpressionNode")))))))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 4
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-base)))))))))), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(LeafWildcard("SuiteStatementNode")))))))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))))))))
experiment Information: 5 : Number of mistakes: 3
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-n)))))))), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), Tutor.synthesis.MagicK))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 3
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-GreaterThanOrEqual, Children(ReferenceNode(node, StartsWithTarget(Target(LeafWildcard("NameExpressionNode"))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithTarget(Target(LeafWildcard("ConstantExpressionNode"))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithTarget(Target(LeafWildcard("BinaryExpressionNode")))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChildren(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChildren(Target(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChildren(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-n)))))))))))))), 2), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))))))))))
experiment Information: 5 : Number of mistakes: 8
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(LeafWildcard("any"))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithTarget(Target(LeafWildcard("any")))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-total)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-b), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ForStatementNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Target(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-b)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(LeafConstNode(NameExpressionNode-b), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-total)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-b)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-total))), 2), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(AugmentedAssignStatementNode-Add, Children(LeafConstNode(NameExpressionNode-b), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 1), Selected(\x => Match(x, StartsWithParent(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Target(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(WhileStatementNode, Children(ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(LeafConstNode(NameExpressionNode-b), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK)))), SingleChild(ReferenceNode(node, StartsWithParent(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Target(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Target(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-total)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast)))))))))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Multiply, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Update(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-accumulation), SingleChild(ReferenceNode(node, StartsWithParent(Node(ExpressionStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(ExpressionStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-total))), 2), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), TChild(LeafWildcard("NameExpressionNode"))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))))))))
experiment Information: 5 : Number of mistakes: 9
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithTarget(Target(LeafWildcard("ConstantExpressionNode")))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 8
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-base)))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(LeafWildcard("SuiteStatementNode")))))))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-GreaterThan, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 5
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithTarget(Target(LeafWildcard("ConstantExpressionNode")))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("any"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard("any")))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithTarget(Target(LeafWildcard("NameExpressionNode"))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard("any")))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-total)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(TupleExpressionNode-False, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(TupleExpressionNode-False, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(TupleExpressionNode-False, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Insert(node, ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-base))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(ConstantExpressionNode-0)))))))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, Children(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-combiner), SingleChild(LeafConstNode(NameExpressionNode-add)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))), Tutor.synthesis.MagicK)))))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(NameExpressionNode-base), SingleChild(LeafConstNode(NameExpressionNode-combined_terms))))))))))), 5), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-base))), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 7
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithTarget(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithTarget(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-base))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 2
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(LeafWildcard("any"))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(LeafWildcard("SuiteStatementNode")))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithTarget(Target(LeafWildcard("NameExpressionNode")))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithTarget(Target(LeafWildcard("NameExpressionNode")))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 21
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(LeafWildcard("any"))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithTarget(Target(LeafWildcard("any")))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithTarget(Target(LeafWildcard("NameExpressionNode"))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithTarget(Target(LeafWildcard("any")))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), Tutor.synthesis.MagicK))), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))), Tutor.synthesis.MagicK)))))))), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), Tutor.synthesis.MagicK))), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))), Tutor.synthesis.MagicK)))))))), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-counter)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-combiner)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-counter)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-counter)), Selected(\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-counter)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-counter)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-base))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-n))))))))))))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-base))), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 2
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(LeafWildcard("ParameterNode"))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithTarget(Target(LeafWildcard("FunctionDefinitionNode")))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(LeafWildcard("any"))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithTarget(Target(LeafWildcard("any")))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\x => Match(x, StartsWithParent(Node(UnaryExpressionNode-Negate, TChild(Target(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(UnaryExpressionNode-Negate, TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(UnaryExpressionNode-Negate, TChild(LeafWildcard("ConstantExpressionNode"))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(UnaryExpressionNode-Negate, TChild(Target(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(UnaryExpressionNode-Negate, TChild(LeafWildcard("ConstantExpressionNode"))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 6
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("any"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)))))), 1), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("any"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("any"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("any"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 7
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-i)), Selected(\x => Match(x, StartsWithTarget(Target(LeafWildcard("NameExpressionNode")))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-base))), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 6
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-total)), Selected(\x => Match(x, StartsWithTarget(Target(LeafWildcard("NameExpressionNode")))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-k), SingleChild(LeafConstNode(ConstantExpressionNode-1))))), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-total), SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))), Tutor.synthesis.MagicK), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))), Tutor.synthesis.MagicK), 3), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(LeafConstNode(NameExpressionNode-k), SingleChild(LeafConstNode(NameExpressionNode-n))))), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-total)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-total), SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(AugmentedAssignStatementNode-Add, Children(LeafConstNode(NameExpressionNode-k), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 1), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(WhileStatementNode, Children(ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(LeafConstNode(NameExpressionNode-k), SingleChild(LeafConstNode(NameExpressionNode-n)))), SingleChild(ConstNode(SuiteStatementNode, Children(ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-total), SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)))), SingleChild(ConstNode(AugmentedAssignStatementNode-Add, Children(LeafConstNode(NameExpressionNode-k), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))))), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChild(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChild(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), Tutor.synthesis.MagicK), 4), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-total)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))))))), InOrderSort(ast))))))))))))))))))))))))
experiment Information: 5 : Number of mistakes: 4
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-accumulate)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(LeafWildcard("ArgNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 9
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-combiner)), Selected(\x => Match(x, StartsWithTarget(Target(LeafWildcard("NameExpressionNode")))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), TChildren(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChildren(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 8
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Insert(node, ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-base)))))))), 0), Selected(\x => Match(x, StartsWithTarget(Target(LeafWildcard("IfStatementNode")))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 10
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\x => Match(x, StartsWithTarget(Target(LeafWildcard("ConstantExpressionNode")))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 2
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithTarget(Target(LeafWildcard("ConstantExpressionNode")))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("ArgNode"), TChild(LeafWildcard("ArgNode"))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("ArgNode"), TChild(LeafWildcard("ArgNode")))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("CallExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("ArgNode"), TChild(LeafWildcard("ArgNode")))))))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-result)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-i)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(TupleExpressionNode-False, Children(LeafConstNode(NameExpressionNode-result), SingleChild(LeafConstNode(NameExpressionNode-i))))), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(TupleExpressionNode-False, Children(LeafConstNode(NameExpressionNode-base), SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChild(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChild(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(AssignmentStatementNode, Children(ConstNode(TupleExpressionNode-False, Children(LeafConstNode(NameExpressionNode-result), SingleChild(LeafConstNode(NameExpressionNode-i)))), SingleChild(ConstNode(TupleExpressionNode-False, Children(LeafConstNode(NameExpressionNode-base), SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK)))))))), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChild(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChild(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-result)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-i)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-i)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(WhileStatementNode, Children(ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(LeafConstNode(NameExpressionNode-i), SingleChild(LeafConstNode(NameExpressionNode-n)))), SingleChild(ConstNode(SuiteStatementNode, Children(ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-result), SingleChild(ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), Tutor.synthesis.MagicK), Children(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)))))))), SingleChild(ConstNode(AugmentedAssignStatementNode-Add, Children(LeafConstNode(NameExpressionNode-i), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))))))), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-result)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-result)))), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK), 3), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))))))))))), InOrderSort(ast)))))))))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Insert(node, ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(ConstantExpressionNode-0))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-base)))))))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), TChild(LeafWildcard("ReturnStatementNode"))))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-base))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(ConstantExpressionNode-0))))))))))))))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 2
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(LeafWildcard("NameExpressionNode"))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\x => Match(x, StartsWithTarget(Target(LeafWildcard("any")))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(LeafWildcard("NameExpressionNode"))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithTarget(Target(LeafWildcard("any")))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 2
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-LessThan, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Target(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("ArgNode"), TChild(LeafWildcard("ArgNode")))))))))))))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-GreaterThan, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 7
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(LeafWildcard("any"))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithTarget(Target(LeafWildcard("any")))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithTarget(Target(LeafWildcard("any"))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithTarget(Target(LeafWildcard("any")))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 5
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Update(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("CallExpressionNode")), TChild(LeafWildcard("CallExpressionNode"))))), Tutor.synthesis.MagicK))), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("CallExpressionNode"), TChild(Target(LeafWildcard("CallExpressionNode")))))), Tutor.synthesis.MagicK)))))))), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("CallExpressionNode"), TChild(LeafWildcard("CallExpressionNode"))))))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-NotEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Insert(node, ConstNode(AugmentedAssignStatementNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 1), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-NotEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-base))), 2), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)))))), 1), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1))))), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast)))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Insert(node, ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-base))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-n))))))))))))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 6
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Update(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("CallExpressionNode")), TChild(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK))), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("CallExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK)))))))), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("CallExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 2
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(ForStatementNode, Children(ReferenceNode(node, StartsWithParent(Node(ForStatementNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK), Children(ReferenceNode(node, StartsWithParent(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))), Tutor.synthesis.MagicK))))))), 3), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Target(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK), 4), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, Children(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-combiner), SingleChild(LeafConstNode(NameExpressionNode-add)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-total), SingleChild(LeafConstNode(ConstantExpressionNode-0))))))))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-total), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-total))), 1), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-i)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ForStatementNode, Children(LeafConstNode(NameExpressionNode-i), Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-range), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(ConstantExpressionNode-1))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Add, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))))))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-total), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-total))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-i))))))))))))))))))))), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-base))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-total))))))))), 3), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))), InOrderSort(ast))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-p), SingleChild(LeafConstNode(NameExpressionNode-base)))), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ForStatementNode, Children(LeafConstNode(NameExpressionNode-_), Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-range), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(ConstantExpressionNode-1))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Add, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))))))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-p), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-_)))))))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-p)))))))))))))))), 3), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-p))), 4), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, Children(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-n_counter), SingleChild(LeafConstNode(ConstantExpressionNode-0))))))))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)))))), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 15
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithTarget(Target(LeafWildcard("NameExpressionNode")))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-n)))))), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-base), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), Tutor.synthesis.MagicK), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))))))))))), InOrderSort(ast)))))))))))))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThan, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Target(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), InOrderSort(ast))))))))
experiment Information: 5 : Number of mistakes: 3
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Update(node, ConstNode(ReturnStatementNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ExpressionStatementNode, TChild(Target(LeafWildcard("CallExpressionNode"))))), Tutor.synthesis.MagicK)))), Selected(\x => Match(x, StartsWithTarget(Target(Node(ExpressionStatementNode, TChild(LeafWildcard("CallExpressionNode")))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, LeafConstNode(NameExpressionNode-combiner), 0), Selected(\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK)))))), 1), Selected(\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-total)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Target(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), Tutor.synthesis.MagicK), 2), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))), InOrderSort(ast)))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-i)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(ConstantExpressionNode-1)))))), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, LeafConstNode(NameExpressionNode-a), 0), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK))), 1), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(FunctionDefinitionNode-a, Children(LeafConstNode(ParameterNode-combiner), Children(LeafConstNode(ParameterNode-n), Children(LeafConstNode(ParameterNode-term), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(IfStatementNode, Children(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))))))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-n)))))))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-a), Children(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK))), Children(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term)))))))))))))))))))))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, Children(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-base)))))))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-base))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-a), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-combiner))), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-n))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))))))))))))))))))))), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), InOrderSort(ast)))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-x)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-total))), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-total), SingleChild(LeafConstNode(NameExpressionNode-base)))), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 3
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, LeafConstNode(NameExpressionNode-accumulate), 0), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-combiner))), 1), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-base))), 2), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))), 4), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast)))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(TupleExpressionNode-False, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(TupleExpressionNode-False, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(TupleExpressionNode-False, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 2
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithTarget(Target(LeafWildcard("CallExpressionNode"))), Tutor.synthesis.MagicK))), 1), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("any"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithTarget(Target(LeafWildcard("CallExpressionNode"))), Tutor.synthesis.MagicK))), 2), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("any"))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(LeafWildcard("any")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("any"))))))))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK)))), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-a), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-a))), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK)))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, LeafConstNode(NameExpressionNode-helper), 0), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-a))), 1), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(FunctionDefinitionNode-helper, Children(LeafConstNode(ParameterNode-a), Children(LeafConstNode(ParameterNode-n), SingleChild(ConstNode(SuiteStatementNode, Children(ConstNode(IfStatementNode, Children(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-a)))))))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-a), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-a))), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK))))))))))))))), SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-helper), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-a))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))))))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode"))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-helper)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), Tutor.synthesis.MagicK))), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode"))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode"))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode"))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))))), InOrderSort(ast)))))))))))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementTestNode, Children(ReferenceNode(node, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-base)))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), Tutor.synthesis.MagicK)))))), 1), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), Tutor.synthesis.MagicK), 2), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChild(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))))))))))), InOrderSort(ast)))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-total), SingleChild(LeafConstNode(NameExpressionNode-base)))), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ForStatementNode, Children(LeafConstNode(NameExpressionNode-x), Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-range), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-n)))))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-total), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-total))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Add, Children(LeafConstNode(NameExpressionNode-x), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))))))))))))))))))))), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-total)), Selected(\x => Match(x, StartsWithParent(Node(ExpressionStatementNode, TChild(Target(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-total)))), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(ExpressionStatementNode, SingleChild(LeafConstNode(ConstantExpressionNode-def f(x):
        if x==1:
            return base+term(1)
        else: 
            return combiner(f(x-1),term(x))
    return f(n)))), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-f, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))), TChildren(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-s), SingleChild(LeafConstNode(NameExpressionNode-base)))), 3), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-f, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))), TChildren(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-i)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-f, TChildren(Target(LeafWildcard("ParameterNode")), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK)))), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK)))), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), Tutor.synthesis.MagicK), 2), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-range), Children(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK))), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK)))))))), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-s)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-i)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-s), SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(FunctionDefinitionNode-f, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(FunctionDefinitionNode-f, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))), TChildren(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(FunctionDefinitionNode-f, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))), TChildren(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), Tutor.synthesis.MagicK), 2), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(FunctionDefinitionNode-f, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))), TChildren(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(ForStatementNode, Children(LeafConstNode(NameExpressionNode-i), Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-range), Children(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK))), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK))))))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-s), SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), Tutor.synthesis.MagicK))))))))))), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(FunctionDefinitionNode-f, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))), TChildren(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-s)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-f, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))), TChildren(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-f, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))), TChildren(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-f, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))), TChildren(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-f, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))), TChildren(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), InOrderSort(ast)))))))))))))))))))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0))))), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(TupleExpressionNode-False, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Target(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(ReturnStatementNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(TupleExpressionNode-False, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK)))), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-n)))))))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-accumulate), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-combiner))), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-base))), Children(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))))))))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, Children(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-base)))))))), Children(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(TupleExpressionNode-False, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK)))))))), SingleChild(ConstNode(SuiteStatementNode, Children(ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ExpressionStatementNode, SingleChild(LeafConstNode(ConstantExpressionNode-
    total, k = base, 1
    while k <= n:
        total, k = combiner(total, term(k)), k+1
    return total)))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChildren(Target(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), InOrderSort(ast)))))))))))))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-total), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), 0), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-total), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-i)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-i), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-total)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-total), SingleChild(LeafConstNode(NameExpressionNode-base))))), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), Tutor.synthesis.MagicK), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK), 3), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-i)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(LeafConstNode(NameExpressionNode-i), SingleChild(LeafConstNode(NameExpressionNode-n))))), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-total)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-i)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-total), SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(AugmentedAssignStatementNode-Add, Children(LeafConstNode(NameExpressionNode-i), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 1), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(WhileStatementNode, Children(ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(LeafConstNode(NameExpressionNode-i), SingleChild(LeafConstNode(NameExpressionNode-n)))), SingleChild(ConstNode(SuiteStatementNode, Children(ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-total), SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), Tutor.synthesis.MagicK)))), SingleChild(ConstNode(AugmentedAssignStatementNode-Add, Children(LeafConstNode(NameExpressionNode-i), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))))), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-total))), 5), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))))))))), InOrderSort(ast)))))))))))))))))))))))))))
experiment Information: 5 : Number of mistakes: 2
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\x => Match(x, StartsWithTarget(Target(LeafWildcard("NameExpressionNode")))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-base)))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-GreaterThanOrEqual, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-f), SingleChild(LeafConstNode(NameExpressionNode-combiner)))), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-f), Children(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), Tutor.synthesis.MagicK))), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), Tutor.synthesis.MagicK)))))))), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-LessThan, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1))))), Selected(\x => Match(x, StartsWithParent(Node(ParenthesisExpressionNode, TChild(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-accumulate)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-combiner)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)))))))))))), 2), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK), 3), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK), 4), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), InOrderSort(ast))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(ConstantExpressionNode-2))), 1), Selected(\x => Match(x, StartsWithParent(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-next_base)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-next_base)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-GreaterThanOrEqual, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Target(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(WhileStatementNode, Children(ReferenceNode(node, StartsWithParent(Node(WhileStatementNode, TChildren(Target(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(SuiteStatementNode, Children(ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK))))))), 3), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))), Tutor.synthesis.MagicK), 4), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-combiner), SingleChild(LeafConstNode(NameExpressionNode-add)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-i), SingleChild(LeafConstNode(ConstantExpressionNode-0))))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-combiner), SingleChild(LeafConstNode(NameExpressionNode-mul)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-i), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))))), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-i)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), InOrderSort(ast)))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-result), SingleChild(LeafConstNode(NameExpressionNode-base)))), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x)))))), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 2
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(LeafWildcard("any"))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(LeafWildcard("SuiteStatementNode")))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(LeafWildcard("any"))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(LeafWildcard("SuiteStatementNode")))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(LeafWildcard("any"))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(LeafWildcard("SuiteStatementNode")))))))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(PythonAstNode, TChild(Target(Node(SuiteStatementNode, TChildren(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(FunctionDefinitionNode-accumulate, Children(ReferenceNode(node, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(Target(LeafWildcard("ParameterNode")), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK), Children(ReferenceNode(node, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(Target(LeafWildcard("ParameterNode")), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK), Children(ReferenceNode(node, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(Target(LeafWildcard("ParameterNode")), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK), Children(ReferenceNode(node, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(Target(LeafWildcard("ParameterNode")), TChild(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(SuiteStatementNode, Children(ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))), Tutor.synthesis.MagicK), Children(ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK), Children(ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))), Tutor.synthesis.MagicK), Children(ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))), Tutor.synthesis.MagicK), Children(ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Target(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)))))))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(PythonAstNode, TChild(Target(Node(SuiteStatementNode, TChildren(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Target(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(PythonAstNode, TChild(Target(Node(SuiteStatementNode, TChildren(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(ConstantExpressionNode-0)))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-after_base, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChildren(Target(Node(PrintStatementNode, TChild(Node(ParenthesisExpressionNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChildren(Node(PrintStatementNode, TChild(Node(ParenthesisExpressionNode, TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChildren(Node(PrintStatementNode, TChild(Node(ParenthesisExpressionNode, TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChildren(Node(PrintStatementNode, TChild(Node(ParenthesisExpressionNode, TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK))), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK)))))))), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK)))))), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Equals, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-0))))), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, ConstNode(ReturnStatementNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ExpressionStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)))), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ExpressionStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast)))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), InOrderSort(ast)))))))))
experiment Information: 5 : Number of mistakes: 3
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Update(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-total), SingleChild(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithTarget(Target(LeafWildcard("any")))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-y)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 4
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Update(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("CallExpressionNode"))))), Tutor.synthesis.MagicK))), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("CallExpressionNode")))))), Tutor.synthesis.MagicK)))))))), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("CallExpressionNode"))))))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(Target(LeafWildcard("ConstantExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-total)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Target(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChildren(Target(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))))))))))))))
experiment Information: 5 : Number of mistakes: 2
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(LeafWildcard("ReturnStatementNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(LeafWildcard("SuiteStatementNode")))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("any"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard("any")))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithTarget(Target(LeafWildcard("NameExpressionNode"))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard("any")))))))), InOrderSort(ast))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode"))))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\x => Match(x, StartsWithParent(Node(AugmentedAssignStatementNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast)))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(WhileStatementNode, Children(ConstNode(BinaryExpressionNode-GreaterThanOrEqual, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)))))), 3), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), InOrderSort(ast))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, LeafConstNode(NameExpressionNode-accumulate), 0), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK))), 1), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-base))), 2), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-term)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-accumulate), Children(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK))), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-base))), Children(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))))))))))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-n)))))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), Children(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-total)))))))), Selected(\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-total))), 1), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Insert(node, ConstNode(AugmentedAssignStatementNode-Add, Children(LeafConstNode(NameExpressionNode-k), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 1), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 2
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Update(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-n)))))))), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), Tutor.synthesis.MagicK)))))))), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-total)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FromImportStatementNode-System.String[], TChild(LeafWildcard("DottedNameNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), TChild(Target(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FromImportStatementNode-System.String[], TChild(LeafWildcard("DottedNameNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-total)), Selected(\x => Match(x, StartsWithParent(Node(ExpressionStatementNode, TChild(Target(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, Children(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-base))))))))))))), SingleChild(ConstNode(SuiteStatementNode, Children(ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-i), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), Children(ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-total), SingleChild(LeafConstNode(NameExpressionNode-base)))), Children(ConstNode(WhileStatementNode, Children(ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(LeafConstNode(NameExpressionNode-i), SingleChild(LeafConstNode(NameExpressionNode-n)))), SingleChild(ConstNode(SuiteStatementNode, Children(ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-total), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-i)))))))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-total)))))))))), SingleChild(ConstNode(AugmentedAssignStatementNode-Add, Children(LeafConstNode(NameExpressionNode-i), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))))))), SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-total))))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 4
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-Return the result of combining the first N terms in a sequence.  The
    terms to be combined are TERM(1), TERM(2), ..., TERM(N).  COMBINER is a
    two-argument function.  Treating COMBINER as if it were a binary operator,
    the return value is
        BASE COMBINER TERM(1) COMBINER TERM(2) ... COMBINER TERM(N)

    >>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5
    15
    >>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5
    26
    >>> accumulate(add, 11, 0, identity) # 11
    11
    >>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2
    25
    >>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2
    72
    )), Selected(\x => Match(x, StartsWithParent(Node(ExpressionStatementNode, TChild(Target(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 4
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(LeafWildcard("NameExpressionNode"))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 1), Selected(\x => Match(x, StartsWithTarget(Target(LeafWildcard("BinaryExpressionNode")))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(LeafWildcard("NameExpressionNode"))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithTarget(Target(LeafWildcard("BinaryExpressionNode")))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-total)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), InOrderSort(ast))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), Tutor.synthesis.MagicK), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-i)), Selected(\x => Match(x, StartsWithParent(Node(AugmentedAssignStatementNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-i), SingleChild(ReferenceNode(node, StartsWithParent(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), TChildren(Target(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-i)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-i)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-i)), Selected(\x => Match(x, StartsWithParent(Node(AugmentedAssignStatementNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast)))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), Tutor.synthesis.MagicK))), 0), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-combine, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, Children(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-base)))))))), SingleChild(ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-combine, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-combine, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-term)), Selected(\x => Match(x, StartsWithParent(Node(ExpressionStatementNode, TChild(Target(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, Children(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-base)))))))), Children(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(ConstantExpressionNode-1)))))))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-base)))))))))))))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-n)))))))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-accumulate), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-combiner))), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-base))), Children(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))))))))))))))))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 2
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-b)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 2
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-term)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-base))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(WhileStatementNode, Children(ReferenceNode(node, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(SuiteStatementNode, Children(ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChildren(Target(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), Tutor.synthesis.MagicK))))))), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), Tutor.synthesis.MagicK), 3), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))))))))))), InOrderSort(ast)))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-total)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 1), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Target(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Target(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 2
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(ExpressionStatementNode, SingleChild(LeafConstNode(ConstantExpressionNode-number = 1
    for i in [1,n]:
        i += 1
        number *= term(i)
    return combiner(base, number)))), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ListExpressionNode, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-range), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(ConstantExpressionNode-1))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ListExpressionNode, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))))), Selected(\x => Match(x, StartsWithParent(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ListExpressionNode, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ListExpressionNode, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-number), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(AugmentedAssignStatementNode-Multiply, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK))), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK)))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ListExpressionNode, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ListExpressionNode, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ListExpressionNode, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ListExpressionNode, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))))))))))))
experiment Information: 5 : Number of mistakes: 3
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-total))), 1), Selected(\x => Match(x, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("any"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(LeafWildcard("any"))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithTarget(Target(LeafWildcard("any")))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ArgNode")))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithTarget(Target(LeafWildcard("any")))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 3
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithTarget(Target(LeafWildcard("ConstantExpressionNode")))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, Children(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-base)))))))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-counter, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), Tutor.synthesis.MagicK)))))), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-counter, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-counter, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-counter, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 3
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThan, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Target(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(LeafWildcard("SuiteStatementNode")))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-sum_function), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-n)))))))), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(FunctionDefinitionNode-sum_function, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))))))))))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(Target(LeafWildcard("ConstantExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-LessThan, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Target(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK)))))), 1), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast)))))))))
experiment Information: 5 : Number of mistakes: 2
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithTarget(Target(LeafWildcard("ConstantExpressionNode")))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithTarget(Target(LeafWildcard("ConstantExpressionNode")))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 3
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), Tutor.synthesis.MagicK))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-n)))))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Insert(node, ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-combine), SingleChild(LeafConstNode(NameExpressionNode-base)))), 3), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-combine)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-base)))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-help, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-GreaterThanOrEqual, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 3
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-combiner))), 1), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-base))), 2), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))), 4), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(TupleExpressionNode-False, Children(ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(NameExpressionNode-i)))), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(TupleExpressionNode-False, Children(ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Add, Children(LeafConstNode(NameExpressionNode-i), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), InOrderSort(ast))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(TupleExpressionNode-False, Children(ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Add, Children(LeafConstNode(NameExpressionNode-k), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, LeafConstNode(NameExpressionNode-base), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard("ReturnStatementNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)))))), 1), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), InOrderSort(ast))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), Tutor.synthesis.MagicK)))))), 1), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), Tutor.synthesis.MagicK), 2), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))), InOrderSort(ast))))))))
experiment Information: 5 : Number of mistakes: 5
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(LeafWildcard("any"))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithTarget(Target(LeafWildcard("any")))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithTarget(Target(LeafWildcard("any"))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithTarget(Target(LeafWildcard("any")))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-base)))))))))), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-indexer, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), Tutor.synthesis.MagicK))), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))), Tutor.synthesis.MagicK)))))))), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode"))))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-GreaterThanOrEqual, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1))))), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode"))))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-finalResult)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(FunctionDefinitionNode-count_comber, TChildren(LeafWildcard("ParameterNode"), TChildren(Target(LeafWildcard("ParameterNode")), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(FunctionDefinitionNode-count_comber, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))), InOrderSort(ast)))))))))
experiment Information: 5 : Number of mistakes: 3
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Update(node, ConstNode(AssignmentStatementNode, Children(ReferenceNode(node, StartsWithTarget(Target(LeafWildcard("NameExpressionNode"))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithTarget(Target(LeafWildcard("AugmentedAssignStatementNode")))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-total)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 2
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Update(node, ConstNode(AugmentedAssignStatementNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(AugmentedAssignStatementNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("ArgNode"), TChild(LeafWildcard("ArgNode")))))))), TChild(Target(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 2
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), Tutor.synthesis.MagicK)))))), 0), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), Tutor.synthesis.MagicK)))))), 0), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Update(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-amount), SingleChild(ReferenceNode(node, StartsWithParent(Node(ExpressionStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(ExpressionStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChildren(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChildren(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Equals, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-GreaterThan, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Target(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChildren(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChildren(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChildren(Target(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChildren(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-GreaterThan, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK)))), SingleChild(ReferenceNode(node, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChildren(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Target(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChildren(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-GreaterThan, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK)))), SingleChild(ReferenceNode(node, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChildren(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), Tutor.synthesis.MagicK))))))), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChildren(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChildren(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChildren(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChildren(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChildren(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-accumulate)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-combiner)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), Tutor.synthesis.MagicK)))))), 1), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))), 3), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))), 4), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast)))))))))))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-k), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-base)))))))))), 4), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ForStatementNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Target(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(LeafConstNode(NameExpressionNode-k), SingleChild(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-term)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(AugmentedAssignStatementNode-Add, Children(LeafConstNode(NameExpressionNode-k), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 1), Selected(\x => Match(x, StartsWithParent(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Target(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, ConstNode(WhileStatementNode, Children(ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(LeafConstNode(NameExpressionNode-k), SingleChild(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK)))), SingleChild(ReferenceNode(node, StartsWithParent(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Target(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Target(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))))))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(AssignmentStatementNode, Children(ConstNode(TupleExpressionNode-False, Children(LeafConstNode(NameExpressionNode-total), SingleChild(LeafConstNode(NameExpressionNode-x)))), SingleChild(ConstNode(TupleExpressionNode-False, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(ConstantExpressionNode-1)))))), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(WhileStatementNode, Children(ConstNode(BinaryExpressionNode-LessThan, Children(LeafConstNode(NameExpressionNode-x), SingleChild(LeafConstNode(NameExpressionNode-n)))), SingleChild(ConstNode(SuiteStatementNode, Children(ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-total), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-total))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Add, Children(LeafConstNode(NameExpressionNode-x), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))))))))))))))), SingleChild(ConstNode(AugmentedAssignStatementNode-Add, Children(LeafConstNode(NameExpressionNode-x), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))))))), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-total), SingleChild(LeafConstNode(ConstantExpressionNode-0))))))))))), 3), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-base))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-total))))))))), 4), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)))))), 1), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), Tutor.synthesis.MagicK), Children(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), Tutor.synthesis.MagicK))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))), InOrderSort(ast))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-GreaterThan, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-NotEqual, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-NotEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-NotEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), SingleChild(ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-NotEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-NotEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-NotEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-NotEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), Patch(EditMap(\node => Insert(node, ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-base))))), 2), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-NotEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))))))))
experiment Information: 5 : Number of mistakes: 2
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Update(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK))), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK)))))))), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-n)))))), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-accumulate)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, Children(ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), Tutor.synthesis.MagicK), Children(ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(SuiteStatementNode, Children(ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-base), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-base))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-n))))))))))))))), SingleChild(ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), Tutor.synthesis.MagicK)))))))), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))), InOrderSort(ast)))))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, ConstNode(FunctionDefinitionNode-<lambda$4>, Children(ReferenceNode(node, StartsWithParent(Node(FunctionDefinitionNode-<lambda$3>, TChildren(Target(LeafWildcard("ParameterNode")), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(FunctionDefinitionNode-<lambda$3>, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(LambdaExpressionNode, TChild(Target(Node(FunctionDefinitionNode-<lambda$3>, TChildren(LeafWildcard("ParameterNode"), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(LambdaExpressionNode, TChild(Node(FunctionDefinitionNode-<lambda$3>, TChildren(LeafWildcard("ParameterNode"), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(LambdaExpressionNode, TChild(Node(FunctionDefinitionNode-<lambda$3>, TChildren(LeafWildcard("ParameterNode"), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))), TChild(LeafWildcard("ConstantExpressionNode")))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(ParenthesisExpressionNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-list), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-map), Children(ConstNode(ArgNode, SingleChild(ConstNode(LambdaExpressionNode, SingleChild(ConstNode(FunctionDefinitionNode-<lambda$4>, Children(ReferenceNode(node, StartsWithParent(Node(FunctionDefinitionNode-<lambda$3>, TChildren(Target(LeafWildcard("ParameterNode")), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(FunctionDefinitionNode-<lambda$3>, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), Tutor.synthesis.MagicK)))))))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-list), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-range), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(ConstantExpressionNode-1))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Add, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))))))))))))))))))))))), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(LambdaExpressionNode, TChild(Node(FunctionDefinitionNode-<lambda$3>, TChildren(LeafWildcard("ParameterNode"), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))), TChild(LeafWildcard("ConstantExpressionNode")))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-count)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-count)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-LessThan, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-count)), Selected(\x => Match(x, StartsWithParent(Node(IndexExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-count)), Selected(\x => Match(x, StartsWithParent(Node(AugmentedAssignStatementNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast)))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, Children(ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChild(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), Tutor.synthesis.MagicK), Children(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(ConstantExpressionNode-0))))))))))))), Children(ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))), Tutor.synthesis.MagicK)))))), 0), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))))))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, Children(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-base)))))))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-accumulate_helper, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), Tutor.synthesis.MagicK)))))), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-accumulate_helper, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-accumulate_helper, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-accumulate_helper, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Insert(node, ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(ConstantExpressionNode-0)))))))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-base)))))))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-total))), 3), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))))))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, ConstNode(FunctionDefinitionNode-<lambda$6>, Children(ReferenceNode(node, StartsWithParent(Node(FunctionDefinitionNode-<lambda$5>, TChildren(Target(LeafWildcard("ParameterNode")), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(FunctionDefinitionNode-<lambda$5>, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(LambdaExpressionNode, TChild(Target(Node(FunctionDefinitionNode-<lambda$5>, TChildren(LeafWildcard("ParameterNode"), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-base))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(LambdaExpressionNode, TChild(Node(FunctionDefinitionNode-<lambda$5>, TChildren(LeafWildcard("ParameterNode"), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(LambdaExpressionNode, TChild(Node(FunctionDefinitionNode-<lambda$5>, TChildren(LeafWildcard("ParameterNode"), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-x)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-x)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-x)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)))))), 1), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-accumulater), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-combiner))), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-base))), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-n))), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-total)))))))))))), 3), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(FunctionDefinitionNode-accumulater, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 2
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-GreaterThan, Children(ReferenceNode(node, StartsWithTarget(Target(LeafWildcard("NameExpressionNode"))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithTarget(Target(LeafWildcard("NameExpressionNode"))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithTarget(Target(LeafWildcard("BinaryExpressionNode")))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-square), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK)))))), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(SuiteStatementNode, SingleChild(ConstNode(IfStatementNode, Children(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-term), SingleChild(LeafConstNode(NameExpressionNode-identity)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(AugmentedAssignStatementNode-Multiply, Children(LeafConstNode(NameExpressionNode-base), SingleChild(LeafConstNode(NameExpressionNode-i))))))))), SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-term), SingleChild(LeafConstNode(NameExpressionNode-square)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(AugmentedAssignStatementNode-Multiply, Children(LeafConstNode(NameExpressionNode-base), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-square), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK))))))))))))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChild(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-square), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK)))))), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(SuiteStatementNode, SingleChild(ConstNode(IfStatementNode, Children(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-term), SingleChild(LeafConstNode(NameExpressionNode-identity)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(AugmentedAssignStatementNode-Add, Children(LeafConstNode(NameExpressionNode-base), SingleChild(LeafConstNode(NameExpressionNode-i))))))))), SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-term), SingleChild(LeafConstNode(NameExpressionNode-square)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(AugmentedAssignStatementNode-Add, Children(LeafConstNode(NameExpressionNode-base), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-square), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK))))))))))))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))), InOrderSort(ast))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-n)))))))), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), Tutor.synthesis.MagicK))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), InOrderSort(ast)))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(TupleExpressionNode-False, Children(LeafConstNode(NameExpressionNode-total), SingleChild(LeafConstNode(NameExpressionNode-i)))), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChildren(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChildren(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(TupleExpressionNode-False, Children(LeafConstNode(NameExpressionNode-base), SingleChild(ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK)))), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChildren(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChildren(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ForStatementNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Target(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-i)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Target(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(LeafConstNode(NameExpressionNode-i), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(TupleExpressionNode-False, Children(LeafConstNode(NameExpressionNode-total), SingleChild(LeafConstNode(NameExpressionNode-i)))), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-total)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(TupleExpressionNode-False, Children(ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Add, Children(LeafConstNode(NameExpressionNode-i), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(WhileStatementNode, Children(ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(LeafConstNode(NameExpressionNode-i), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(AssignmentStatementNode, Children(ConstNode(TupleExpressionNode-False, Children(LeafConstNode(NameExpressionNode-total), SingleChild(LeafConstNode(NameExpressionNode-i)))), SingleChild(ConstNode(TupleExpressionNode-False, Children(ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Add, Children(LeafConstNode(NameExpressionNode-i), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))))))))))))), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Target(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-total)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))))))))))))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-combiner)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), Tutor.synthesis.MagicK)))))), 2), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ExpressionStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ExpressionStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(ExpressionStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(LeafConstNode(NameExpressionNode-total), SingleChild(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(AssignmentStatementNode, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Add, Children(LeafConstNode(NameExpressionNode-total), SingleChild(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)))))))), Selected(\x => Match(x, StartsWithParent(Node(ExpressionStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(ExpressionStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ExpressionStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ExpressionStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ExpressionStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(ExpressionStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(LeafConstNode(NameExpressionNode-total), SingleChild(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(AssignmentStatementNode, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Add, Children(LeafConstNode(NameExpressionNode-total), SingleChild(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK)))))))), Selected(\x => Match(x, StartsWithParent(Node(ExpressionStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Target(Node(ExpressionStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Node(ExpressionStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ExpressionStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK), 2), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Node(ExpressionStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast))))))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(TupleExpressionNode-False, Children(LeafConstNode(NameExpressionNode-base), SingleChild(ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK)))), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode"))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode"))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)))))), 1), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), InOrderSort(ast)))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulateHelp, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChild(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulateHelp, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, LeafConstNode(NameExpressionNode-accumulate), 0), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-combiner))), 1), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-base))), 2), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))), 4), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(IfStatementNode, Children(ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChild(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-n)))))))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-accumulate), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-combiner))), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-base))), Children(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK)))))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))))))))))))))))))))))), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulateHelp, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(FunctionDefinitionNode-accumulateHelp, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-accumulateHelp, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(FunctionDefinitionNode-accumulateHelp, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-accumulateHelp, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-accumulateHelp, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-accumulateHelp, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), InOrderSort(ast)))))))))))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(ConstantExpressionNode-0)))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-term_combiner, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-LessThan, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-2))))), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-GreaterThan, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0))))), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-accumulate)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-combiner)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))), 3), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))), 4), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(FunctionDefinitionNode-accumulator, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-accumulator, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-accumulator, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-accumulator, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-accumulator, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))))))))), InOrderSort(ast)))))))))))))))))))
experiment Information: 5 : Number of mistakes: 2
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThan, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Target(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(LeafWildcard("SuiteStatementNode")))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, Children(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-combiner), SingleChild(LeafConstNode(NameExpressionNode-add)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(BinaryExpressionNode-Add, Children(LeafConstNode(NameExpressionNode-base), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-helper), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(ConstantExpressionNode-1)))))))))))))))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), Tutor.synthesis.MagicK)))))), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-i), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-i)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-i)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-i)), Selected(\x => Match(x, StartsWithParent(Node(AugmentedAssignStatementNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Insert(node, ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-base)))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 2
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("any")))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("any")))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("any")))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), Tutor.synthesis.MagicK), Children(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK)))))))), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("any")))))), InOrderSort(ast))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-n)))))))), 2), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Insert(node, ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(ConstantExpressionNode-0))))))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ReferenceNode(node, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-base)))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))), TChild(Node(ExpressionStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))), TChild(Node(ExpressionStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))), TChild(Node(ExpressionStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), Tutor.synthesis.MagicK), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))), TChild(Node(ExpressionStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Target(Node(IfStatementTestNode, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, Children(ConstNode(IfStatementTestNode, Children(ConstNode(ParenthesisExpressionNode, SingleChild(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-base)))))))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-take_term, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), Tutor.synthesis.MagicK)))))), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-take_term, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-take_term, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-take_term, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, Children(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-base)))))))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Target(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)))))), 3), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Target(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-i)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-result))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-i)))))))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))))))))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))))))))))
experiment Information: 5 : Number of mistakes: 2
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(WhileStatementNode, Children(ReferenceNode(node, StartsWithParent(Node(WhileStatementNode, TChildren(Target(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))), Tutor.synthesis.MagicK)))))), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Target(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK), 3), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Insert(node, ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(ConstantExpressionNode-0)))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-k), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1))))), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-term)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-i))))))), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ForStatementNode, Children(LeafConstNode(NameExpressionNode-i), Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-range), Children(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), Tutor.synthesis.MagicK))))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-k), SingleChild(ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), Children(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)))))))))))))), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-k)))), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK), 3), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))))), InOrderSort(ast))))))))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-combiner)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, ConstNode(ReturnStatementNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ExpressionStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), Tutor.synthesis.MagicK)))), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ExpressionStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), Tutor.synthesis.MagicK), Children(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), Tutor.synthesis.MagicK), Children(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), Tutor.synthesis.MagicK), Children(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), Tutor.synthesis.MagicK))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), Tutor.synthesis.MagicK), 2), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-base))), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, Children(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-base))), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)))))))))))))), Children(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-base)))))))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), Tutor.synthesis.MagicK))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))))), InOrderSort(ast)))))))))))
experiment Information: 5 : Number of mistakes: 3
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithTarget(Target(LeafWildcard("ConstantExpressionNode")))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\x => Match(x, StartsWithTarget(Target(LeafWildcard("NameExpressionNode")))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-LessThan, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Target(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(AugmentedAssignStatementNode-Add, Children(LeafConstNode(NameExpressionNode-x), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Target(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-base)))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate_helper, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))))))))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, Children(ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChild(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-base))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(ConstantExpressionNode-1)))))))))))))))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Target(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-GreaterThan, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Target(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-base)))), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Target(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK)))), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), Tutor.synthesis.MagicK), 2), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(AugmentedAssignStatementNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(AugmentedAssignStatementNode-Subtract, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-term)), Selected(\x => Match(x, StartsWithParent(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term)))), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-base))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-accumulate), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-combiner))), Children(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK))), Children(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))))))))))))))))), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChildren(Target(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast)))))))))))))))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))), InOrderSort(ast))))))))))
experiment Information: 5 : Number of mistakes: 2
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("ArgNode"), TChild(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ArgNode")))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("ArgNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ArgNode"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ArgNode")))))), Tutor.synthesis.MagicK), 2), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("ArgNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ArgNode"))))))))))))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-LessThan, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-base)))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))))))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-LessThan, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(ReturnStatementNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK)))), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK)))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-n)))), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-accumulate), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-combiner))), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-base))), Children(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))))))))))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-n)))))))))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))))))))))))))))))
experiment Information: 5 : Number of mistakes: 2
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-base)))))))), 0), Selected(\x => Match(x, StartsWithTarget(Target(LeafWildcard("IfStatementNode")))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Equals, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("ArgNode"), TChild(LeafWildcard("ArgNode")))))))))))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK), Children(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK))))))), 2), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK), 3), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK), 4), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), InOrderSort(ast))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, LeafConstNode(NameExpressionNode-accumulate), 0), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-combiner))), 1), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-base))), 2), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))), InOrderSort(ast)))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), InOrderSort(ast)))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-y))), 5), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)))))), 1), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, LeafConstNode(NameExpressionNode-accumulate), 0), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-combiner))), 1), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-base))), 2), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))), 4), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast)))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThan, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Target(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), TChild(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), Tutor.synthesis.MagicK)))))), 1), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, LeafConstNode(NameExpressionNode-accumulate), 0), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-combiner))), 1), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-base))), 2), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))), 3), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-term)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), Tutor.synthesis.MagicK)))))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-accumulate), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-combiner))), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-base))), Children(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term)))))))))))))))))), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), TChild(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Target(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, Children(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-base)))))))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), Tutor.synthesis.MagicK)))))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-accumulate), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-combiner))), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-base))), Children(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term)))))))))))))))))))))), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))), InOrderSort(ast))))))))))))))))))))))
experiment Information: 5 : Number of mistakes: 2
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-combiner))), 1), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 2
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-total), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-total))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-i))))))))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-base))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(ConstantExpressionNode-0))))))))))))))))))))), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))))))))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-i), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-i)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-i)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-i)), Selected(\x => Match(x, StartsWithParent(Node(AugmentedAssignStatementNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-base))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))), TChild(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-Equals, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-Equals, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Target(LeafWildcard("NameExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), Tutor.synthesis.MagicK), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))))))))), InOrderSort(ast))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast)))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-partial_accum)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), InOrderSort(ast))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)))))), 1), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, LeafConstNode(NameExpressionNode-accumulate), 0), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-combiner))), 1), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-base))), 2), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))), 4), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-total), SingleChild(LeafConstNode(NameExpressionNode-base)))), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-total)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-a), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-summation, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-GreaterThan, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(NameExpressionNode-n))))), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Target(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-total), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-total))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-a))))))))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(AugmentedAssignStatementNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(AugmentedAssignStatementNode-Subtract, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Target(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(FunctionDefinitionNode-summation, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-summation, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-summation, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChildren(Target(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK), 3), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-summation, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))), Tutor.synthesis.MagicK), 4), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-summation, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-summation, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-summation, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))), InOrderSort(ast))))))))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode"))))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(FunctionDefinitionNode-accumulate_fuzzies, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(Target(LeafWildcard("ParameterNode")), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(FunctionDefinitionNode-accumulate_fuzzies, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), InOrderSort(ast))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-accumulate), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-combiner))), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-base))), Children(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))))))))))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-n)))))))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ExpressionStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ExpressionStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ExpressionStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-total)), Selected(\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-total)), Selected(\x => Match(x, StartsWithParent(Node(AugmentedAssignStatementNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\x => Match(x, StartsWithParent(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-total)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(AssignmentStatementNode, Children(ConstNode(TupleExpressionNode-False, Children(LeafConstNode(NameExpressionNode-total), SingleChild(LeafConstNode(NameExpressionNode-k)))), SingleChild(ConstNode(TupleExpressionNode-False, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-k)))))))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-total))))))), SingleChild(ConstNode(BinaryExpressionNode-Add, Children(LeafConstNode(NameExpressionNode-k), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-total)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast)))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-i)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-i), SingleChild(LeafConstNode(ConstantExpressionNode-1))))), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-total), SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-i)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(LeafConstNode(NameExpressionNode-i), SingleChild(LeafConstNode(NameExpressionNode-n))))), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-total)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-i)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-total), SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(AugmentedAssignStatementNode-Add, Children(LeafConstNode(NameExpressionNode-i), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 1), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(WhileStatementNode, Children(ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(LeafConstNode(NameExpressionNode-i), SingleChild(LeafConstNode(NameExpressionNode-n)))), SingleChild(ConstNode(SuiteStatementNode, Children(ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-total), SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)))), SingleChild(ConstNode(AugmentedAssignStatementNode-Add, Children(LeafConstNode(NameExpressionNode-i), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))))), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-total)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))), Tutor.synthesis.MagicK), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))), Tutor.synthesis.MagicK), 3), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), Tutor.synthesis.MagicK), 4), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))))))))))), InOrderSort(ast))))))))))))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-total)))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-total))), 1), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast)))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, Children(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-base)))))))), SingleChild(ConstNode(SuiteStatementNode, Children(ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK), Children(ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK), Children(ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Target(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), Tutor.synthesis.MagicK))))))))), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Target(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast)))))))))
experiment Information: 5 : Number of mistakes: 2
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-base))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))))))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-combiner)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(ParenthesisExpressionNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), Tutor.synthesis.MagicK)))))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-accumulate), Children(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK), Children(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK))), Children(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))))))))))))))))))))), 2), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(LeafWildcard("NameExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Update(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-a), SingleChild(ReferenceNode(node, StartsWithParent(Node(ExpressionStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(ExpressionStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK)))))))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-base))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ParenthesisExpressionNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, Children(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK)))))))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-base)))))))))))))), Children(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), Tutor.synthesis.MagicK), Children(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-base)))))))))))))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-accumulate), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-combiner))), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-base))), Children(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK)))))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))))))))))))))))))))))), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), InOrderSort(ast)))))))))))))
experiment Information: 5 : Number of mistakes: 3
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\x => Match(x, StartsWithTarget(Target(LeafWildcard("NameExpressionNode")))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-range), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(ConstantExpressionNode-1))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-NotEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))))), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Target(Node(BinaryExpressionNode-NotEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, ConstNode(ForStatementNode, Children(LeafConstNode(NameExpressionNode-i), Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-range), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(ConstantExpressionNode-1))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-NotEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))))))), SingleChild(ReferenceNode(node, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-NotEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), Tutor.synthesis.MagicK)))))), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-NotEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(ParenthesisExpressionNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, LeafConstNode(NameExpressionNode-accumulate), 0), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-combiner))), 1), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-base))), 2), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))), 4), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))), 2), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThan, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-0))))), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-accumulate)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-combiner)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), Tutor.synthesis.MagicK), 2), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK), 3), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK), 4), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-next_term), SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-base))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-next_term))))))))), 4), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))))))))))))), InOrderSort(ast))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Insert(node, ConstNode(ExpressionStatementNode, SingleChild(LeafConstNode(ConstantExpressionNode-Return the result of combining the first N terms in a sequence.  The
    terms to be combined are TERM(1), TERM(2), ..., TERM(N).  COMBINER is a
    two-argument function.  Treating COMBINER as if it were a binary operator,
    the return value is
        BASE COMBINER TERM(1) COMBINER TERM(2) ... COMBINER TERM(N)

#     >>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5
#     15
#     >>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5
#     26
#     >>> accumulate(add, 11, 0, identity) # 11
#     11
#     >>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2
#     25
#     >>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2
#     72
#     ))), 0), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-GreaterThan, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Target(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-base)))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, LeafConstNode(NameExpressionNode-accumulate), 0), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-combiner))), 1), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-base))), 2), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))), 4), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(ReturnStatementNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), Tutor.synthesis.MagicK)))), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Target(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), InOrderSort(ast))))))))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), Tutor.synthesis.MagicK)))))), 1), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-n))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), InOrderSort(ast))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))))), InOrderSort(ast)))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-i), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, ConstNode(AugmentedAssignStatementNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1))))), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(OrExpressionNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChild(Target(Node(IfStatementTestNode, TChildren(Node(OrExpressionNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(OrExpressionNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChild(Target(Node(IfStatementTestNode, TChildren(Node(OrExpressionNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-n)))))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(OrExpressionNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(OrExpressionNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))))))))))
experiment Information: 5 : Number of mistakes: 2
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-k), SingleChild(ConstNode(BinaryExpressionNode-Add, Children(LeafConstNode(NameExpressionNode-k), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))), 1), Selected(\x => Match(x, StartsWithTarget(Target(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("any"))))))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-combiner), SingleChild(LeafConstNode(NameExpressionNode-mul)))), SingleChild(ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Insert(node, ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-n)))))))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-base))))))))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-accumulate), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-combiner))), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(ConstantExpressionNode-0))), Children(ConstNode(ArgNode, SingleChild(ConstNode(ParenthesisExpressionNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))))))))))))))))))), 2), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Insert(node, ConstNode(AugmentedAssignStatementNode-Add, Children(LeafConstNode(NameExpressionNode-counter), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 1), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThan, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Target(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-start)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-Return the result of combining the first N terms in a sequence.  The
    terms to be combined are TERM(1), TERM(2), ..., TERM(N).  COMBINER is a
    two-argument function.  Treating COMBINER as if it were a binary operator,
    the return value is
        BASE COMBINER TERM(1) COMBINER TERM(2) ... COMBINER TERM(N)

    >>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5
    15
    >>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5
    26
    >>> accumulate(add, 11, 0, identity) # 11
    11
    >>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2
    25
    >>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2
    72
    )), Selected(\x => Match(x, StartsWithParent(Node(ExpressionStatementNode, TChild(Target(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-k)))))), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-base)))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Equals, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(WhileStatementNode, Children(ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(LeafConstNode(NameExpressionNode-i), SingleChild(LeafConstNode(NameExpressionNode-n)))), SingleChild(ConstNode(SuiteStatementNode, Children(ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Target(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), Tutor.synthesis.MagicK))))))), 4), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChildren(Target(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), Tutor.synthesis.MagicK), 3), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, LeafConstNode(NameExpressionNode-accumulate), 0), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK))), 1), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-base))), 2), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))))))))
experiment Information: 5 : Number of mistakes: 2
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(ConstantExpressionNode-1)))))), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChildren(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChildren(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Insert(node, ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-n)))))))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-accumulate), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-combiner))), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-base))), Children(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))))))))))))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ExpressionStatementNode, TChild(Target(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(ReturnStatementNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK)))), Selected(\x => Match(x, StartsWithParent(Node(ExpressionStatementNode, TChild(Target(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ParenthesisExpressionNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(AugmentedAssignStatementNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, Children(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK)))))))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), Tutor.synthesis.MagicK), Children(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-n)))))))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-accumulate), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-combiner))), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-base))), Children(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term)))))))))))))))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChildren(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Target(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), TChildren(Target(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), InOrderSort(ast))))))))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, Children(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-combiner), SingleChild(LeafConstNode(NameExpressionNode-add)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)))))), SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-combiner), SingleChild(LeafConstNode(NameExpressionNode-mul)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-final_number), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))))))))), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(ExpressionStatementNode, SingleChild(LeafConstNode(ConstantExpressionNode-if n==0:
        return base
    elif n>0:
        return combiner(term(n), accumulate(n-1))
    elif n==1:
        return combiner(base, term(n))))), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))), Tutor.synthesis.MagicK))), 3), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-i), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-GreaterThan, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-i)))))))))))))), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-i)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-accumulate_helper)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-i)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(LeafConstNode(NameExpressionNode-i), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(FunctionDefinitionNode-accumulate_helper, Children(LeafConstNode(ParameterNode-i), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(IfStatementNode, Children(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-i), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-GreaterThan, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-i))))))))))))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-i)))))))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-accumulate_helper), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Add, Children(LeafConstNode(NameExpressionNode-i), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK))))))))))))))))))))))))))), 4), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-accumulate_helper)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), Tutor.synthesis.MagicK), 5), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), TChild(Target(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast)))))))))))))))))
experiment Information: 5 : Number of mistakes: 2
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-x)), Selected(\x => Match(x, StartsWithTarget(Target(LeafWildcard("NameExpressionNode")))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK), 3), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))), InOrderSort(ast)))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ForStatementNode, Children(ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK), Children(ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Target(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-term)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-combiner)), Selected(\x => Match(x, StartsWithParent(Node(ExpressionStatementNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(AugmentedAssignStatementNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Target(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Target(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-term)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-n)))))))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-accumulate), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-combiner))), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-base))), Children(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))))))))))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))))))))))))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-result)), Selected(\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0))))), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(TupleExpressionNode-False, TChildren(Target(LeafWildcard("ConstantExpressionNode")), TChild(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(TupleExpressionNode-False, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-term)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK))))))), Selected(\x => Match(x, StartsWithParent(Node(ParenthesisExpressionNode, TChild(Target(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK))))))))), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Target(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-accumulate)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), Tutor.synthesis.MagicK), 2), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), Tutor.synthesis.MagicK), 3), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-term)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK), 4), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, Children(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-base)))))))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK)))))))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-accumulate), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-combiner))), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-base))), Children(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term)))))))))))))))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChildren(Node(WhileStatementNode, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChildren(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(WhileStatementNode, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChildren(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChildren(Node(WhileStatementNode, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChildren(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChildren(Target(Node(WhileStatementNode, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), TChildren(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChildren(Node(WhileStatementNode, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChildren(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChildren(Node(WhileStatementNode, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChildren(Target(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChildren(Node(WhileStatementNode, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChildren(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChildren(Node(WhileStatementNode, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChildren(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Target(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChildren(Node(WhileStatementNode, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChildren(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), InOrderSort(ast)))))))))))))))))))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-LessThan, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-GreaterThan, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Target(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), InOrderSort(ast))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), TChildren(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChildren(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(FunctionDefinitionNode-helper, Children(LeafConstNode(ParameterNode-x), Children(LeafConstNode(ParameterNode-term), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(IfStatementNode, Children(ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChild(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), Tutor.synthesis.MagicK), Children(ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), Tutor.synthesis.MagicK))))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChildren(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChildren(Target(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChildren(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Insert(node, ConstNode(AugmentedAssignStatementNode-Add, Children(LeafConstNode(NameExpressionNode-start), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 1), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)))))), 1), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast)))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, Children(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-base)))))))), SingleChild(ConstNode(SuiteStatementNode, Children(ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChildren(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), Tutor.synthesis.MagicK), Children(ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Target(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChildren(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Target(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), InOrderSort(ast))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Insert(node, ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-n))))))))))))), 2), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-NotEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-combiner))), 1), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), InOrderSort(ast))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-BitwiseOr, Children(ConstNode(ParenthesisExpressionNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), Tutor.synthesis.MagicK))), SingleChild(ConstNode(ParenthesisExpressionNode, SingleChild(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, LeafConstNode(NameExpressionNode-combiner), 0), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-accumulate), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-combiner))), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-base))), Children(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), Tutor.synthesis.MagicK))))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-term)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(IfStatementNode, Children(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), Tutor.synthesis.MagicK)))))))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-accumulate), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-combiner))), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-base))), Children(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), Tutor.synthesis.MagicK))))))))))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-n)))))))))))))))))))), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))), InOrderSort(ast)))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK)))))), 1), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), Tutor.synthesis.MagicK), 2), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-total), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-n)))))))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-base)))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-total)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-x)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-combiner), SingleChild(ReferenceNode(node, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(SuiteStatementNode, TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)))), 0), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChild(Target(Node(IfStatementTestNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(SuiteStatementNode, TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(SuiteStatementNode, TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChild(Target(Node(IfStatementTestNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(SuiteStatementNode, TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-combiner), SingleChild(ReferenceNode(node, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(SuiteStatementNode, TChild(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)))), 0), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChild(Target(Node(IfStatementTestNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(SuiteStatementNode, TChild(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(SuiteStatementNode, TChild(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChild(Target(Node(IfStatementTestNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(SuiteStatementNode, TChild(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)))))), 2), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast)))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-k), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast)))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-GreaterThan, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0))))), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Target(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(AugmentedAssignStatementNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, ConstNode(AugmentedAssignStatementNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(ReferenceNode(node, StartsWithParent(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Target(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), InOrderSort(ast)))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), Patch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(ConstantExpressionNode-0)))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulated_terms, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-LessThan, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-accumulate), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-combiner))), Children(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), Tutor.synthesis.MagicK), Children(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))))))))))), 2), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), Tutor.synthesis.MagicK)))))), 2), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), Tutor.synthesis.MagicK)))))), 2), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, Children(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-base)))))))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-n)))))))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-accumulate), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-combiner))), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-base))), Children(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term)))))))))))))))))))))), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-total)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-counter)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode"))))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThan, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Target(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), InOrderSort(ast)))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(FunctionDefinitionNode-summation, TChildren(Target(LeafWildcard("ParameterNode")), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(FunctionDefinitionNode-summation, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(FunctionDefinitionNode-summation, TChildren(LeafWildcard("ParameterNode"), TChildren(Target(LeafWildcard("ParameterNode")), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(FunctionDefinitionNode-summation, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(TupleExpressionNode-False, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(TupleExpressionNode-False, TChildren(Target(LeafWildcard("ConstantExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(ReferenceNode(node, StartsWithParent(Node(TupleExpressionNode-False, TChildren(Target(LeafWildcard("ConstantExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Target(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-summation, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-summation, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(ReferenceNode(node, StartsWithParent(Node(TupleExpressionNode-False, TChildren(Target(LeafWildcard("ConstantExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK)))), SingleChild(ReferenceNode(node, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-summation, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(ReferenceNode(node, StartsWithParent(Node(TupleExpressionNode-False, TChildren(Target(LeafWildcard("ConstantExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK)))), SingleChild(ReferenceNode(node, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK))))))), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(FunctionDefinitionNode-summation, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-term)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), Tutor.synthesis.MagicK)))), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-summation, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-summation, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-summation, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, LeafConstNode(NameExpressionNode-accumulate), 0), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-combiner))), 1), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-base))), 2), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-accumulate), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-combiner))), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-base))), Children(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term)))))))))))), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-summation, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), Tutor.synthesis.MagicK), 2), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-summation, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), Tutor.synthesis.MagicK))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-accumulate), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-combiner))), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-base))), Children(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))))))))))))))))), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-summation, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-summation, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-summation, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))))), InOrderSort(ast)))))))))))))))))))))))))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-p)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK), Children(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), Tutor.synthesis.MagicK)))))))), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast)))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-total), SingleChild(LeafConstNode(NameExpressionNode-base)))), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\x => Match(x, StartsWithParent(Node(AugmentedAssignStatementNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), InOrderSort(ast))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-i), SingleChild(LeafConstNode(ConstantExpressionNode-2)))), 3), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(AssignmentStatementNode, Children(ConstNode(TupleExpressionNode-False, Children(LeafConstNode(NameExpressionNode-total), SingleChild(LeafConstNode(NameExpressionNode-k)))), SingleChild(ConstNode(TupleExpressionNode-False, Children(LeafConstNode(NameExpressionNode-base), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-increment)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK)))), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(AssignmentStatementNode, Children(ConstNode(TupleExpressionNode-False, Children(ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(NameExpressionNode-k)))), SingleChild(ConstNode(TupleExpressionNode-False, Children(ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-increment), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK)))))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), InOrderSort(ast)))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(WhileStatementNode, TChildren(Target(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Target(Node(WhileStatementNode, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ParenthesisExpressionNode, TChild(Target(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Target(Node(WhileStatementNode, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-result))), 2), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), InOrderSort(ast))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-FloorDivide, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Divide, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Divide, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Divide, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Insert(node, LeafConstNode(NameExpressionNode-base), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard("ReturnStatementNode")))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), Tutor.synthesis.MagicK)))))), 2), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-accumulate), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-combiner))), Children(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-base))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-n)))))))))))))), Children(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))), Tutor.synthesis.MagicK))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), InOrderSort(ast)))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-combiner)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChildren(Node(FromImportStatementNode-System.String[], TChild(LeafWildcard("DottedNameNode"))), TChild(Node(FunctionDefinitionNode-accumulate_helper, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(PythonAstNode, TChild(Target(Node(SuiteStatementNode, TChildren(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChildren(Node(FromImportStatementNode-System.String[], TChild(LeafWildcard("DottedNameNode"))), TChild(Node(FunctionDefinitionNode-accumulate_helper, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChildren(Target(Node(FromImportStatementNode-System.String[], TChild(LeafWildcard("DottedNameNode")))), TChild(Node(FunctionDefinitionNode-accumulate_helper, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(PythonAstNode, TChild(Target(Node(SuiteStatementNode, TChildren(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChildren(Node(FromImportStatementNode-System.String[], TChild(LeafWildcard("DottedNameNode"))), TChild(Node(FunctionDefinitionNode-accumulate_helper, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-base)))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, LeafConstNode(NameExpressionNode-accumulate), 0), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))), TChild(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-combiner))), 1), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))), TChild(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-base))), 2), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))), TChild(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))), TChild(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))), 4), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))), TChild(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-accumulate), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-combiner))), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-base))), Children(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))))))))))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK))))))))))))), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode"))))), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode"))))), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChild(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(FunctionDefinitionNode-accumulate, Children(ReferenceNode(node, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(Target(LeafWildcard("ParameterNode")), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK), Children(ReferenceNode(node, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(Target(LeafWildcard("ParameterNode")), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK), Children(ReferenceNode(node, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(Target(LeafWildcard("ParameterNode")), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK), Children(ReferenceNode(node, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(Target(LeafWildcard("ParameterNode")), TChild(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(SuiteStatementNode, Children(ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))), Tutor.synthesis.MagicK), Children(ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(IfStatementNode, Children(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-base)))))))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-accumulate), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-combiner))), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-base))), Children(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))))))))))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK))))))))))))))))))))))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(PythonAstNode, TChild(Target(Node(SuiteStatementNode, TChildren(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChildren(Node(FromImportStatementNode-System.String[], TChild(LeafWildcard("DottedNameNode"))), TChild(Node(FunctionDefinitionNode-accumulate_helper, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChildren(Node(FromImportStatementNode-System.String[], TChild(LeafWildcard("DottedNameNode"))), TChild(Target(Node(FunctionDefinitionNode-accumulate_helper, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(PythonAstNode, TChild(Target(Node(SuiteStatementNode, TChildren(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChildren(Node(FromImportStatementNode-System.String[], TChild(LeafWildcard("DottedNameNode"))), TChild(Node(FunctionDefinitionNode-accumulate_helper, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))), InOrderSort(ast)))))))))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(UnaryExpressionNode-Not, TChild(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(UnaryExpressionNode-Not, TChild(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-total)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(PrintStatementNode, TChild(Node(ParenthesisExpressionNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-counter, TChildren(LeafWildcard("ParameterNode"), TChildren(Node(ParameterNode-total, TChild(LeafWildcard("NameExpressionNode"))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(PrintStatementNode, TChild(Node(ParenthesisExpressionNode, TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-base)))))))))), 3), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FromImportStatementNode-System.String[], TChild(LeafWildcard("DottedNameNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-term)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), InOrderSort(ast)))))))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-combiner), SingleChild(LeafConstNode(NameExpressionNode-mul)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-v), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))))), 3), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-k), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-increment), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-k))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(TupleExpressionNode-False, Children(LeafConstNode(NameExpressionNode-total), SingleChild(ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK)))), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(TupleExpressionNode-False, Children(LeafConstNode(NameExpressionNode-base), SingleChild(ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK)))), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Target(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Target(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-total)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))))))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChildren(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChildren(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-GreaterThanOrEqual, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Target(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChildren(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Target(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChildren(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), InOrderSort(ast))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)))))), 1), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-i)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-i), SingleChild(LeafConstNode(ConstantExpressionNode-1))))), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-i)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChild(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChild(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-i)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChild(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChild(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-i)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(WhileStatementNode, Children(ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(LeafConstNode(NameExpressionNode-i), SingleChild(LeafConstNode(NameExpressionNode-n)))), SingleChild(ConstNode(SuiteStatementNode, Children(ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-base), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-base))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-i))))))))))))))), SingleChild(ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-i), SingleChild(ConstNode(BinaryExpressionNode-Add, Children(LeafConstNode(NameExpressionNode-i), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))))))), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))), TChildren(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), Tutor.synthesis.MagicK), 3), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))))))))))))))))))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChildren(Node(PrintStatementNode, TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(PrintStatementNode, TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Target(Node(PrintStatementNode, TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(PrintStatementNode, TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Insert(node, ConstNode(AugmentedAssignStatementNode-Add, Children(LeafConstNode(NameExpressionNode-count), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 2), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(PrintStatementNode, TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-GreaterThan, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0))))), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Target(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Target(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Target(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Insert(node, ConstNode(AugmentedAssignStatementNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 2), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), InOrderSort(ast))))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-total)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), Tutor.synthesis.MagicK), 2), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), InOrderSort(ast))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-combiner), SingleChild(LeafConstNode(NameExpressionNode-add)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), Tutor.synthesis.MagicK)))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-combiner), SingleChild(LeafConstNode(NameExpressionNode-mul)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-result), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-accumulation)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-total)))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), TChildren(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-i)))))), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Insert(node, ConstNode(AugmentedAssignStatementNode-Add, Children(LeafConstNode(NameExpressionNode-counter), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 1), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-i)), Selected(\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode"))))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-i)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-index)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(Target(LeafWildcard("ConstantExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-total))), 1), Selected(\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-sequence, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-b), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-a)))))))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(ConstantExpressionNode-1)))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(SuiteStatementNode, Children(ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-a)))))))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-b))))))), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ReferenceNode(node, StartsWithParent(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), Tutor.synthesis.MagicK)))))), Children(ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-b), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-a)))))))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-b)))))))))), SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-value), Children(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Add, Children(LeafConstNode(NameExpressionNode-a), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-b))))))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChild(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChild(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(SuiteStatementNode, SingleChild(ConstNode(IfStatementNode, Children(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))))))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-n)))))))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-rec_n), Children(ConstNode(ArgNode, SingleChild(ConstNode(ParenthesisExpressionNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term)))))))))))))))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(PrintStatementNode, TChild(Node(ParenthesisExpressionNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(PrintStatementNode, TChild(Node(ParenthesisExpressionNode, TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(PrintStatementNode, TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), TChild(Node(ExpressionStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(PrintStatementNode, TChild(Node(ParenthesisExpressionNode, TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(PrintStatementNode, TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), TChild(Node(ExpressionStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, ConstNode(ReturnStatementNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ExpressionStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), Tutor.synthesis.MagicK)))), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(PrintStatementNode, TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), TChild(Target(Node(ExpressionStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast)))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Power, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ParenthesisExpressionNode, TChild(Target(Node(BinaryExpressionNode-Power, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Power, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK)))), Selected(\x => Match(x, StartsWithParent(Node(ParenthesisExpressionNode, TChild(Target(Node(BinaryExpressionNode-Power, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Power, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK))))))), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Power, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-total_choice)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-total_choice)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-total_choice)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-base), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-n)))))))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-base)))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, LeafConstNode(ParameterNode-total), 3), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(FunctionDefinitionNode-function, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(Node(ParameterNode-i, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ParameterNode-total, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(FunctionDefinitionNode-function, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(Node(ParameterNode-i, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(ParameterNode-total, TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(FunctionDefinitionNode-function, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(Node(ParameterNode-i, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ParameterNode-total, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-function, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(Node(ParameterNode-i, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ParameterNode-total, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-total))), 4), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, Children(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-combiner), SingleChild(LeafConstNode(NameExpressionNode-mul)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-total), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-total), SingleChild(LeafConstNode(ConstantExpressionNode-0))))))))), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-function, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(Node(ParameterNode-i, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ParameterNode-total, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-total))), 4), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), InOrderSort(ast)))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-base)))))))))), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-terms, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(ConstantExpressionNode-1)))))))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-base)))))))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(Target(LeafWildcard("ConstantExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-combiner), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-t))), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast)))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-total)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), InOrderSort(ast)))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-base)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-combiner)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-combiner)))), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)))), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), Tutor.synthesis.MagicK), 2), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), Tutor.synthesis.MagicK), 3), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK), 4), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, Children(ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChild(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-accumulate), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-combiner))), Children(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), Tutor.synthesis.MagicK))), Children(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term)))))))))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-accumulate, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(CallEx