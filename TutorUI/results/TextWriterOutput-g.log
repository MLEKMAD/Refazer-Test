experiment Start: 6 : Learning scripts from existing classification
experiment Information: 6 : Number of clusters: 163
experiment Information: 6 : Learning cluster 1 with mistakes: 1
experiment Information: 6 : Learning cluster 2 with mistakes: 1
experiment Information: 6 : Learning cluster 3 with mistakes: 1
experiment Information: 6 : Learning cluster 4 with mistakes: 1
experiment Information: 6 : Learning cluster 5 with mistakes: 1
experiment Information: 6 : Learning cluster 6 with mistakes: 53
experiment Information: 6 : Learning cluster 7 with mistakes: 6
experiment Information: 6 : Learning cluster 8 with mistakes: 1
experiment Information: 6 : Learning cluster 9 with mistakes: 4
experiment Information: 6 : Learning cluster 10 with mistakes: 5
experiment Information: 6 : Learning cluster 11 with mistakes: 1
experiment Information: 6 : Learning cluster 12 with mistakes: 1
experiment Information: 6 : Learning cluster 13 with mistakes: 11
experiment Information: 6 : Learning cluster 14 with mistakes: 1
experiment Information: 6 : Learning cluster 15 with mistakes: 1
experiment Information: 6 : Learning cluster 16 with mistakes: 1
experiment Information: 6 : Learning cluster 17 with mistakes: 1
experiment Information: 6 : Learning cluster 18 with mistakes: 2
experiment Information: 6 : Learning cluster 19 with mistakes: 4
experiment Information: 6 : Learning cluster 20 with mistakes: 1
experiment Information: 6 : Learning cluster 21 with mistakes: 1
experiment Information: 6 : Learning cluster 22 with mistakes: 6
experiment Information: 6 : Learning cluster 23 with mistakes: 1
experiment Information: 6 : Learning cluster 24 with mistakes: 1
experiment Information: 6 : Learning cluster 25 with mistakes: 1
experiment Information: 6 : Learning cluster 26 with mistakes: 4
experiment Information: 6 : Learning cluster 27 with mistakes: 11
experiment Information: 6 : Learning cluster 28 with mistakes: 1
experiment Information: 6 : Learning cluster 29 with mistakes: 1
experiment Information: 6 : Learning cluster 30 with mistakes: 1
experiment Information: 6 : Learning cluster 31 with mistakes: 1
experiment Information: 6 : Learning cluster 32 with mistakes: 1
experiment Information: 6 : Learning cluster 33 with mistakes: 5
experiment Information: 6 : Learning cluster 34 with mistakes: 16
experiment Information: 6 : Learning cluster 35 with mistakes: 1
experiment Information: 6 : Learning cluster 36 with mistakes: 1
experiment Information: 6 : Learning cluster 37 with mistakes: 1
experiment Information: 6 : Learning cluster 38 with mistakes: 1
experiment Information: 6 : Learning cluster 39 with mistakes: 1
experiment Information: 6 : Learning cluster 40 with mistakes: 2
experiment Information: 6 : Learning cluster 41 with mistakes: 1
experiment Information: 6 : Learning cluster 42 with mistakes: 1
experiment Information: 6 : Learning cluster 43 with mistakes: 1
experiment Information: 6 : Learning cluster 44 with mistakes: 5
experiment Information: 6 : Learning cluster 45 with mistakes: 1
experiment Information: 6 : Learning cluster 46 with mistakes: 1
experiment Information: 6 : Learning cluster 47 with mistakes: 2
experiment Information: 6 : Learning cluster 48 with mistakes: 1
experiment Information: 6 : Learning cluster 49 with mistakes: 1
experiment Information: 6 : Learning cluster 50 with mistakes: 5
experiment Information: 6 : Learning cluster 51 with mistakes: 2
experiment Information: 6 : Learning cluster 52 with mistakes: 2
experiment Information: 6 : Learning cluster 53 with mistakes: 1
experiment Information: 6 : Learning cluster 54 with mistakes: 1
experiment Information: 6 : Learning cluster 55 with mistakes: 2
experiment Information: 6 : Learning cluster 56 with mistakes: 1
experiment Information: 6 : Learning cluster 57 with mistakes: 1
experiment Information: 6 : Learning cluster 58 with mistakes: 1
experiment Information: 6 : Learning cluster 59 with mistakes: 1
experiment Information: 6 : Learning cluster 60 with mistakes: 2
experiment Information: 6 : Learning cluster 61 with mistakes: 4
experiment Information: 6 : Learning cluster 62 with mistakes: 1
experiment Information: 6 : Learning cluster 63 with mistakes: 1
experiment Information: 6 : Learning cluster 64 with mistakes: 1
experiment Information: 6 : Learning cluster 65 with mistakes: 1
experiment Information: 6 : Learning cluster 66 with mistakes: 1
experiment Information: 6 : Learning cluster 67 with mistakes: 1
experiment Information: 6 : Learning cluster 68 with mistakes: 1
experiment Information: 6 : Learning cluster 69 with mistakes: 4
experiment Information: 6 : Learning cluster 70 with mistakes: 3
experiment Information: 6 : Learning cluster 71 with mistakes: 1
experiment Information: 6 : Learning cluster 72 with mistakes: 1
experiment Information: 6 : Learning cluster 73 with mistakes: 1
experiment Information: 6 : Learning cluster 74 with mistakes: 2
experiment Information: 6 : Learning cluster 75 with mistakes: 1
experiment Information: 6 : Learning cluster 76 with mistakes: 1
experiment Information: 6 : Learning cluster 77 with mistakes: 2
experiment Information: 6 : Learning cluster 78 with mistakes: 1
experiment Information: 6 : Learning cluster 79 with mistakes: 1
experiment Information: 6 : Learning cluster 80 with mistakes: 1
experiment Information: 6 : Learning cluster 81 with mistakes: 2
experiment Information: 6 : Learning cluster 82 with mistakes: 1
experiment Information: 6 : Learning cluster 83 with mistakes: 1
experiment Information: 6 : Learning cluster 84 with mistakes: 1
experiment Information: 6 : Learning cluster 85 with mistakes: 2
experiment Information: 6 : Learning cluster 86 with mistakes: 1
experiment Information: 6 : Learning cluster 87 with mistakes: 1
experiment Information: 6 : Learning cluster 88 with mistakes: 1
experiment Information: 6 : Learning cluster 89 with mistakes: 1
experiment Information: 6 : Learning cluster 90 with mistakes: 1
experiment Information: 6 : Learning cluster 91 with mistakes: 1
experiment Information: 6 : Learning cluster 92 with mistakes: 1
experiment Information: 6 : Learning cluster 93 with mistakes: 1
experiment Information: 6 : Learning cluster 94 with mistakes: 1
experiment Information: 6 : Learning cluster 95 with mistakes: 1
experiment Information: 6 : Learning cluster 96 with mistakes: 1
experiment Information: 6 : Learning cluster 97 with mistakes: 1
experiment Information: 6 : Learning cluster 98 with mistakes: 1
experiment Information: 6 : Learning cluster 99 with mistakes: 2
experiment Information: 6 : Learning cluster 100 with mistakes: 1
experiment Information: 6 : Learning cluster 101 with mistakes: 1
experiment Information: 6 : Learning cluster 102 with mistakes: 1
experiment Information: 6 : Learning cluster 103 with mistakes: 1
experiment Information: 6 : Learning cluster 104 with mistakes: 1
experiment Information: 6 : Learning cluster 105 with mistakes: 1
experiment Information: 6 : Learning cluster 106 with mistakes: 1
experiment Information: 6 : Learning cluster 107 with mistakes: 1
experiment Information: 6 : Learning cluster 108 with mistakes: 1
experiment Information: 6 : Learning cluster 109 with mistakes: 1
experiment Information: 6 : Learning cluster 110 with mistakes: 1
experiment Information: 6 : Learning cluster 111 with mistakes: 1
experiment Information: 6 : Learning cluster 112 with mistakes: 1
experiment Information: 6 : Learning cluster 113 with mistakes: 1
experiment Information: 6 : Learning cluster 114 with mistakes: 1
experiment Information: 6 : Learning cluster 115 with mistakes: 2
experiment Information: 6 : Learning cluster 116 with mistakes: 1
experiment Information: 6 : Learning cluster 117 with mistakes: 1
experiment Information: 6 : Learning cluster 118 with mistakes: 1
experiment Information: 6 : Learning cluster 119 with mistakes: 1
experiment Information: 6 : Learning cluster 120 with mistakes: 1
experiment Information: 6 : Learning cluster 121 with mistakes: 1
experiment Information: 6 : Learning cluster 122 with mistakes: 1
experiment Information: 6 : Learning cluster 123 with mistakes: 1
experiment Information: 6 : Learning cluster 124 with mistakes: 1
experiment Information: 6 : Learning cluster 125 with mistakes: 1
experiment Information: 6 : Learning cluster 126 with mistakes: 1
experiment Information: 6 : Learning cluster 127 with mistakes: 1
experiment Information: 6 : Learning cluster 128 with mistakes: 1
experiment Information: 6 : Learning cluster 129 with mistakes: 1
experiment Information: 6 : Learning cluster 130 with mistakes: 1
experiment Information: 6 : Learning cluster 131 with mistakes: 1
experiment Information: 6 : Learning cluster 132 with mistakes: 1
experiment Information: 6 : Learning cluster 133 with mistakes: 1
experiment Information: 6 : Learning cluster 134 with mistakes: 1
experiment Information: 6 : Learning cluster 135 with mistakes: 1
experiment Information: 6 : Learning cluster 136 with mistakes: 1
experiment Information: 6 : Learning cluster 137 with mistakes: 1
experiment Information: 6 : Learning cluster 138 with mistakes: 1
experiment Information: 6 : Learning cluster 139 with mistakes: 1
experiment Information: 6 : Learning cluster 140 with mistakes: 1
experiment Information: 6 : Learning cluster 141 with mistakes: 1
experiment Information: 6 : Learning cluster 142 with mistakes: 1
experiment Information: 6 : Learning cluster 143 with mistakes: 1
experiment Information: 6 : Learning cluster 144 with mistakes: 1
experiment Information: 6 : Learning cluster 145 with mistakes: 1
experiment Information: 6 : Learning cluster 146 with mistakes: 1
experiment Information: 6 : Learning cluster 147 with mistakes: 1
experiment Information: 6 : Learning cluster 148 with mistakes: 1
experiment Information: 6 : Learning cluster 149 with mistakes: 1
experiment Information: 6 : Learning cluster 150 with mistakes: 1
experiment Information: 6 : Learning cluster 151 with mistakes: 1
experiment Information: 6 : Learning cluster 152 with mistakes: 1
experiment Information: 6 : Learning cluster 153 with mistakes: 1
experiment Information: 6 : Learning cluster 154 with mistakes: 1
experiment Information: 6 : Learning cluster 155 with mistakes: 1
experiment Information: 6 : Learning cluster 156 with mistakes: 1
experiment Information: 6 : Learning cluster 157 with mistakes: 1
experiment Information: 6 : Learning cluster 158 with mistakes: 1
experiment Information: 6 : Learning cluster 159 with mistakes: 1
experiment Information: 6 : Learning cluster 160 with mistakes: 1
experiment Information: 6 : Learning cluster 161 with mistakes: 1
experiment Information: 6 : Learning cluster 162 with mistakes: 1
experiment Information: 6 : Learning cluster 163 with mistakes: 1
experiment Stop: 6 : Learning scripts from existing classification
experiment Start: 1 : Student 1071
experiment Start: 1 : Student 1071, Attempt 1
experiment Information: 4 : Student 1071, Fixed Attempt 1
experiment Start: 1 : Student 1068
experiment Start: 1 : Student 1068, Attempt 1
experiment Information: 4 : Student 1068, Fixed Attempt 1
experiment Start: 1 : Student 1062
experiment Start: 1 : Student 1062, Attempt 1
experiment Information: 4 : Student 1062, Fixed Attempt 1
experiment Start: 1 : Student 1059
experiment Start: 1 : Student 1059, Attempt 1
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 1057
experiment Start: 1 : Student 1057, Attempt 1
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 1054
experiment Start: 1 : Student 1054, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3:
        return n
    else:
        while n > 3:
            result *= g(n-1)
        return result

 

experiment Start: 1 : Student 1054, Attempt 2
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    result = 1
    if n <= 3:
        return n
    else:
        while n > 3:
            result *= g(n-1)
        return result

 

experiment Start: 1 : Student 1054, Attempt 3
experiment Information: 4 : Student 1054, Fixed Attempt 3
experiment Start: 1 : Student 1051
experiment Start: 1 : Student 1051, Attempt 1
experiment Information: 4 : Student 1051, Fixed Attempt 1
experiment Start: 1 : Student 1048
experiment Start: 1 : Student 1048, Attempt 1
experiment Information: 4 : Student 1048, Fixed Attempt 1
experiment Start: 1 : Student 1045
experiment Start: 1 : Student 1045, Attempt 1
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 1045, Attempt 2
experiment Information: 4 : Student 1045, Fixed Attempt 2
experiment Start: 1 : Student 1038
experiment Start: 1 : Student 1038, Attempt 1
experiment Information: 4 : Student 1038, Fixed Attempt 1
experiment Start: 1 : Student 1036
experiment Start: 1 : Student 1036, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    return g(n) + g(n-1)

 

experiment Start: 1 : Student 1036, Attempt 2
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    if n == 0:
        return 0
    return g(n) + g(n-1)

 

experiment Start: 1 : Student 1036, Attempt 3
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    if n == 0:
        return 
    return g(n) + g(n-1)

 

experiment Start: 1 : Student 1036, Attempt 4
experiment Information: 4 : Student 1036, Fixed Attempt 4
experiment Start: 1 : Student 1035
experiment Start: 1 : Student 1035, Attempt 1
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 1027
experiment Start: 1 : Student 1027, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"

    if(n<=3):
        return n

    def g_help(n, i):
        if(i==3):
            return G(n-3)

 

experiment Start: 1 : Student 1027, Attempt 2
experiment Information: 4 : Student 1027, Fixed Attempt 2
experiment Start: 1 : Student 1026
experiment Start: 1 : Student 1026, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3:
        return n
    else:
        a = 0
        b = 0
        c = 0
        a + (2*b) + (3*c)

        

 

experiment Start: 1 : Student 1023
experiment Start: 1 : Student 1023, Attempt 1
experiment Information: 4 : Student 1023, Fixed Attempt 1
experiment Start: 1 : Student 1022
experiment Start: 1 : Student 1022, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    def helper(a):
        if a <= 3:
            return G(n)
        else:
            if a == n:
                return g(1)
            else:
                return mul((G(n-a) + (a+1)), g(n-1))
    return helper(n)

 

experiment Start: 1 : Student 1022, Attempt 2
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    def helper(a):
        if a <= 3:
            return g(n)
        else:
            if a == n:
                return g(1)
            else:
                return mul((g(n-a) + (a+1)), g(n-1))
    return helper(n)

 

experiment Start: 1 : Student 1022, Attempt 3
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    def helper(a):
        if a <= 3:
            return g(a)
        else:
            if a == n:
                return g(1)
            else:
                return mul((g(n-a) + (a+1)), g(n-1))
    return helper(n)

 

experiment Start: 1 : Student 1022, Attempt 4
experiment Information: 4 : Student 1022, Fixed Attempt 4
experiment Start: 1 : Student 1021
experiment Start: 1 : Student 1021, Attempt 1
experiment Error: 0 : def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    sum = 0
    values = [1,2,3]
    if n <= 3:
        return values [n-1]
    while n>3:
        sum = values[-1] + 2 * values[-2] + 3 * values[-3]
        values = [values[-2], values [-1], sum]
        n = n-1
    return sum


experiment Start: 1 : Student 1021, Attempt 2
experiment Error: 0 : def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    sum = 0
    values = [1,2,3]
    if n <= 3:
        return values [n-1]
    if n>3:
        sum = values[-1] + 2 * values[-2] + 3 * values[-3]
        values = [values[-2], values [-1], sum]
        n = n-1
    return sum


experiment Start: 1 : Student 1021, Attempt 3
experiment Error: 0 : def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    sum = 0
    values = [1,2,3]
    if n <= 3:
        return values[n-1]
    if n>3:
        sum = values[-1] + 2 * values[-2] + 3 * values[-3]
        values = [values[-2], values [-1], sum]
        n = n-1
    return sum


experiment Start: 1 : Student 1021, Attempt 4
experiment Error: 0 : def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    sum = 0
    values = [1,2,3]
    if n <= 3:
        return values[n-1]
    if n>3:
        sum = values[-1] + 2 * values[-2] + 3 * values[-3]
        values = [values[-2], values [-1], sum]
        n -= 1
    return sum


experiment Start: 1 : Student 1021, Attempt 5
experiment Error: 0 : def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    sum = 0
    values = [1,2,3]
    if n <= 3:
        return values[n-1]
    if n>3:
        sum = values[-1] + 2 * values[-2] + 3 * values[-3]
        values = [values[-2], values[-1], sum]
        n -= 1
    return sum


experiment Start: 1 : Student 1020
experiment Start: 1 : Student 1020, Attempt 1
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 1020, Attempt 2
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    G = G(n - 1) + 2*G(n -2) + 3*G(n - 3)

    if n > 3:
        return G

 

experiment Start: 1 : Student 1020, Attempt 3
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    return G(n - 1) + 2*G(n -2) + 3*G(n - 3)
   

 

experiment Start: 1 : Student 1020, Attempt 4
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    """G(n - 1) + 2*G(n -2) + 3*G(n - 3) = G(n)
    if n == 0:
        return 0
    elif n <= 3:
        return n
    else: 
        return G(n)"""

    G = G(n - 1) + 2*G(n -2) + 3*G(n - 3) 
    if n <= 3:
        return n
    elif n >= 3:
        return G

 

experiment Start: 1 : Student 1020, Attempt 5
experiment Information: 4 : Student 1020, Fixed Attempt 5
experiment Start: 1 : Student 1018
experiment Start: 1 : Student 1018, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n<=1:
        return n
    def num(a):
        if a==1:
            return answer
        else: 
            answer+=a*g(n-a)
            return num(a-1)
    return num(a=n)
        
    





 

experiment Start: 1 : Student 1018, Attempt 2
experiment Information: 4 : Student 1018, Fixed Attempt 2
experiment Start: 1 : Student 1009
experiment Start: 1 : Student 1009, Attempt 1
experiment Information: 4 : Student 1009, Fixed Attempt 1
experiment Start: 1 : Student 1008
experiment Start: 1 : Student 1008, Attempt 1
experiment Information: 4 : Student 1008, Fixed Attempt 1
experiment Start: 1 : Student 1004
experiment Start: 1 : Student 1004, Attempt 1
experiment Information: 4 : Student 1004, Fixed Attempt 1
experiment Start: 1 : Student 1003
experiment Start: 1 : Student 1003, Attempt 1
experiment Information: 4 : Student 1003, Fixed Attempt 1
experiment Start: 1 : Student 1001
experiment Start: 1 : Student 1001, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    step= 0
    for n in range (0, 3):
        return n
    while n > 3:
        step += 1
        total += step* g(n-1)
        return total

 

experiment Start: 1 : Student 1001, Attempt 2
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    step= 0
    i = n
    for i in range (0, 3):
        return i
    while n > 3:
        step += 1
        total += step* g(n-1)
        return total

 

experiment Start: 1 : Student 1001, Attempt 3
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    step= 0
    i = n
    if n <=3:
        return i
    while n > 3:
        step += 1
        total += step* g(n-1)
        return total

 

experiment Start: 1 : Student 1001, Attempt 4
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    step= 0
    i = n
    if n <=3:
        return i
    while n > 3:
        step += 1
        total += step*G(n-1)
        return total

 

experiment Start: 1 : Student 1001, Attempt 5
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    step= 0
    total = 0
    
    i = n
    if n <=3:
        return i
    while n > 3:
        step += 1
        total += step*G(n-1)
        return total

 

experiment Start: 1 : Student 1001, Attempt 6
experiment Information: 4 : Student 1001, Fixed Attempt 6
experiment Start: 1 : Student 1000
experiment Start: 1 : Student 1000, Attempt 1
experiment Information: 4 : Student 1000, Fixed Attempt 1
experiment Start: 1 : Student 999
experiment Start: 1 : Student 999, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if i <= n:
        return g(n-1) 


 

experiment Start: 1 : Student 999, Attempt 2
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    i = 1
    if i <= n:
        i + 1
    return g(i)


 

experiment Start: 1 : Student 999, Attempt 3
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    i = 1
    if i <= n:
        return g(i+1)


 

experiment Start: 1 : Student 999, Attempt 4
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    i = 1
    if i <= n:
        return g(i+1)
    return g(i)


 

experiment Start: 1 : Student 999, Attempt 5
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    i = 1
    if i <= n:
        return g(i+1)
    return i


 

experiment Start: 1 : Student 999, Attempt 6
experiment Information: 4 : Student 999, Fixed Attempt 6
experiment Start: 1 : Student 998
experiment Start: 1 : Student 998, Attempt 1
experiment Information: 4 : Student 998, Fixed Attempt 1
experiment Start: 1 : Student 995
experiment Start: 1 : Student 995, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    def helper(i, n):
        if i <= 3:
            return i 
        else:
            return g(n-1) + 2 * g(n-2) + 3 * g(n-3)


 

experiment Start: 1 : Student 995, Attempt 2
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    def helper(i):
        i = n 
        if i <= 3:
            return i 
        else:
            return g(i-1) + 2 * g(i-2) + 3 * g(i-3)

    return helper(n, n) 


 

experiment Start: 1 : Student 995, Attempt 3
experiment Information: 4 : Student 995, Fixed Attempt 3
experiment Start: 1 : Student 987
experiment Start: 1 : Student 987, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    if n > 0:
        return g(n) + g(n-1)

 

experiment Start: 1 : Student 987, Attempt 2
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    while n > 0:
        return g(n) + g(n-1)

 

experiment Start: 1 : Student 987, Attempt 3
experiment Information: 4 : Student 987, Fixed Attempt 3
experiment Start: 1 : Student 986
experiment Start: 1 : Student 986, Attempt 1
experiment Information: 4 : Student 986, Fixed Attempt 1
experiment Start: 1 : Student 985
experiment Start: 1 : Student 985, Attempt 1
experiment Information: 4 : Student 985, Fixed Attempt 1
experiment Start: 1 : Student 984
experiment Start: 1 : Student 984, Attempt 1
experiment Information: 4 : Student 984, Fixed Attempt 1
experiment Start: 1 : Student 981
experiment Start: 1 : Student 981, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"

    def g_helper(x):
        if(x==n):
            return 1
        return x*g(n-x)
    if(x==1):
        return g(1)
    if(x==2):
        return g(2)
    if(x==3):
        return g(3)
    return g_helper(1)

 

experiment Start: 1 : Student 981, Attempt 2
experiment Information: 4 : Student 981, Fixed Attempt 2
experiment Start: 1 : Student 980
experiment Start: 1 : Student 980, Attempt 1
experiment Information: 4 : Student 980, Fixed Attempt 1
experiment Start: 1 : Student 975
experiment Start: 1 : Student 975, Attempt 1
experiment Information: 4 : Student 975, Fixed Attempt 1
experiment Start: 1 : Student 964
experiment Start: 1 : Student 964, Attempt 1
experiment Information: 4 : Student 964, Fixed Attempt 1
experiment Start: 1 : Student 962
experiment Start: 1 : Student 962, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    def G(n):
        if n <= 3:
            return n
        else:
            return (G(n-1)+2)*(G(n-2)+3)*G(n-3)
    return G(n) + g(n-1)


 

experiment Start: 1 : Student 962, Attempt 2
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    def G(n):
        if n <= 3:
            return n
        else:
            return (G(n-1)+2)*(G(n-2)+3)*G(n-3)
    G(n)
    return G(n) + g(n-1)


 

experiment Start: 1 : Student 962, Attempt 3
experiment Information: 4 : Student 962, Fixed Attempt 3
experiment Start: 1 : Student 961
experiment Start: 1 : Student 961, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    v = 0
    s = 1
    if n <= 3:
        return n
    while n > 3:
        n -= n
        v = v + s*g(n)
        s += s
        return v

 

experiment Start: 1 : Student 959
experiment Start: 1 : Student 959, Attempt 1
experiment Information: 4 : Student 959, Fixed Attempt 1
experiment Start: 1 : Student 958
experiment Start: 1 : Student 958, Attempt 1
experiment Information: 4 : Student 958, Fixed Attempt 1
experiment Start: 1 : Student 953
experiment Start: 1 : Student 953, Attempt 1
experiment Information: 4 : Student 953, Fixed Attempt 1
experiment Start: 1 : Student 950
experiment Start: 1 : Student 950, Attempt 1
experiment Information: 4 : Student 950, Fixed Attempt 1
experiment Start: 1 : Student 949
experiment Start: 1 : Student 949, Attempt 1
experiment Information: 4 : Student 949, Fixed Attempt 1
experiment Start: 1 : Student 948
experiment Start: 1 : Student 948, Attempt 1
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 947
experiment Start: 1 : Student 947, Attempt 1
experiment Information: 4 : Student 947, Fixed Attempt 1
experiment Start: 1 : Student 945
experiment Start: 1 : Student 945, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n > 4:
        return n
    else:
        return g(n-1) + 2*g(n-2) + 3*g(n-3)

 

experiment Start: 1 : Student 937
experiment Start: 1 : Student 937, Attempt 1
experiment Information: 4 : Student 937, Fixed Attempt 1
experiment Start: 1 : Student 934
experiment Start: 1 : Student 934, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    if n<=3:
        return n
    else:
        G(n-1) + 2*G(n-2) + 3*G(n-3)


 

experiment Start: 1 : Student 934, Attempt 2
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    if n<=3:
        return n
    else:
        g(n-1) + 2*g(n-2) + 3*g(n-3)


 

experiment Start: 1 : Student 933
experiment Start: 1 : Student 933, Attempt 1
experiment Information: 4 : Student 933, Fixed Attempt 1
experiment Start: 1 : Student 931
experiment Start: 1 : Student 931, Attempt 1
experiment Information: 4 : Student 931, Fixed Attempt 1
experiment Start: 1 : Student 929
experiment Start: 1 : Student 929, Attempt 1
experiment Information: 4 : Student 929, Fixed Attempt 1
experiment Start: 1 : Student 923
experiment Start: 1 : Student 923, Attempt 1
experiment Information: 4 : Student 923, Fixed Attempt 1
experiment Start: 1 : Student 922
experiment Start: 1 : Student 922, Attempt 1
experiment Information: 4 : Student 922, Fixed Attempt 1
experiment Start: 1 : Student 919
experiment Start: 1 : Student 919, Attempt 1
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 917
experiment Start: 1 : Student 917, Attempt 1
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 917, Attempt 2
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 916
experiment Start: 1 : Student 916, Attempt 1
experiment Information: 4 : Student 916, Fixed Attempt 1
experiment Start: 1 : Student 909
experiment Start: 1 : Student 909, Attempt 1
experiment Information: 4 : Student 909, Fixed Attempt 1
experiment Start: 1 : Student 908
experiment Start: 1 : Student 908, Attempt 1
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 906
experiment Start: 1 : Student 906, Attempt 1
experiment Information: 4 : Student 906, Fixed Attempt 1
experiment Start: 1 : Student 905
experiment Start: 1 : Student 905, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3:
        return g(n)
    else:
        return g(n-1)

 

experiment Start: 1 : Student 903
experiment Start: 1 : Student 903, Attempt 1
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 903, Attempt 2
experiment Information: 4 : Student 903, Fixed Attempt 2
experiment Start: 1 : Student 902
experiment Start: 1 : Student 902, Attempt 1
experiment Information: 4 : Student 902, Fixed Attempt 1
experiment Start: 1 : Student 898
experiment Start: 1 : Student 898, Attempt 1
experiment Information: 4 : Student 898, Fixed Attempt 1
experiment Start: 1 : Student 895
experiment Start: 1 : Student 895, Attempt 1
experiment Information: 4 : Student 895, Fixed Attempt 1
experiment Start: 1 : Student 893
experiment Start: 1 : Student 893, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    #if n <= 3:
     #   return n
    #else: 
     #   while n <= n:
      #      return factorial(n) + 
    if n <= 3:
        return n
    else:
        total, k = 1, 2
        while k <= n:
            total = total * (factorial(n) + k), k + 1
        return total 

 

experiment Start: 1 : Student 893, Attempt 2
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    #if n <= 3:
     #   return n
    #else: 
     #   while n <= n:
      #      return factorial(n) + 
    if n <= 3:
        return n
    else:
        total, k = 1, 2
        while k < n:
            total = total * (factorial(n) + k), k + 1
        return total 

 

experiment Start: 1 : Student 893, Attempt 3
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    #if n <= 3:
     #   return n
    #else: 
     #   while n <= n:
      #      return factorial(n) + 
    if n <= 3:
        return n
    else:
        total, k = 1, 2
        while k < n:
            total = total * (factorial(g(n)) + k), k + 1
        return total 

 

experiment Start: 1 : Student 893, Attempt 4
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    #if n <= 3:
     #   return n
    #else: 
     #   while n <= n:
      #      return factorial(n) + 
    if n <= 3:
        return n
    else:
        total, k = 1, 2
        while k <= n:
            total = total * (factorial(g(n)) + k), k + 1
        return total 

 

experiment Start: 1 : Student 893, Attempt 5
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    #if n <= 3:
     #   return n
    #else: 
     #   while n <= n:
      #      return factorial(n) + 
    if n <= 3:
        return n
    else:
        total, k = 1, 2
        while k <= n:
            total = total * (g(n-1) + k), k + 1
        return total 

 

experiment Start: 1 : Student 893, Attempt 6
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    #if n <= 3:
     #   return n
    #else: 
     #   while n <= n:
      #      return factorial(n) + 
    if n <= 3:
        return n
    else:
        total, k = 1, 2
        while k <= n:
            total = total * g(n-1) + k, k + 1
        return total 

 

experiment Start: 1 : Student 890
experiment Start: 1 : Student 890, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    return lambda n: n

 

experiment Start: 1 : Student 890, Attempt 2
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    return 1

 

experiment Start: 1 : Student 890, Attempt 3
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    return lambda n: n

 

experiment Start: 1 : Student 890, Attempt 4
experiment Error: 0 : def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    return n if n<= 3 else g(n -1) + 2


experiment Start: 1 : Student 889
experiment Start: 1 : Student 889, Attempt 1
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 884
experiment Start: 1 : Student 884, Attempt 1
experiment Information: 4 : Student 884, Fixed Attempt 1
experiment Start: 1 : Student 876
experiment Start: 1 : Student 876, Attempt 1
experiment Information: 4 : Student 876, Fixed Attempt 1
experiment Start: 1 : Student 875
experiment Start: 1 : Student 875, Attempt 1
experiment Information: 4 : Student 875, Fixed Attempt 1
experiment Start: 1 : Student 870
experiment Start: 1 : Student 870, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """

    if n <= 3:
        return n
    else:
        n = g(n - 1) + n

 

experiment Start: 1 : Student 870, Attempt 2
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """

    if n <= 3:
        return n
    else:
        n += g(n - 1)

 

experiment Start: 1 : Student 870, Attempt 3
experiment Information: 4 : Student 870, Fixed Attempt 3
experiment Start: 1 : Student 869
experiment Start: 1 : Student 869, Attempt 1
experiment Information: 4 : Student 869, Fixed Attempt 1
experiment Start: 1 : Student 867
experiment Start: 1 : Student 867, Attempt 1
experiment Information: 4 : Student 867, Fixed Attempt 1
experiment Start: 1 : Student 866
experiment Start: 1 : Student 866, Attempt 1
experiment Information: 4 : Student 866, Fixed Attempt 1
experiment Start: 1 : Student 863
experiment Start: 1 : Student 863, Attempt 1
experiment Information: 4 : Student 863, Fixed Attempt 1
experiment Start: 1 : Student 861
experiment Start: 1 : Student 861, Attempt 1
experiment Information: 4 : Student 861, Fixed Attempt 1
experiment Start: 1 : Student 859
experiment Start: 1 : Student 859, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <=3:
        return n
    else:
        g(n-1) + 2 * g(n-2) + 3 * g(n-3)

 

experiment Start: 1 : Student 859, Attempt 2
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <=3:
        return n
    else:
        g(n-1) * g(n-2) * g(n-3)

 

experiment Start: 1 : Student 859, Attempt 3
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n == 0:
        return
    elif n <= 3:
        return n
    else:
        g(n-1) * g(n-2) * g(n-3)

 

experiment Start: 1 : Student 859, Attempt 4
experiment Error: 0 : def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n == 0:
        return
    elif n <= 3 and n > 0:
        return n
    else:
        g(n-1) * g(n-2) * g(n-3)


experiment Start: 1 : Student 859, Attempt 5
experiment Error: 0 : def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n == 0:
        return
    elif n <= 3 and n > 0:
        return n
    else:
        g(n-1) + 2*g(n-2) + 3*g(n-3)


experiment Start: 1 : Student 859, Attempt 6
experiment Error: 0 : def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n == 0:
        return
    elif n <= 3 and n > 0:
        return n
    else:
        return g(n-1) + 2*g(n-2) + g(n-3)


experiment Start: 1 : Student 857
experiment Start: 1 : Student 857, Attempt 1
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 857, Attempt 2
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3:
    	return n
    else:
    	G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)
    



 

experiment Start: 1 : Student 857, Attempt 3
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3:
    	return n
    else:
    	g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)




 

experiment Start: 1 : Student 854
experiment Start: 1 : Student 854, Attempt 1
experiment Information: 4 : Student 854, Fixed Attempt 1
experiment Start: 1 : Student 852
experiment Start: 1 : Student 852, Attempt 1
experiment Information: 4 : Student 852, Fixed Attempt 1
experiment Start: 1 : Student 850
experiment Start: 1 : Student 850, Attempt 1
experiment Information: 4 : Student 850, Fixed Attempt 1
experiment Start: 1 : Student 844
experiment Start: 1 : Student 844, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    return identity(n)

 

experiment Start: 1 : Student 844, Attempt 2
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3:
        return n
    else:
        a = b
        b = c
        c = ((a * 3) + (b + 2) + c)
        return c

 

experiment Start: 1 : Student 844, Attempt 3
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    a = b
    b = c
    c = ((a * 3) + (b + 2) + c)
    if n <= 3:
        return n
    else: 
        return c

 

experiment Start: 1 : Student 844, Attempt 4
experiment Information: 4 : Student 844, Fixed Attempt 4
experiment Start: 1 : Student 843
experiment Start: 1 : Student 843, Attempt 1
experiment Information: 4 : Student 843, Fixed Attempt 1
experiment Start: 1 : Student 841
experiment Start: 1 : Student 841, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n<=3:
        return n  
    else:
        n-1
        g(n)*n 

 

experiment Start: 1 : Student 841, Attempt 2
experiment Information: 4 : Student 841, Fixed Attempt 2
experiment Start: 1 : Student 839
experiment Start: 1 : Student 839, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    k = 1
    if  n == 0:
        return 1
    else:
        return g(n - 1) + (k + 1) * g(n - 2)
        k += 1
        n -= 1


 

experiment Start: 1 : Student 839, Attempt 2
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 838
experiment Start: 1 : Student 838, Attempt 1
experiment Information: 4 : Student 838, Fixed Attempt 1
experiment Start: 1 : Student 833
experiment Start: 1 : Student 833, Attempt 1
experiment Error: 0 : def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    return n if n<=3 else g(n)+n*g(n-1)


experiment Start: 1 : Student 833, Attempt 2
experiment Error: 0 : def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    return n if n<=3 else n+n*g(n-1)


experiment Start: 1 : Student 833, Attempt 3
experiment Information: 4 : Student 833, Fixed Attempt 3
experiment Start: 1 : Student 825
experiment Start: 1 : Student 825, Attempt 1
experiment Information: 4 : Student 825, Fixed Attempt 1
experiment Start: 1 : Student 822
experiment Start: 1 : Student 822, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    x = 0
    if x == n:
        return g(n)
    g(x+1)

 

experiment Start: 1 : Student 822, Attempt 2
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """

    if n == 0:
        return g(n)
    g(n-1)
    return g(n)

 

experiment Start: 1 : Student 822, Attempt 3
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """

    if n <=3:
        return n
    else: 
        (g(n-1)+2)*(g(n-2)+3)*(g(n-3))

 

experiment Start: 1 : Student 822, Attempt 4
experiment Information: 4 : Student 822, Fixed Attempt 4
experiment Start: 1 : Student 821
experiment Start: 1 : Student 821, Attempt 1
experiment Information: 4 : Student 821, Fixed Attempt 1
experiment Start: 1 : Student 820
experiment Start: 1 : Student 820, Attempt 1
experiment Information: 4 : Student 820, Fixed Attempt 1
experiment Start: 1 : Student 816
experiment Start: 1 : Student 816, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3:
        return n
    for x in range(1,n+1):
        if n<= 3:
            return n
        else:
            x*g(n-x)

 

experiment Start: 1 : Student 816, Attempt 2
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    total = 0
    if n <= 3:
        return n
    for x in range(n+1):
        if x <= 3:
            total += x
        else:
            x*g(n-x)

 

experiment Start: 1 : Student 816, Attempt 3
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3:
        return n
    else: 
        g(n-1) + 2 * g(n-2) + 3 * g(n-3)

 

experiment Start: 1 : Student 816, Attempt 4
experiment Error: 0 : def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3 and n > 0:
        return n
    else: 
        g(n-1) + 2 * g(n-2) + 3 * g(n-3)


experiment Start: 1 : Student 816, Attempt 5
experiment Error: 0 : def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3 and n > 0:
        return n + (n-1)
    else: 
        g(n-1) + 2 * g(n-2) + 3 * g(n-3)


experiment Start: 1 : Student 815
experiment Start: 1 : Student 815, Attempt 1
experiment Information: 4 : Student 815, Fixed Attempt 1
experiment Start: 1 : Student 813
experiment Start: 1 : Student 813, Attempt 1
experiment Information: 4 : Student 813, Fixed Attempt 1
experiment Start: 1 : Student 811
experiment Start: 1 : Student 811, Attempt 1
experiment Information: 4 : Student 811, Fixed Attempt 1
experiment Start: 1 : Student 808
experiment Start: 1 : Student 808, Attempt 1
experiment Information: 4 : Student 808, Fixed Attempt 1
experiment Start: 1 : Student 802
experiment Start: 1 : Student 802, Attempt 1
experiment Information: 4 : Student 802, Fixed Attempt 1
experiment Start: 1 : Student 800
experiment Start: 1 : Student 800, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n < 3:
        return n
    elif n > 3:
        return G(n-1) + 2*G(n-2) + 3*G(n-3)



 

experiment Start: 1 : Student 800, Attempt 2
experiment Information: 4 : Student 800, Fixed Attempt 2
experiment Start: 1 : Student 797
experiment Start: 1 : Student 797, Attempt 1
experiment Information: 4 : Student 797, Fixed Attempt 1
experiment Start: 1 : Student 795
experiment Start: 1 : Student 795, Attempt 1
experiment Information: 4 : Student 795, Fixed Attempt 1
experiment Start: 1 : Student 792
experiment Start: 1 : Student 792, Attempt 1
experiment Information: 4 : Student 792, Fixed Attempt 1
experiment Start: 1 : Student 791
experiment Start: 1 : Student 791, Attempt 1
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 791, Attempt 2
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"

    if n == 1:
        return n
    else:
        return g(n)
 

experiment Start: 1 : Student 791, Attempt 3
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"

    if n < 3:
        return n
    else:
        return g(n)
 

experiment Start: 1 : Student 791, Attempt 4
experiment Information: 4 : Student 791, Fixed Attempt 4
experiment Start: 1 : Student 789
experiment Start: 1 : Student 789, Attempt 1
experiment Information: 4 : Student 789, Fixed Attempt 1
experiment Start: 1 : Student 788
experiment Start: 1 : Student 788, Attempt 1
experiment Information: 4 : Student 788, Fixed Attempt 1
experiment Start: 1 : Student 787
experiment Start: 1 : Student 787, Attempt 1
experiment Information: 4 : Student 787, Fixed Attempt 1
experiment Start: 1 : Student 786
experiment Start: 1 : Student 786, Attempt 1
experiment Information: 4 : Student 786, Fixed Attempt 1
experiment Start: 1 : Student 784
experiment Start: 1 : Student 784, Attempt 1
experiment Information: 4 : Student 784, Fixed Attempt 1
experiment Start: 1 : Student 783
experiment Start: 1 : Student 783, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n == 1:
        return n
    else:
        return g(n-1)


 

experiment Start: 1 : Student 783, Attempt 2
experiment Information: 4 : Student 783, Fixed Attempt 2
experiment Start: 1 : Student 782
experiment Start: 1 : Student 782, Attempt 1
experiment Information: 4 : Student 782, Fixed Attempt 1
experiment Start: 1 : Student 781
experiment Start: 1 : Student 781, Attempt 1
experiment Information: 4 : Student 781, Fixed Attempt 1
experiment Start: 1 : Student 779
experiment Start: 1 : Student 779, Attempt 1
experiment Information: 4 : Student 779, Fixed Attempt 1
experiment Start: 1 : Student 778
experiment Start: 1 : Student 778, Attempt 1
experiment Information: 4 : Student 778, Fixed Attempt 1
experiment Start: 1 : Student 776
experiment Start: 1 : Student 776, Attempt 1
experiment Information: 4 : Student 776, Fixed Attempt 1
experiment Start: 1 : Student 773
experiment Start: 1 : Student 773, Attempt 1
experiment Information: 4 : Student 773, Fixed Attempt 1
experiment Start: 1 : Student 762
experiment Start: 1 : Student 762, Attempt 1
experiment Information: 4 : Student 762, Fixed Attempt 1
experiment Start: 1 : Student 756
experiment Start: 1 : Student 756, Attempt 1
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 756, Attempt 2
experiment Information: 4 : Student 756, Fixed Attempt 2
experiment Start: 1 : Student 753
experiment Start: 1 : Student 753, Attempt 1
experiment Information: 4 : Student 753, Fixed Attempt 1
experiment Start: 1 : Student 745
experiment Start: 1 : Student 745, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)

 

experiment Start: 1 : Student 745, Attempt 2
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)

 

experiment Start: 1 : Student 740
experiment Start: 1 : Student 740, Attempt 1
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 740, Attempt 2
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 740, Attempt 3
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 740, Attempt 4
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 740, Attempt 5
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 740, Attempt 6
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 740, Attempt 7
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 740, Attempt 8
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 740, Attempt 9
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 740, Attempt 10
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 740, Attempt 11
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 740, Attempt 12
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 740, Attempt 13
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 740, Attempt 14
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 740, Attempt 15
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 736
experiment Start: 1 : Student 736, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3:
        return n
    else:
        print (n)
        G(n-1)*n

 

experiment Start: 1 : Student 736, Attempt 2
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3:
        return n
    else:
        print (G)
        G(n-1)*n

 

experiment Start: 1 : Student 736, Attempt 3
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3:
        return n
    else:
        print
        G(n-1) + (n+1)

 

experiment Start: 1 : Student 736, Attempt 4
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3:
        return n
    else:
        print
        g(n-1) + (n+1)

 

experiment Start: 1 : Student 736, Attempt 5
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3:
        return n
    else:
        print (n)
        g(n-1) + (n+1)

 

experiment Start: 1 : Student 736, Attempt 6
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3:
        return n
    else:
        print(n)
        g(n-1) + (n+1)

 

experiment Start: 1 : Student 736, Attempt 7
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3:
        return n
    else:
        print(n)
        (g(n-1) + (n+1))*n

 

experiment Start: 1 : Student 736, Attempt 8
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3:
        return n
    else:
        print(n)
        g(n-1) + (n+1)

 

experiment Start: 1 : Student 736, Attempt 9
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3:
        return n
    else:
        print(n)
        g(n+1) + (n-1)

 

experiment Start: 1 : Student 736, Attempt 10
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3:
        return n
    else:
        print(n)
        g(n-1) + (n-1)

 

experiment Start: 1 : Student 736, Attempt 11
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3:
        return n
    else:
        print(n)
        g(n-1) + n

 

experiment Start: 1 : Student 736, Attempt 12
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3:
        return n
    else:
        
        g(n-1) + n

 

experiment Start: 1 : Student 736, Attempt 13
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3:
        return n
    else:
        print(n)
        g(n+1) + n

 

experiment Start: 1 : Student 736, Attempt 14
experiment Information: 4 : Student 736, Fixed Attempt 14
experiment Start: 1 : Student 732
experiment Start: 1 : Student 732, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    def track(i):
        if n <= 3:
            return n
        else:
            return i*g(n-i) + (i-1)*g(n-i-1)
    return trakc(1)

 

experiment Start: 1 : Student 732, Attempt 2
experiment Information: 4 : Student 732, Fixed Attempt 2
experiment Start: 1 : Student 727
experiment Start: 1 : Student 727, Attempt 1
experiment Error: 0 : def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3:
        return n
    elif n % 3 == 1:
        return 3 * g(n-1)
    elif n % 3 == 2:
        return 2 * g(n-1)
    else:
        return g(n-1)


experiment Start: 1 : Student 727, Attempt 2
experiment Error: 0 : def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n == 0:
        return
    if n <= 3:
        return g(n-1)
    elif n % 3 == 1:
        return 3 * g(n-1)
    elif n % 3 == 2:
        return 2 * g(n-1)
    else:
        return g(n-1)


experiment Start: 1 : Student 727, Attempt 3
experiment Error: 0 : def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n == 0:
        return 1
    if n <= 3:
        return n * g(n-1)
    elif n % 3 == 1:
        return 3 * g(n-1)
    elif n % 3 == 2:
        return 2 * g(n-1)
    else:
        return g(n-1)


experiment Start: 1 : Student 727, Attempt 4
experiment Error: 0 : def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n == 0:
        return 0
    elif n <= 3:
        return n + g(n-1)
    elif n % 3 == 1:
        return 3 * n + g(n-1)
    elif n % 3 == 2:
        return 2 * n + g(n-1)
    else:
        return g(n-1)


experiment Start: 1 : Student 727, Attempt 5
experiment Information: 4 : Student 727, Fixed Attempt 5
experiment Start: 1 : Student 726
experiment Start: 1 : Student 726, Attempt 1
experiment Information: 4 : Student 726, Fixed Attempt 1
experiment Start: 1 : Student 725
experiment Start: 1 : Student 725, Attempt 1
experiment Information: 4 : Student 725, Fixed Attempt 1
experiment Start: 1 : Student 724
experiment Start: 1 : Student 724, Attempt 1
experiment Information: 4 : Student 724, Fixed Attempt 1
experiment Start: 1 : Student 722
experiment Start: 1 : Student 722, Attempt 1
experiment Error: 0 : def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3:
        return n
    counter = 1
    total = 0
    def incorporate_counter(n, counter):
            total = counter*g(n-counter)
            counter += 1
            return total + g(n-1)
    if n > 3 and counter <= n-3:
        return incorporate_counter(n, counter)


experiment Start: 1 : Student 722, Attempt 2
experiment Error: 0 : def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    counter = 1
    total = 0
    def incorporate_counter(n, counter):
        if n <= 3 or n > 3 and counter >= n-3:
            return total + n
        total += counter*g(n-counter)
        counter += 1
        if n>3:
            return total + incorporate_counter(n, counter)
    return incorporate_counter(n, counter)


experiment Start: 1 : Student 722, Attempt 3
experiment Error: 0 : def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    counter = 1
    total = 0
    def incorporate_variables(n, counter, total):
        if n <= 3 or n > 3 and counter >= n-3:
            return total + n
        total += counter*g(n-counter)
        counter += 1
        if n>3:
            return total + incorporate_variables(n, counter, total)
    return incorporate_variables(n, counter, total)


experiment Start: 1 : Student 722, Attempt 4
experiment Error: 0 : def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    counter = 1
    total = 0
    def incorporate_variables(n, counter, total):
        if n <= 3 or n > 3 and counter >= n-3:
            return total + n
        total += counter*g(n-counter)
        counter += 1
        if n>3:
            return total + incorporate_variables(n-1, counter, total)
    return incorporate_variables(n, counter, total)


experiment Start: 1 : Student 722, Attempt 5
experiment Error: 0 : def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    counter = 1
    total = 0
    k = n
    def incorporate_variables(n, counter, total, k):
        if n <= 3 or n > 3 and counter >= k-3:
            return total + n
        total += counter*g(n-counter)
        counter += 1
        if n>3:
            return total + incorporate_variables(n-1, counter, total, k)
    return incorporate_variables(n, counter, total)


experiment Start: 1 : Student 722, Attempt 6
experiment Error: 0 : def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    counter = 1
    total = 0
    k = n
    def incorporate_variables(n, counter, total, k):
        if n <= 3 or n > 3 and counter >= k-3:
            return total + n
        total += counter*g(n-counter)
        counter += 1
        if n>3:
            return total + incorporate_variables(n-1, counter, total, k)
    return incorporate_variables(n, counter, total, k)


experiment Start: 1 : Student 722, Attempt 7
experiment Error: 0 : def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    counter = 1
    total = 0
    k = n
    def incorporate_variables(n, counter, total, k):
        if n <= 3 or n > 3 and counter >= n-3:
            return total + k
        total += counter*g(k-counter)
        counter += 1
        if n>3:
            return total + incorporate_variables(n, counter, total, k-1)
    return incorporate_variables(n, counter, total, k)


experiment Start: 1 : Student 722, Attempt 8
experiment Error: 0 : def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    counter = 1
    total = 0
    k = n
    def incorporate_variables(n, counter, total, k):
        if n <= 3 or n > 3 and counter > n-3:
            return total + k
        total += counter*g(k-counter)
        counter += 1
        if n>3:
            return total + incorporate_variables(n, counter, total, k-1)
    return incorporate_variables(n, counter, total, k)


experiment Start: 1 : Student 722, Attempt 9
experiment Error: 0 : def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    counter = 1
    total = 0
    k = n
    def incorporate_variables(n, counter, total, k):
        if k <= 3 or n > 3 and counter > n-3:
            return total + k
        total += counter*g(k-counter)
        counter += 1
        if n>3:
            return total + incorporate_variables(n, counter, total, k-1)
    return incorporate_variables(n, counter, total, k)


experiment Start: 1 : Student 722, Attempt 10
experiment Information: 4 : Student 722, Fixed Attempt 10
experiment Start: 1 : Student 721
experiment Start: 1 : Student 721, Attempt 1
experiment Information: 4 : Student 721, Fixed Attempt 1
experiment Start: 1 : Student 718
experiment Start: 1 : Student 718, Attempt 1
experiment Information: 4 : Student 718, Fixed Attempt 1
experiment Start: 1 : Student 717
experiment Start: 1 : Student 717, Attempt 1
experiment Information: 4 : Student 717, Fixed Attempt 1
experiment Start: 1 : Student 716
experiment Start: 1 : Student 716, Attempt 1
experiment Information: 4 : Student 716, Fixed Attempt 1
experiment Start: 1 : Student 712
experiment Start: 1 : Student 712, Attempt 1
experiment Information: 4 : Student 712, Fixed Attempt 1
experiment Start: 1 : Student 711
experiment Start: 1 : Student 711, Attempt 1
experiment Information: 4 : Student 711, Fixed Attempt 1
experiment Start: 1 : Student 701
experiment Start: 1 : Student 701, Attempt 1
experiment Information: 4 : Student 701, Fixed Attempt 1
experiment Start: 1 : Student 696
experiment Start: 1 : Student 696, Attempt 1
experiment Information: 4 : Student 696, Fixed Attempt 1
experiment Start: 1 : Student 695
experiment Start: 1 : Student 695, Attempt 1
experiment Information: 4 : Student 695, Fixed Attempt 1
experiment Start: 1 : Student 694
experiment Start: 1 : Student 694, Attempt 1
experiment Information: 4 : Student 694, Fixed Attempt 1
experiment Start: 1 : Student 690
experiment Start: 1 : Student 690, Attempt 1
experiment Information: 4 : Student 690, Fixed Attempt 1
experiment Start: 1 : Student 688
experiment Start: 1 : Student 688, Attempt 1
experiment Information: 4 : Student 688, Fixed Attempt 1
experiment Start: 1 : Student 687
experiment Start: 1 : Student 687, Attempt 1
experiment Information: 4 : Student 687, Fixed Attempt 1
experiment Start: 1 : Student 679
experiment Start: 1 : Student 679, Attempt 1
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 677
experiment Start: 1 : Student 677, Attempt 1
experiment Information: 4 : Student 677, Fixed Attempt 1
experiment Start: 1 : Student 670
experiment Start: 1 : Student 670, Attempt 1
experiment Information: 4 : Student 670, Fixed Attempt 1
experiment Start: 1 : Student 669
experiment Start: 1 : Student 669, Attempt 1
experiment Information: 4 : Student 669, Fixed Attempt 1
experiment Start: 1 : Student 667
experiment Start: 1 : Student 667, Attempt 1
experiment Information: 4 : Student 667, Fixed Attempt 1
experiment Start: 1 : Student 660
experiment Start: 1 : Student 660, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    return n + g(n-1)

 

experiment Start: 1 : Student 660, Attempt 2
experiment Information: 4 : Student 660, Fixed Attempt 2
experiment Start: 1 : Student 659
experiment Start: 1 : Student 659, Attempt 1
experiment Information: 4 : Student 659, Fixed Attempt 1
experiment Start: 1 : Student 658
experiment Start: 1 : Student 658, Attempt 1
experiment Information: 4 : Student 658, Fixed Attempt 1
experiment Start: 1 : Student 656
experiment Start: 1 : Student 656, Attempt 1
experiment Information: 4 : Student 656, Fixed Attempt 1
experiment Start: 1 : Student 655
experiment Start: 1 : Student 655, Attempt 1
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 652
experiment Start: 1 : Student 652, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    def G(n):
        if n <= 3:
            return n
        else:
            return G(n-1)+2*(G(n-2))+3(G(n-3))
    return G



 

experiment Start: 1 : Student 652, Attempt 2
experiment Information: 4 : Student 652, Fixed Attempt 2
experiment Start: 1 : Student 651
experiment Start: 1 : Student 651, Attempt 1
experiment Information: 4 : Student 651, Fixed Attempt 1
experiment Start: 1 : Student 648
experiment Start: 1 : Student 648, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    counter += 1
    if n == 0:
        return 1
    elif n <= 3:
        return n
    else:
        return counter * g(n-1)

 

experiment Start: 1 : Student 648, Attempt 2
experiment Information: 4 : Student 648, Fixed Attempt 2
experiment Start: 1 : Student 644
experiment Start: 1 : Student 644, Attempt 1
experiment Information: 4 : Student 644, Fixed Attempt 1
experiment Start: 1 : Student 642
experiment Start: 1 : Student 642, Attempt 1
experiment Information: 4 : Student 642, Fixed Attempt 1
experiment Start: 1 : Student 641
experiment Start: 1 : Student 641, Attempt 1
experiment Information: 4 : Student 641, Fixed Attempt 1
experiment Start: 1 : Student 640
experiment Start: 1 : Student 640, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    if n <= 3:
        return n
    else:
        g(n-1) + 2*g(n-2) + 3*g(n-3)

 

experiment Start: 1 : Student 637
experiment Start: 1 : Student 637, Attempt 1
experiment Information: 4 : Student 637, Fixed Attempt 1
experiment Start: 1 : Student 636
experiment Start: 1 : Student 636, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    def G(n):
        if n<=3:
            return n
        if n>3:
            return G(n-1) + 2*G(n-2) + 3*G(n-3)
    return G

 

experiment Start: 1 : Student 636, Attempt 2
experiment Information: 4 : Student 636, Fixed Attempt 2
experiment Start: 1 : Student 629
experiment Start: 1 : Student 629, Attempt 1
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 629, Attempt 2
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n==(1 or 2 or 3):
        return n
    else: 
        return g(n-1)+2*g(n-2)+3*g(n-3)
 

experiment Start: 1 : Student 628
experiment Start: 1 : Student 628, Attempt 1
experiment Information: 4 : Student 628, Fixed Attempt 1
experiment Start: 1 : Student 627
experiment Start: 1 : Student 627, Attempt 1
experiment Error: 0 : def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    return n if n <=3 else n + g(n-1)


experiment Start: 1 : Student 627, Attempt 2
experiment Error: 0 : def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    return n if n <=3 else n + g(n+1)


experiment Start: 1 : Student 627, Attempt 3
experiment Error: 0 : def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    return n if n <=3 else n + g(n-1)


experiment Start: 1 : Student 627, Attempt 4
experiment Error: 0 : def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    return n if n <= 3 else lambda x: g(n-1) 


experiment Start: 1 : Student 627, Attempt 5
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3:
        return lambda x: x
    return lambda x: g(g(n-1) (x))
  
 

experiment Start: 1 : Student 627, Attempt 6
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3:
        return lambda x: n
    return lambda x: g(n-1) 
  
 

experiment Start: 1 : Student 627, Attempt 7
experiment Information: 4 : Student 627, Fixed Attempt 7
experiment Start: 1 : Student 620
experiment Start: 1 : Student 620, Attempt 1
experiment Information: 4 : Student 620, Fixed Attempt 1
experiment Start: 1 : Student 617
experiment Start: 1 : Student 617, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    def helper(n):
        total = 0
        if n == 3:
            return total + n
        else:
            total = helper(n-1) + (2 * helper(n-2)) + 3(helper(n-3))
    return helper

    """4 = 3 + 2(2) +
    5 = 10 + 2(3) + 3(2) = 22"""


 

experiment Start: 1 : Student 617, Attempt 2
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    def helper(n):
        total = 0
        if n == 3:
            return total + n
        else:
            total = helper(n-1) + (2 * helper(n-2)) + 3(helper(n-3))
    return helper(n)

    """4 = 3 + 2(2) +
    5 = 10 + 2(3) + 3(2) = 22"""


 

experiment Start: 1 : Student 617, Attempt 3
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    def helper(n):
        total = 0
        if n == 3:
            return total + n
        else:
            total = helper(n-1) + (2 * helper(n-2)) + 3(helper(n-3))
            n -= 1
    return helper(n)

    """4 = 3 + 2(2) +
    5 = 10 + 2(3) + 3(2) = 22"""


 

experiment Start: 1 : Student 617, Attempt 4
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    def helper(n):
        total = 0
        if n == 3:
            total += n
        else:
            total = helper(n-1) + (2 * helper(n-2)) + 3(helper(n-3))
        return total
    return helper(n)

    """4 = 3 + 2(2) +
    5 = 10 + 2(3) + 3(2) = 22"""


 

experiment Start: 1 : Student 617, Attempt 5
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    def helper(n):
        total = 0
        if n == 3:
            total += n
        else:
            total = helper(n-1) + (2 * helper(n-2)) + (3 * helper(n-3))
        return total
    return helper(n)

    """4 = 3 + 2(2) +
    5 = 10 + 2(3) + 3(2) = 22"""


 

experiment Start: 1 : Student 617, Attempt 6
experiment Information: 4 : Student 617, Fixed Attempt 6
experiment Start: 1 : Student 612
experiment Start: 1 : Student 612, Attempt 1
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 611
experiment Start: 1 : Student 611, Attempt 1
experiment Information: 4 : Student 611, Fixed Attempt 1
experiment Start: 1 : Student 607
experiment Start: 1 : Student 607, Attempt 1
experiment Information: 4 : Student 607, Fixed Attempt 1
experiment Start: 1 : Student 605
experiment Start: 1 : Student 605, Attempt 1
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 605, Attempt 2
experiment Information: 4 : Student 605, Fixed Attempt 2
experiment Start: 1 : Student 604
experiment Start: 1 : Student 604, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """

    x=1
    def gre3(n, x):
        if n<=3:
            return n
        x+1
        return gre3(n-1)+x*gre3(n-2)

 

experiment Start: 1 : Student 604, Attempt 2
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """

    x=1
    def gre3(n, x):
        if n<=3:
            return n
        x+1
        return gre3(n-1)+x*gre3(n-2)
    return gre3
 

experiment Start: 1 : Student 604, Attempt 3
experiment Information: 4 : Student 604, Fixed Attempt 3
experiment Start: 1 : Student 602
experiment Start: 1 : Student 602, Attempt 1
experiment Information: 4 : Student 602, Fixed Attempt 1
experiment Start: 1 : Student 595
experiment Start: 1 : Student 595, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3:
        return n
    if k < 3:
        counter(k)
    
    def counter(k):
        return g(k - 1) + 2*g(k-2) + 3*g(k-3)



 

experiment Start: 1 : Student 595, Attempt 2
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3:
        return n
    if n < 3:
        counter(n)
    
    def counter(k):
        return g(k - 1) + 2*g(k-2) + 3*g(k-3)



 

experiment Start: 1 : Student 595, Attempt 3
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3:
        return n
    if n > 3:
        counter(n)
    
    def counter(k):
        return g(k - 1) + 2*g(k-2) + 3*g(k-3)



 

experiment Start: 1 : Student 595, Attempt 4
experiment Information: 4 : Student 595, Fixed Attempt 4
experiment Start: 1 : Student 590
experiment Start: 1 : Student 590, Attempt 1
experiment Information: 4 : Student 590, Fixed Attempt 1
experiment Start: 1 : Student 589
experiment Start: 1 : Student 589, Attempt 1
experiment Information: 4 : Student 589, Fixed Attempt 1
experiment Start: 1 : Student 582
experiment Start: 1 : Student 582, Attempt 1
experiment Information: 4 : Student 582, Fixed Attempt 1
experiment Start: 1 : Student 577
experiment Start: 1 : Student 577, Attempt 1
experiment Information: 4 : Student 577, Fixed Attempt 1
experiment Start: 1 : Student 576
experiment Start: 1 : Student 576, Attempt 1
experiment Information: 4 : Student 576, Fixed Attempt 1
experiment Start: 1 : Student 567
experiment Start: 1 : Student 567, Attempt 1
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 567, Attempt 2
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    if n < 3:
        return n
    else:
        return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)

 

experiment Start: 1 : Student 567, Attempt 3
experiment Information: 4 : Student 567, Fixed Attempt 3
experiment Start: 1 : Student 565
experiment Start: 1 : Student 565, Attempt 1
experiment Information: 4 : Student 565, Fixed Attempt 1
experiment Start: 1 : Student 561
experiment Start: 1 : Student 561, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3:
        g = n
        return g

 

experiment Start: 1 : Student 561, Attempt 2
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3:
        g = n
        return g
    else:
        return g(n-1) + 2*g(n-2) + 3*g(n-3)


 

experiment Start: 1 : Student 561, Attempt 3
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3:
        g = n
        return g
    else:
        k=n
        return g(k-1) + 2*g(k-2) + 3*g(k-3)


 

experiment Start: 1 : Student 561, Attempt 4
experiment Information: 4 : Student 561, Fixed Attempt 4
experiment Start: 1 : Student 558
experiment Start: 1 : Student 558, Attempt 1
experiment Information: 4 : Student 558, Fixed Attempt 1
experiment Start: 1 : Student 554
experiment Start: 1 : Student 554, Attempt 1
experiment Information: 4 : Student 554, Fixed Attempt 1
experiment Start: 1 : Student 552
experiment Start: 1 : Student 552, Attempt 1
experiment Information: 4 : Student 552, Fixed Attempt 1
experiment Start: 1 : Student 551
experiment Start: 1 : Student 551, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    def G_helper(n, i):
        if n <= 3:
            return n
        if n > 3:
            if i == n:
                return
            else:
                return G_helper(n-1, n-1) + 2 * G_helper(n-2, n-1) + 3 * G_helper(n-3, n-1)
    return G_helper(n, n)


 

experiment Start: 1 : Student 550
experiment Start: 1 : Student 550, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    def g_recursive(n):
        if n == 0:
            return 0
        if n <= 3:
            return n
        else:
            return g_recursive(n - 1) + 2 * g_recursive(n - 2) + 3 * g_recursive(n - 3)

    

 

experiment Start: 1 : Student 550, Attempt 2
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    def g_recursive(n):
        if n == 0:
            return 0
        if n <= 3:
            return n
        else:
            return g_recursive(n - 1) + 2 * g_recursive(n - 2) + 3 * g_recursive(n - 3)
    return g_recursive

    

 

experiment Start: 1 : Student 550, Attempt 3
experiment Information: 4 : Student 550, Fixed Attempt 3
experiment Start: 1 : Student 549
experiment Start: 1 : Student 549, Attempt 1
experiment Information: 4 : Student 549, Fixed Attempt 1
experiment Start: 1 : Student 547
experiment Start: 1 : Student 547, Attempt 1
experiment Information: 4 : Student 547, Fixed Attempt 1
experiment Start: 1 : Student 542
experiment Start: 1 : Student 542, Attempt 1
experiment Information: 4 : Student 542, Fixed Attempt 1
experiment Start: 1 : Student 541
experiment Start: 1 : Student 541, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3:
        return n
    else:
        g(n-1) + 2*g(n-2) + 3*g(n-3)


 

experiment Start: 1 : Student 541, Attempt 2
experiment Information: 4 : Student 541, Fixed Attempt 2
experiment Start: 1 : Student 540
experiment Start: 1 : Student 540, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    if n <= 3:
        if n == 1:
            return n
        else:
            n + g(n-1)
    else:
        return g(n) + g(n-1)

 

experiment Start: 1 : Student 540, Attempt 2
experiment Information: 4 : Student 540, Fixed Attempt 2
experiment Start: 1 : Student 535
experiment Start: 1 : Student 535, Attempt 1
experiment Information: 4 : Student 535, Fixed Attempt 1
experiment Start: 1 : Student 523
experiment Start: 1 : Student 523, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    
    if n <=3:
        return n
    else:
        (G(n-1) + 2) + 2(G(n-1))
    

 

experiment Start: 1 : Student 523, Attempt 2
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    
    if n <=3:
        G = lambda n: n
        return G(n)
    
    

 

experiment Start: 1 : Student 523, Attempt 3
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    
    if n <=3:
        G = lambda n: n
        return G(n)
    if n > 3:
        G = lambda n: G(n-1)
    
    

 

experiment Start: 1 : Student 523, Attempt 4
experiment Information: 4 : Student 523, Fixed Attempt 4
experiment Start: 1 : Student 520
experiment Start: 1 : Student 520, Attempt 1
experiment Information: 4 : Student 520, Fixed Attempt 1
experiment Start: 1 : Student 519
experiment Start: 1 : Student 519, Attempt 1
experiment Information: 4 : Student 519, Fixed Attempt 1
experiment Start: 1 : Student 518
experiment Start: 1 : Student 518, Attempt 1
experiment Information: 4 : Student 518, Fixed Attempt 1
experiment Start: 1 : Student 510
experiment Start: 1 : Student 510, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    if n <= 3:
        return g(n)
    else:
        return g(n-1) + g(n-1)

 

experiment Start: 1 : Student 510, Attempt 2
experiment Information: 4 : Student 510, Fixed Attempt 2
experiment Start: 1 : Student 507
experiment Start: 1 : Student 507, Attempt 1
experiment Information: 4 : Student 507, Fixed Attempt 1
experiment Start: 1 : Student 506
experiment Start: 1 : Student 506, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    def G(n):
        if n <= 3:
            return n



 

experiment Start: 1 : Student 506, Attempt 2
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3:
        return n
    


 

experiment Start: 1 : Student 506, Attempt 3
experiment Information: 4 : Student 506, Fixed Attempt 3
experiment Start: 1 : Student 504
experiment Start: 1 : Student 504, Attempt 1
experiment Information: 4 : Student 504, Fixed Attempt 1
experiment Start: 1 : Student 502
experiment Start: 1 : Student 502, Attempt 1
experiment Information: 4 : Student 502, Fixed Attempt 1
experiment Start: 1 : Student 496
experiment Start: 1 : Student 496, Attempt 1
experiment Information: 4 : Student 496, Fixed Attempt 1
experiment Start: 1 : Student 494
experiment Start: 1 : Student 494, Attempt 1
experiment Information: 4 : Student 494, Fixed Attempt 1
experiment Start: 1 : Student 492
experiment Start: 1 : Student 492, Attempt 1
experiment Information: 4 : Student 492, Fixed Attempt 1
experiment Start: 1 : Student 490
experiment Start: 1 : Student 490, Attempt 1
experiment Information: 4 : Student 490, Fixed Attempt 1
experiment Start: 1 : Student 487
experiment Start: 1 : Student 487, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    def gHelp(count, total):
        if count==0:
            return total
        else:
            return gHelp(count-1, total+1)
    return gHelp(n, 0)
 

experiment Start: 1 : Student 487, Attempt 2
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    def gHelp(count, total):
        if count ==0:
            return total
        elif n<=3:
            return gHelp(count-1,total+1)
    return gHelp(n, 0)


 

experiment Start: 1 : Student 487, Attempt 3
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    def gHelp(count, total):
        if count==0:
            return total
        else:
            return gHelp(count-1, total+1)
    return gHelp(n)
 

experiment Start: 1 : Student 487, Attempt 4
experiment Information: 4 : Student 487, Fixed Attempt 4
experiment Start: 1 : Student 484
experiment Start: 1 : Student 484, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if g<=3:
        return g
    else:
        return add(n*g(n),(n-1)*g(n-1))


 

experiment Start: 1 : Student 484, Attempt 2
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if g<=3:
        return g
    else:
        return g(g-1*(g-1))


 

experiment Start: 1 : Student 484, Attempt 3
experiment Information: 4 : Student 484, Fixed Attempt 3
experiment Start: 1 : Student 483
experiment Start: 1 : Student 483, Attempt 1
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 481
experiment Start: 1 : Student 481, Attempt 1
experiment Information: 4 : Student 481, Fixed Attempt 1
experiment Start: 1 : Student 477
experiment Start: 1 : Student 477, Attempt 1
experiment Information: 4 : Student 477, Fixed Attempt 1
experiment Start: 1 : Student 474
experiment Start: 1 : Student 474, Attempt 1
experiment Information: 4 : Student 474, Fixed Attempt 1
experiment Start: 1 : Student 470
experiment Start: 1 : Student 470, Attempt 1
experiment Information: 4 : Student 470, Fixed Attempt 1
experiment Start: 1 : Student 469
experiment Start: 1 : Student 469, Attempt 1
experiment Information: 4 : Student 469, Fixed Attempt 1
experiment Start: 1 : Student 466
experiment Start: 1 : Student 466, Attempt 1
experiment Information: 4 : Student 466, Fixed Attempt 1
experiment Start: 1 : Student 463
experiment Start: 1 : Student 463, Attempt 1
experiment Information: 4 : Student 463, Fixed Attempt 1
experiment Start: 1 : Student 461
experiment Start: 1 : Student 461, Attempt 1
experiment Information: 4 : Student 461, Fixed Attempt 1
experiment Start: 1 : Student 460
experiment Start: 1 : Student 460, Attempt 1
experiment Information: 4 : Student 460, Fixed Attempt 1
experiment Start: 1 : Student 459
experiment Start: 1 : Student 459, Attempt 1
experiment Information: 4 : Student 459, Fixed Attempt 1
experiment Start: 1 : Student 457
experiment Start: 1 : Student 457, Attempt 1
experiment Information: 4 : Student 457, Fixed Attempt 1
experiment Start: 1 : Student 449
experiment Start: 1 : Student 449, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    def helper(x,y):
        if x == 0:
            return 0
        y += 1
        return (y*x) + helper(x-1,y)
    return helper(n-1,0)

 

experiment Start: 1 : Student 446
experiment Start: 1 : Student 446, Attempt 1
experiment Error: 0 : def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3) if n > 3 else n


experiment Start: 1 : Student 445
experiment Start: 1 : Student 445, Attempt 1
experiment Information: 4 : Student 445, Fixed Attempt 1
experiment Start: 1 : Student 444
experiment Start: 1 : Student 444, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    def helper(i, n):
        if n <= 3:
            return n
        else:
            return helper(i, n - 1) + (i + 1) * helper(i + 1, n - 2)



 

experiment Start: 1 : Student 444, Attempt 2
experiment Information: 4 : Student 444, Fixed Attempt 2
experiment Start: 1 : Student 443
experiment Start: 1 : Student 443, Attempt 1
experiment Information: 4 : Student 443, Fixed Attempt 1
experiment Start: 1 : Student 439
experiment Start: 1 : Student 439, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """

    tot = 1 + 2 + 3
    if n == 0:
    	return identity(n)
    else: 
    	tot += g(n - 1)
    	return tot 

 

experiment Start: 1 : Student 439, Attempt 2
experiment Information: 4 : Student 439, Fixed Attempt 2
experiment Start: 1 : Student 438
experiment Start: 1 : Student 438, Attempt 1
experiment Information: 4 : Student 438, Fixed Attempt 1
experiment Start: 1 : Student 437
experiment Start: 1 : Student 437, Attempt 1
experiment Information: 4 : Student 437, Fixed Attempt 1
experiment Start: 1 : Student 431
experiment Start: 1 : Student 431, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n < 3:
        return n
    else:
        return g(n-1) + 2*g(n-1) + 3 *g(n-3)

 

experiment Start: 1 : Student 431, Attempt 2
experiment Information: 4 : Student 431, Fixed Attempt 2
experiment Start: 1 : Student 429
experiment Start: 1 : Student 429, Attempt 1
experiment Information: 4 : Student 429, Fixed Attempt 1
experiment Start: 1 : Student 428
experiment Start: 1 : Student 428, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    if n <= 3:
        return n
    else:
        G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)
 

experiment Start: 1 : Student 428, Attempt 2
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    if n <= 3:
        return n
    else:
        g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)
 

experiment Start: 1 : Student 426
experiment Start: 1 : Student 426, Attempt 1
experiment Information: 4 : Student 426, Fixed Attempt 1
experiment Start: 1 : Student 425
experiment Start: 1 : Student 425, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    def identity(n): 
        return n
    def other_cases(n): 
        return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)
    if n <= 3:
        return identity
    if n > 3: 
        return other_cases


 

experiment Start: 1 : Student 425, Attempt 2
experiment Information: 4 : Student 425, Fixed Attempt 2
experiment Start: 1 : Student 424
experiment Start: 1 : Student 424, Attempt 1
experiment Error: 0 : def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n >= 0 and n<=3:
        return n
    else:
        return n-1 * g(n-1)


experiment Start: 1 : Student 423
experiment Start: 1 : Student 423, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    if n<=3:
        return n

 

experiment Start: 1 : Student 423, Attempt 2
experiment Information: 4 : Student 423, Fixed Attempt 2
experiment Start: 1 : Student 421
experiment Start: 1 : Student 421, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """

    def recursiveG(x):
        if x <= 3:
            return 3
        return recursiveG(x-1) + 2*recursiveG(x-2) + 3*recursiveG(x-3)
    return recursiveG(n)

 

experiment Start: 1 : Student 421, Attempt 2
experiment Information: 4 : Student 421, Fixed Attempt 2
experiment Start: 1 : Student 420
experiment Start: 1 : Student 420, Attempt 1
experiment Information: 4 : Student 420, Fixed Attempt 1
experiment Start: 1 : Student 419
experiment Start: 1 : Student 419, Attempt 1
experiment Information: 4 : Student 419, Fixed Attempt 1
experiment Start: 1 : Student 417
experiment Start: 1 : Student 417, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    return g

 

experiment Start: 1 : Student 417, Attempt 2
experiment Information: 4 : Student 417, Fixed Attempt 2
experiment Start: 1 : Student 414
experiment Start: 1 : Student 414, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    x, y = 1, 1
    while n > 3:
        g += y * g(n - x)
        x, y, n = x + 1, y + 1, n + 1
    return g
 

experiment Start: 1 : Student 414, Attempt 2
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    x, y, g = 1, 1, 1
    while n > 3:
        g += y * g(n - x)
        x, y, n = x + 1, y + 1, n + 1
    return g
 

experiment Start: 1 : Student 414, Attempt 3
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    x, y, f = 1, 1, 0
    while n > 3:
        f += y * g(n - x)
        x, y, n = x + 1, y + 1, n + 1
    return f
 

experiment Start: 1 : Student 414, Attempt 4
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    if n == 3:
        return n
    else:
        x, y, f = 1, 1, 0
        while n > 3:
            f += y * g(n - x)
            x, y= x + 1, y + 1
        return f
 

experiment Start: 1 : Student 414, Attempt 5
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    if n < 3:
        return n
    else:
        x, y, f = 1, 1, 0
        while n > 3:
            f += y * g(n - x)
            x, y= x + 1, y + 1
        return f
 

experiment Start: 1 : Student 414, Attempt 6
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    if n < 3:
        return n
    else:
        x, y, f = 1, 1, 0
        while n > 3:
            f += y * g(n - x)
            x, y, n = x + 1, y + 1, n + 1
        return f
 

experiment Start: 1 : Student 414, Attempt 7
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    if n < 3:
        return n
    else:
        x, val = 1, 0
        while x > 3:
            val += x * g(n - x)
            x += 1
        return val
 

experiment Start: 1 : Student 414, Attempt 8
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    if n < 3:
        return n
    else:
        x, val = n, 0
        while x >= 3:
            val += x * g(n - x)
            x += 1
        return val
 

experiment Start: 1 : Student 414, Attempt 9
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    if n <= 3:
        return n
    else:
        x, val = n, 0
        while x > 3:
            val += x * g(n - x)
            x += 1
        return val
 

experiment Start: 1 : Student 414, Attempt 10
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    if n <= 3:
        return n
    else:
        x, val = 1, 0
        while n > 3:
            val += x * g(n - x)
            x += 1
        return val
 

experiment Start: 1 : Student 412
experiment Start: 1 : Student 412, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    if n <= 3:
        return n
    def recursion(x, b):
        if x == n:
            return n
        elif b <= 3:
            return b + recusrion(x+1, b-1)
        else:
            return x * recusrion(x+1, b-1)


 

experiment Start: 1 : Student 412, Attempt 2
experiment Information: 4 : Student 412, Fixed Attempt 2
experiment Start: 1 : Student 409
experiment Start: 1 : Student 409, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if(n <= 3):
        return n
    elif(n > 3):
        return 

 

experiment Start: 1 : Student 406
experiment Start: 1 : Student 406, Attempt 1
experiment Information: 4 : Student 406, Fixed Attempt 1
experiment Start: 1 : Student 399
experiment Start: 1 : Student 399, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    def g_helper(n, count):
        if n == 3:
            return n
        return (count+1)*g(n-1)
    return g_helper(n, 0)


 

experiment Start: 1 : Student 399, Attempt 2
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    def g_helper(n, count):
        if n == 3:
            return n
        return (count+1)*g_helper(n-1, count+1)
    return g_helper(n, 0)


 

experiment Start: 1 : Student 399, Attempt 3
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    total = 0
    def g_helper(n, count):
        if n <= 3:
            return n
        total = total + (count+1)*g_helper(n-1, count+1)
        return total
    return g_helper(n, 0)


 

experiment Start: 1 : Student 399, Attempt 4
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    
    def g_helper(n, count, total):
        if n <= 3:
            return n
        total = total + (count+1)*g_helper(n-1, count+1, total)
    return g_helper(n, 0, 0)


 

experiment Start: 1 : Student 399, Attempt 5
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    
    def g_helper(n, count, total):
        def g_helper2(n, count):
            if n <= 3:
                return n
            total = total + (count+1)*g_helper2(n-1, count+1)
    return g_helper2(n, 0, 0)


 

experiment Start: 1 : Student 399, Attempt 6
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    
    def g_helper(n, count, total):
        def g_helper2(n, count):
            if n <= 3:
                return n
            total = total + (count+1)*g_helper2(n-1, count+1)
            return total
    return g_helper2(n, 0, 0)


 

experiment Start: 1 : Student 399, Attempt 7
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    
    def g_helper(n, count, total):
        def g_helper2(n, count):
            if n <= 3:
                return n
            total = total + (count+1)*g_helper2(n-1, count+1)
            return total
        return g_helper2(n, 0, 0)
    return g_helper(n, 0)


 

experiment Start: 1 : Student 399, Attempt 8
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    
    def g_helper(n, count, total):
        def g_helper2(n, count):
            if n <= 3:
                return n
            total = total + (count+1)*g_helper2(n-1, count+1)
            return total
        return g_helper2(n, 0)
    return g_helper(n, 0, 0)


 

experiment Start: 1 : Student 399, Attempt 9
experiment Information: 4 : Student 399, Fixed Attempt 9
experiment Start: 1 : Student 398
experiment Start: 1 : Student 398, Attempt 1
experiment Information: 4 : Student 398, Fixed Attempt 1
experiment Start: 1 : Student 393
experiment Start: 1 : Student 393, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if x <=3:
        return x
    else:
        g(n-1) + 2*g(n-2) + 3*g(n-3)

    #G(n) = n,                                       if n <= 3
    #G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3

 

experiment Start: 1 : Student 393, Attempt 2
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <=3:
        return n
    else:
        g(n-1) + 2*g(n-2) + 3*g(n-3)

    #G(n) = n,                                       if n <= 3
    #G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3

 

experiment Start: 1 : Student 393, Attempt 3
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    def helper(x):
        if x <=3:
            return x
        else:
            helper(n-1) + 2*helper(n-2) + 3*helper(n-3)

    return helper(n)


    #G(n) = n,                                       if n <= 3
    #G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3

 

experiment Start: 1 : Student 393, Attempt 4
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    def helper(x):
        if x <=3:
            return x
        else:
            helper(x-1) + 2*helper(x-2) + 3*helper(x-3)

    return helper(n)


    #G(n) = n,                                       if n <= 3
    #G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3

 

experiment Start: 1 : Student 393, Attempt 5
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    def helper(x):
        if x <=3:
            return x
        elif x<=5:
            helper(x-1) + 2*helper(x-2) + 3*helper(x-3)

    return helper(n)


    #G(n) = n,                                       if n <= 3
    #G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3

 

experiment Start: 1 : Student 393, Attempt 6
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    def helper(x):
        if x <=3:
            return x
        elif x<=5:
            helper(x-1) + 2 * helper(x-2) + 3 * helper(x-3)

    return helper(n)


    #G(n) = n,                                       if n <= 3
    #G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3

 

experiment Start: 1 : Student 388
experiment Start: 1 : Student 388, Attempt 1
experiment Information: 4 : Student 388, Fixed Attempt 1
experiment Start: 1 : Student 384
experiment Start: 1 : Student 384, Attempt 1
experiment Information: 4 : Student 384, Fixed Attempt 1
experiment Start: 1 : Student 383
experiment Start: 1 : Student 383, Attempt 1
experiment Information: 4 : Student 383, Fixed Attempt 1
experiment Start: 1 : Student 377
experiment Start: 1 : Student 377, Attempt 1
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 375
experiment Start: 1 : Student 375, Attempt 1
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 375, Attempt 2
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 375, Attempt 3
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 375, Attempt 4
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 374
experiment Start: 1 : Student 374, Attempt 1
experiment Information: 4 : Student 374, Fixed Attempt 1
experiment Start: 1 : Student 373
experiment Start: 1 : Student 373, Attempt 1
experiment Information: 4 : Student 373, Fixed Attempt 1
experiment Start: 1 : Student 369
experiment Start: 1 : Student 369, Attempt 1
experiment Information: 4 : Student 369, Fixed Attempt 1
experiment Start: 1 : Student 367
experiment Start: 1 : Student 367, Attempt 1
experiment Information: 4 : Student 367, Fixed Attempt 1
experiment Start: 1 : Student 366
experiment Start: 1 : Student 366, Attempt 1
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 366, Attempt 2
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 366, Attempt 3
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 366, Attempt 4
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 366, Attempt 5
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 366, Attempt 6
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 366, Attempt 7
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 366, Attempt 8
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 366, Attempt 9
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 366, Attempt 10
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 366, Attempt 11
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 366, Attempt 12
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 366, Attempt 13
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 366, Attempt 14
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 366, Attempt 15
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 366, Attempt 16
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 366, Attempt 17
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 366, Attempt 18
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 366, Attempt 19
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 366, Attempt 20
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 366, Attempt 21
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 366, Attempt 22
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 366, Attempt 23
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 366, Attempt 24
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 366, Attempt 25
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 366, Attempt 26
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 366, Attempt 27
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 366, Attempt 28
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 366, Attempt 29
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 366, Attempt 30
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 366, Attempt 31
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 365
experiment Start: 1 : Student 365, Attempt 1
experiment Information: 4 : Student 365, Fixed Attempt 1
experiment Start: 1 : Student 359
experiment Start: 1 : Student 359, Attempt 1
experiment Error: 0 : def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """

    return n if n <= 3 else g(n -1) * g(n-2) * g(n-3)

experiment Start: 1 : Student 358
experiment Start: 1 : Student 358, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    if n <= 3:
        if n <= 1:
            return 1
        else:
            return n + g(n-1)
    else:
        return n(n-1) + g(n-1)

 

experiment Start: 1 : Student 358, Attempt 2
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    if n <= 3:
        if n == 1:
            return 1
        else:
            return n + g(n-1)
    else:
        return n(n-1) + g(n-1)

 

experiment Start: 1 : Student 358, Attempt 3
experiment Information: 4 : Student 358, Fixed Attempt 3
experiment Start: 1 : Student 353
experiment Start: 1 : Student 353, Attempt 1
experiment Error: 0 : def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    return n if n <= 3 else g(n) * g(n-1) * g(n-2) * g(n-3)


experiment Start: 1 : Student 352
experiment Start: 1 : Student 352, Attempt 1
experiment Information: 4 : Student 352, Fixed Attempt 1
experiment Start: 1 : Student 348
experiment Start: 1 : Student 348, Attempt 1
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 345
experiment Start: 1 : Student 345, Attempt 1
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 345, Attempt 2
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    return lambda x:x

 

experiment Start: 1 : Student 345, Attempt 3
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 1:
        return n
    else:
        return g(n)    

 

experiment Start: 1 : Student 345, Attempt 4
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    return lambda x:x

 

experiment Start: 1 : Student 345, Attempt 5
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    
    return g(n)    

 

experiment Start: 1 : Student 345, Attempt 6
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <=3:
        return n
    else:
        G(n)    
    return g(n)    

 

experiment Start: 1 : Student 345, Attempt 7
experiment Information: 4 : Student 345, Fixed Attempt 7
experiment Start: 1 : Student 341
experiment Start: 1 : Student 341, Attempt 1
experiment Information: 4 : Student 341, Fixed Attempt 1
experiment Start: 1 : Student 340
experiment Start: 1 : Student 340, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    if n <= 3:
        return 1
    else:
        return n*g(n-1)

 

experiment Start: 1 : Student 340, Attempt 2
experiment Information: 4 : Student 340, Fixed Attempt 2
experiment Start: 1 : Student 336
experiment Start: 1 : Student 336, Attempt 1
experiment Information: 4 : Student 336, Fixed Attempt 1
experiment Start: 1 : Student 335
experiment Start: 1 : Student 335, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n >= 0:
        return g(n) 

 

experiment Start: 1 : Student 335, Attempt 2
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    for i in range(0,n+1):
        return g

 

experiment Start: 1 : Student 335, Attempt 3
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    total = 0
    if n <= 3:
        return n 
    elif n > 3:
        for i in range (1, 4):
            #n -= i 
            total += i * g_iter(n-i) 
        return total 
   
 

experiment Start: 1 : Student 335, Attempt 4
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    total = 0
    if n <= 3:
        return n 
    elif n > 3:
        for i in range (1, 4):
            a = n - i 
            #n -= i 
            total += i * g_iter(a) 
        return total 
   
 

experiment Start: 1 : Student 335, Attempt 5
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    total = 0
    if n <= 3:
        return n 
    elif n > 3:
        for i in range (1, 4):
            a = n - i 
            b = g_iter(a)
            total += i * b
        return total 
   
 

experiment Start: 1 : Student 335, Attempt 6
experiment Information: 4 : Student 335, Fixed Attempt 6
experiment Start: 1 : Student 333
experiment Start: 1 : Student 333, Attempt 1
experiment Information: 4 : Student 333, Fixed Attempt 1
experiment Start: 1 : Student 332
experiment Start: 1 : Student 332, Attempt 1
experiment Information: 4 : Student 332, Fixed Attempt 1
experiment Start: 1 : Student 330
experiment Start: 1 : Student 330, Attempt 1
experiment Information: 4 : Student 330, Fixed Attempt 1
experiment Start: 1 : Student 329
experiment Start: 1 : Student 329, Attempt 1
experiment Information: 4 : Student 329, Fixed Attempt 1
experiment Start: 1 : Student 328
experiment Start: 1 : Student 328, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    g = lambda n: n
    
    if n <= 3:
        return g
    else:
        n -= 1
        g = g(n)
        return g






 

experiment Start: 1 : Student 328, Attempt 2
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    g = lambda n: n
    
    if n <= 3:
        return g
    else:
        n += 1
        g = g(n-1)
        return g






 

experiment Start: 1 : Student 328, Attempt 3
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    g = lambda n: n
    
    if n <= 3:
        return g(n)
    else:
        n += 1
        g = g(n-1)
        return g






 

experiment Start: 1 : Student 328, Attempt 4
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    g = lambda n: n
    k = 2
    if n <= 3:
        return g(n)
    else:
        n -= 1
        g = g(n-1) * k
        k += 1
        return g






 

experiment Start: 1 : Student 328, Attempt 5
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    g = lambda n: n
    k = 2
    if n <= 3:
        return g(n)
    else:
        if k <= 3:
            g = g(n-1) * k
            n -= 1
            k += 1
        return g






 

experiment Start: 1 : Student 328, Attempt 6
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    g = lambda n: n
    k = 2
    if n <= 3:
        return g(n)
    else:
        if k <= 3:
            g = g + g(n-1) * k
            n -= 1
            k += 1
        return g






 

experiment Start: 1 : Student 328, Attempt 7
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    g = lambda n: n
    k = 2
    if n <= 3:
        return g(n)
    else:
        if k <= 3:
            g = g(n-1) * k
            n -= 1
            k += 1
        return g






 

experiment Start: 1 : Student 328, Attempt 8
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    g = lambda n: n
    k = 2
    if n <= 3:
        return g(n)
    else:
        if k <= 3:
            g = g(n-1) * k
            n -= 1
            k += 1
            return g






 

experiment Start: 1 : Student 328, Attempt 9
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    g = lambda n: n
    k = 2
    if n <= 3:
        return g(n)
    else:
        if k <= 3:
            g = g(n) * k
            n -= 1
            k += 1
            return 






 

experiment Start: 1 : Student 328, Attempt 10
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    g = lambda n: n
    k = 2
    if n <= 3:
        return g(n)
    else:
        if k <= 3:
            g = g(n) * k
            n -= 1
            k += 1
            return g






 

experiment Start: 1 : Student 328, Attempt 11
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    g = lambda n: n
    k = 2
    if n <= 3:
        return g(n)
    else:
        if k <= 3:
            n -= 1
            g = g(n) * k
            k += 1
            return g






 

experiment Start: 1 : Student 328, Attempt 12
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    g = lambda n: n
    k = 2
    if n <= 3:
        return g(n)
    else:
        if k <= 3:
            n -= 1
            g = g(n) * k
            k += 1
        return g(n)






 

experiment Start: 1 : Student 328, Attempt 13
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    g = lambda n: n
    k = 2
    if n <= 3:
        return g(n)
    else:
        if k <= 3:
            n -= 1
            g = g(n) * k
            k += 1
        return g






 

experiment Start: 1 : Student 328, Attempt 14
experiment Information: 4 : Student 328, Fixed Attempt 14
experiment Start: 1 : Student 327
experiment Start: 1 : Student 327, Attempt 1
experiment Information: 4 : Student 327, Fixed Attempt 1
experiment Start: 1 : Student 326
experiment Start: 1 : Student 326, Attempt 1
experiment Information: 4 : Student 326, Fixed Attempt 1
experiment Start: 1 : Student 325
experiment Start: 1 : Student 325, Attempt 1
experiment Information: 4 : Student 325, Fixed Attempt 1
experiment Start: 1 : Student 320
experiment Start: 1 : Student 320, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3:
        return n
    else:
        g(n-1) + 2(g(n-2)) + 3(g(n-3))

 

experiment Start: 1 : Student 320, Attempt 2
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    def G(n):
        if n <= 3:
            return n
        else:
            return G(n-1) + 2(G(n-2)) + 3(G(n-3))
    return G

 

experiment Start: 1 : Student 320, Attempt 3
experiment Information: 4 : Student 320, Fixed Attempt 3
experiment Start: 1 : Student 319
experiment Start: 1 : Student 319, Attempt 1
experiment Information: 4 : Student 319, Fixed Attempt 1
experiment Start: 1 : Student 318
experiment Start: 1 : Student 318, Attempt 1
experiment Information: 4 : Student 318, Fixed Attempt 1
experiment Start: 1 : Student 317
experiment Start: 1 : Student 317, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    if n<=3:
        return g(n)
    return g(n-1)


 

experiment Start: 1 : Student 311
experiment Start: 1 : Student 311, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3:
        return n
    else:
        G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)

 

experiment Start: 1 : Student 311, Attempt 2
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3:
        return n
    else:
        g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)

 

experiment Start: 1 : Student 311, Attempt 3
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n > 0:
        if n <= 3:
            return n
        else:
            g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)

 

experiment Start: 1 : Student 308
experiment Start: 1 : Student 308, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    i = 1
    g = 0
    if n <= 3:
        return n
    else:
        g = G(n-1) + 2 * G(n-2) + 3 * G(n - 3)
        return g


 

experiment Start: 1 : Student 308, Attempt 2
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    i = 1
    g = 0
    if n <= 3:
        return n
    else:
        g = (n-1) + 2 * (n-2) + 3 * (n - 3)
        return g


 

experiment Start: 1 : Student 308, Attempt 3
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    g = 0
    if n <= 3:
        return n
    else:
        g = (n-1) + 2 * (n-2) + 3 * (n - 3)
        return g


 

experiment Start: 1 : Student 308, Attempt 4
experiment Information: 4 : Student 308, Fixed Attempt 4
experiment Start: 1 : Student 307
experiment Start: 1 : Student 307, Attempt 1
experiment Information: 4 : Student 307, Fixed Attempt 1
experiment Start: 1 : Student 304
experiment Start: 1 : Student 304, Attempt 1
experiment Information: 4 : Student 304, Fixed Attempt 1
experiment Start: 1 : Student 303
experiment Start: 1 : Student 303, Attempt 1
experiment Information: 4 : Student 303, Fixed Attempt 1
experiment Start: 1 : Student 298
experiment Start: 1 : Student 298, Attempt 1
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 298, Attempt 2
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 298, Attempt 3
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 298, Attempt 4
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 298, Attempt 5
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 296
experiment Start: 1 : Student 296, Attempt 1
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 293
experiment Start: 1 : Student 293, Attempt 1
experiment Information: 4 : Student 293, Fixed Attempt 1
experiment Start: 1 : Student 292
experiment Start: 1 : Student 292, Attempt 1
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 291
experiment Start: 1 : Student 291, Attempt 1
experiment Information: 4 : Student 291, Fixed Attempt 1
experiment Start: 1 : Student 290
experiment Start: 1 : Student 290, Attempt 1
experiment Information: 4 : Student 290, Fixed Attempt 1
experiment Start: 1 : Student 289
experiment Start: 1 : Student 289, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    result = 0
    if n <= 0:
        return result 
    if n<=3:
        result = n
    else: 
        result = (n-1)*g(n-1) + result
    return result

 

experiment Start: 1 : Student 289, Attempt 2
experiment Information: 4 : Student 289, Fixed Attempt 2
experiment Start: 1 : Student 281
experiment Start: 1 : Student 281, Attempt 1
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 281, Attempt 2
experiment Information: 4 : Student 281, Fixed Attempt 2
experiment Start: 1 : Student 278
experiment Start: 1 : Student 278, Attempt 1
experiment Information: 4 : Student 278, Fixed Attempt 1
experiment Start: 1 : Student 275
experiment Start: 1 : Student 275, Attempt 1
experiment Information: 4 : Student 275, Fixed Attempt 1
experiment Start: 1 : Student 273
experiment Start: 1 : Student 273, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if(n == 0):
        return 0
    return 1 + g(n-1)

 

experiment Start: 1 : Student 273, Attempt 2
experiment Information: 4 : Student 273, Fixed Attempt 2
experiment Start: 1 : Student 269
experiment Start: 1 : Student 269, Attempt 1
experiment Information: 4 : Student 269, Fixed Attempt 1
experiment Start: 1 : Student 265
experiment Start: 1 : Student 265, Attempt 1
experiment Information: 4 : Student 265, Fixed Attempt 1
experiment Start: 1 : Student 257
experiment Start: 1 : Student 257, Attempt 1
experiment Information: 4 : Student 257, Fixed Attempt 1
experiment Start: 1 : Student 248
experiment Start: 1 : Student 248, Attempt 1
experiment Information: 4 : Student 248, Fixed Attempt 1
experiment Start: 1 : Student 244
experiment Start: 1 : Student 244, Attempt 1
experiment Information: 4 : Student 244, Fixed Attempt 1
experiment Start: 1 : Student 243
experiment Start: 1 : Student 243, Attempt 1
experiment Information: 4 : Student 243, Fixed Attempt 1
experiment Start: 1 : Student 242
experiment Start: 1 : Student 242, Attempt 1
experiment Information: 4 : Student 242, Fixed Attempt 1
experiment Start: 1 : Student 237
experiment Start: 1 : Student 237, Attempt 1
experiment Information: 4 : Student 237, Fixed Attempt 1
experiment Start: 1 : Student 236
experiment Start: 1 : Student 236, Attempt 1
experiment Information: 4 : Student 236, Fixed Attempt 1
experiment Start: 1 : Student 233
experiment Start: 1 : Student 233, Attempt 1
experiment Information: 4 : Student 233, Fixed Attempt 1
experiment Start: 1 : Student 232
experiment Start: 1 : Student 232, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """

    def compute_G(i):

        if n <= 3:
            return n
        elif i != n:
            value += i*g(n - i)
            compute_G(i + 1)
        return value

    return compute_G(1)

    

 

experiment Start: 1 : Student 232, Attempt 2
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """

    value = 0

    def compute_G(i):

        if n <= 3:
            return n
        elif i != n:
            value += i*g(n - i)
            compute_G(i + 1)
        return value

    return compute_G(1)

    

 

experiment Start: 1 : Student 232, Attempt 3
experiment Information: 4 : Student 232, Fixed Attempt 3
experiment Start: 1 : Student 231
experiment Start: 1 : Student 231, Attempt 1
experiment Information: 4 : Student 231, Fixed Attempt 1
experiment Start: 1 : Student 223
experiment Start: 1 : Student 223, Attempt 1
experiment Information: 4 : Student 223, Fixed Attempt 1
experiment Start: 1 : Student 221
experiment Start: 1 : Student 221, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n>=3:
        return n
    else:
        g(n-1) + 2 * g(n-2) * g(n-3)

 

experiment Start: 1 : Student 221, Attempt 2
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n>=3:
        return n
    else:
        g(n-1)

 

experiment Start: 1 : Student 221, Attempt 3
experiment Information: 4 : Student 221, Fixed Attempt 3
experiment Start: 1 : Student 219
experiment Start: 1 : Student 219, Attempt 1
experiment Information: 4 : Student 219, Fixed Attempt 1
experiment Start: 1 : Student 212
experiment Start: 1 : Student 212, Attempt 1
experiment Information: 4 : Student 212, Fixed Attempt 1
experiment Start: 1 : Student 211
experiment Start: 1 : Student 211, Attempt 1
experiment Information: 4 : Student 211, Fixed Attempt 1
experiment Start: 1 : Student 210
experiment Start: 1 : Student 210, Attempt 1
experiment Information: 4 : Student 210, Fixed Attempt 1
experiment Start: 1 : Student 208
experiment Start: 1 : Student 208, Attempt 1
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 208, Attempt 2
experiment Information: 4 : Student 208, Fixed Attempt 2
experiment Start: 1 : Student 206
experiment Start: 1 : Student 206, Attempt 1
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 206, Attempt 2
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 206, Attempt 3
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 206, Attempt 4
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 206, Attempt 5
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 206, Attempt 6
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 206, Attempt 7
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 206, Attempt 8
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 205
experiment Start: 1 : Student 205, Attempt 1
experiment Information: 4 : Student 205, Fixed Attempt 1
experiment Start: 1 : Student 202
experiment Start: 1 : Student 202, Attempt 1
experiment Information: 4 : Student 202, Fixed Attempt 1
experiment Start: 1 : Student 200
experiment Start: 1 : Student 200, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n < 3:
        return n
    else:
        return G(g(n-1))



 

experiment Start: 1 : Student 200, Attempt 2
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n < 3:
        return n
    else:
        return G(g(n-1)) + g(n-2)*G(g(n-2)) + g(n-3)*G(g(n-3)) 



 

experiment Start: 1 : Student 200, Attempt 3
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    def G(n):
        if n < 3:
            return n
        else:
            return G(g(n-1)) + g(n-2)*G(g(n-2)) + g(n-3)*G(g(n-3)) 



 

experiment Start: 1 : Student 200, Attempt 4
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    def G(x):
        if x < 3:
            return n
        else:
            return G(g(x-1)) + g(x-2)*G(g(x-2)) + g(x-3)*G(g(x-3)) 
    return G(n)



 

experiment Start: 1 : Student 200, Attempt 5
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    def G(x):
        if x < 3:
            return x
        else:
            return G(g(x-1)) + g(x-2)*G(g(x-2)) + g(x-3)*G(g(x-3)) 
    return G(n)



 

experiment Start: 1 : Student 200, Attempt 6
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    def G(x,k):
        if k == 3:
            return k
        if x < 3:
            return x
        else:
            return G(g(x-1)) * (k + 1)
    return G(n, 0)



 

experiment Start: 1 : Student 200, Attempt 7
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    def G(x,k):
        if k == 3:
            return k
        if x < 3:
            return x
        else:
            return G(g(x-1), k) * (k + 1)
    return G(n, 0)



 

experiment Start: 1 : Student 200, Attempt 8
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    def G(x,k):
        if k == 3:
            return 
        if x < 3:
            return x
        else:
            return G(g(x-1), k) * (k + 1)
    return G(n, 0)



 

experiment Start: 1 : Student 200, Attempt 9
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    def G(x,k):
        if x < 3:
            return x
        else:
            return G(g(x-1), k) * (k + 1)
    return G(n, 0)



 

experiment Start: 1 : Student 200, Attempt 10
experiment Information: 4 : Student 200, Fixed Attempt 10
experiment Start: 1 : Student 197
experiment Start: 1 : Student 197, Attempt 1
experiment Information: 4 : Student 197, Fixed Attempt 1
experiment Start: 1 : Student 196
experiment Start: 1 : Student 196, Attempt 1
experiment Information: 4 : Student 196, Fixed Attempt 1
experiment Start: 1 : Student 195
experiment Start: 1 : Student 195, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if g <= 3:
        return g(n)
    else:
        return 2 * g(n - 1) + 2

 

experiment Start: 1 : Student 195, Attempt 2
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if g <= 3:
        return n
    else:
        return 2 * g(n - 1) + 2

 

experiment Start: 1 : Student 195, Attempt 3
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if g(n) <= 3:
        return n
    else:
        return 2 * g(n - 1) + 2

 

experiment Start: 1 : Student 195, Attempt 4
experiment Information: 4 : Student 195, Fixed Attempt 4
experiment Start: 1 : Student 194
experiment Start: 1 : Student 194, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    if n <= 3:
        return identity(n)
    else: 
        g(n-1) + 2 * g(n-2) + 3 * g(n-3) 

 

experiment Start: 1 : Student 190
experiment Start: 1 : Student 190, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 1:
        return n
    return g(n - 1) + 2 * g(n - 2) + 3

 

experiment Start: 1 : Student 190, Attempt 2
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 2:
        return n
    return g(n - 1) + 2 * g(n - 2) + 3

 

experiment Start: 1 : Student 190, Attempt 3
experiment Information: 4 : Student 190, Fixed Attempt 3
experiment Start: 1 : Student 184
experiment Start: 1 : Student 184, Attempt 1
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 177
experiment Start: 1 : Student 177, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3:
        G(n) == n
        return G
    else: 
        G(n) == G(n-1) + 2 * G(n-2) + 3 * G(n-3)
        return G
 

experiment Start: 1 : Student 177, Attempt 2
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3:
        g(n) == n
        return g
    else: 
        g(n) == g(n-1) + 2 * g(n-2) + 3 * g(n-3)
        return g
 

experiment Start: 1 : Student 177, Attempt 3
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3:
        g(n) == n
        
    else: 
        g(n) == g(n-1) + 2 * g(n-2) + 3 * g(n-3)
        
 

experiment Start: 1 : Student 176
experiment Start: 1 : Student 176, Attempt 1
experiment Information: 4 : Student 176, Fixed Attempt 1
experiment Start: 1 : Student 172
experiment Start: 1 : Student 172, Attempt 1
experiment Information: 4 : Student 172, Fixed Attempt 1
experiment Start: 1 : Student 171
experiment Start: 1 : Student 171, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <=3:
        return n
    else:
        a = a + 1
        return g(n - 1) + a * g(n - a)

 

experiment Start: 1 : Student 171, Attempt 2
experiment Information: 4 : Student 171, Fixed Attempt 2
experiment Start: 1 : Student 170
experiment Start: 1 : Student 170, Attempt 1
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 170, Attempt 2
experiment Information: 4 : Student 170, Fixed Attempt 2
experiment Start: 1 : Student 168
experiment Start: 1 : Student 168, Attempt 1
experiment Information: 4 : Student 168, Fixed Attempt 1
experiment Start: 1 : Student 166
experiment Start: 1 : Student 166, Attempt 1
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 164
experiment Start: 1 : Student 164, Attempt 1
experiment Information: 4 : Student 164, Fixed Attempt 1
experiment Start: 1 : Student 163
experiment Start: 1 : Student 163, Attempt 1
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 161
experiment Start: 1 : Student 161, Attempt 1
experiment Information: 4 : Student 161, Fixed Attempt 1
experiment Start: 1 : Student 158
experiment Start: 1 : Student 158, Attempt 1
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 152
experiment Start: 1 : Student 152, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    n = 1
    if n <= 3:
        return n
    else:
        return g(n-1) * (n+1)

 

experiment Start: 1 : Student 152, Attempt 2
experiment Information: 4 : Student 152, Fixed Attempt 2
experiment Start: 1 : Student 149
experiment Start: 1 : Student 149, Attempt 1
experiment Information: 4 : Student 149, Fixed Attempt 1
experiment Start: 1 : Student 148
experiment Start: 1 : Student 148, Attempt 1
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 142
experiment Start: 1 : Student 142, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n<=3:
        return n
    else:
        total+=g(n-1) + 2*g(n-2) + 3*g(n-3)
        return total

 

experiment Start: 1 : Student 141
experiment Start: 1 : Student 141, Attempt 1
experiment Information: 4 : Student 141, Fixed Attempt 1
experiment Start: 1 : Student 137
experiment Start: 1 : Student 137, Attempt 1
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 133
experiment Start: 1 : Student 133, Attempt 1
experiment Information: 4 : Student 133, Fixed Attempt 1
experiment Start: 1 : Student 129
experiment Start: 1 : Student 129, Attempt 1
experiment Information: 4 : Student 129, Fixed Attempt 1
experiment Start: 1 : Student 128
experiment Start: 1 : Student 128, Attempt 1
experiment Information: 4 : Student 128, Fixed Attempt 1
experiment Start: 1 : Student 127
experiment Start: 1 : Student 127, Attempt 1
experiment Information: 4 : Student 127, Fixed Attempt 1
experiment Start: 1 : Student 126
experiment Start: 1 : Student 126, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3:
        return n
    else:
        g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)

 

experiment Start: 1 : Student 124
experiment Start: 1 : Student 124, Attempt 1
experiment Information: 4 : Student 124, Fixed Attempt 1
experiment Start: 1 : Student 120
experiment Start: 1 : Student 120, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    result = G(n)
    if n <= 3:
        result = n
    else:
        result = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)
    return g(n)

 

experiment Start: 1 : Student 120, Attempt 2
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3:
        result = n
    else:
        result = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)
    return g(n)

 

experiment Start: 1 : Student 120, Attempt 3
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3:
        result = n
    else:
        result = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)
        return result
    return g(n)


 

experiment Start: 1 : Student 120, Attempt 4
experiment Information: 4 : Student 120, Fixed Attempt 4
experiment Start: 1 : Student 118
experiment Start: 1 : Student 118, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    if n <= 3:
        return n
    if n > 3:
        total = combiner(total, g(n-1))
    return total

 

experiment Start: 1 : Student 118, Attempt 2
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    if n <= 3:
        return n
    k = 1
    while k < n:
        total = total + k*(g(n-k))
        k +=1
    return total


 

experiment Start: 1 : Student 118, Attempt 3
experiment Information: 4 : Student 118, Fixed Attempt 3
experiment Start: 1 : Student 112
experiment Start: 1 : Student 112, Attempt 1
experiment Information: 4 : Student 112, Fixed Attempt 1
experiment Start: 1 : Student 110
experiment Start: 1 : Student 110, Attempt 1
experiment Information: 4 : Student 110, Fixed Attempt 1
experiment Start: 1 : Student 107
experiment Start: 1 : Student 107, Attempt 1
experiment Information: 4 : Student 107, Fixed Attempt 1
experiment Start: 1 : Student 106
experiment Start: 1 : Student 106, Attempt 1
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 106, Attempt 2
experiment Information: 4 : Student 106, Fixed Attempt 2
experiment Start: 1 : Student 104
experiment Start: 1 : Student 104, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3:
        return n
 

experiment Start: 1 : Student 104, Attempt 2
experiment Information: 4 : Student 104, Fixed Attempt 2
experiment Start: 1 : Student 103
experiment Start: 1 : Student 103, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    k=1
    def G(n, k):
        if n<=3:
            return n
        else:
            n+=k*(n-k)
            return G(n, k+1)
    return G(n, k)

 

experiment Start: 1 : Student 103, Attempt 2
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    k=1
    def G(n, k):
        if n<=3:
            return n
        else:
            n+=k*(n)
            return G(n-1, k)
    return G(n, k)

 

experiment Start: 1 : Student 103, Attempt 3
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    k=1
    def G(n, k):
        if n<=3:
            return n
        else:
            n+=k*(n)
            return G(n-1, k+1)
    return G(n, k)

 

experiment Start: 1 : Student 103, Attempt 4
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    k=1
    total=0
    n-=1
    def G(n, k, total):
        if n==3:
            return n
        else:
            return G(n-1, k+1, total=total+k*n)
    return G(n, k, total)

 

experiment Start: 1 : Student 103, Attempt 5
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    k=1
    total=0
    n-=1
    def G(n, k, total):
        if n<=3:
            return n
        else:
            return G(n-1, k+1, total=total+k*n)
    return G(n, k, total)

 

experiment Start: 1 : Student 103, Attempt 6
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    k=0
    total=0
    n=1
    def G(n, k, total):
        if n<=3:
            return n
        else:
            return G(n-1, k+1, total=total+k*n)
    return G(n, k, total)

 

experiment Start: 1 : Student 103, Attempt 7
experiment Information: 4 : Student 103, Fixed Attempt 7
experiment Start: 1 : Student 100
experiment Start: 1 : Student 100, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n == 0:
        return 0
    else:
        return n * g(n-1)

 

experiment Start: 1 : Student 100, Attempt 2
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n == 0:
        return n
    else:
        return n * g(n-1)

 

experiment Start: 1 : Student 100, Attempt 3
experiment Information: 4 : Student 100, Fixed Attempt 3
experiment Start: 1 : Student 97
experiment Start: 1 : Student 97, Attempt 1
experiment Information: 4 : Student 97, Fixed Attempt 1
experiment Start: 1 : Student 90
experiment Start: 1 : Student 90, Attempt 1
experiment Information: 4 : Student 90, Fixed Attempt 1
experiment Start: 1 : Student 87
experiment Start: 1 : Student 87, Attempt 1
experiment Information: 4 : Student 87, Fixed Attempt 1
experiment Start: 1 : Student 79
experiment Start: 1 : Student 79, Attempt 1
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 79, Attempt 2
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 79, Attempt 3
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 79, Attempt 4
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 79, Attempt 5
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 79, Attempt 6
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 79, Attempt 7
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 79, Attempt 8
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 79, Attempt 9
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 79, Attempt 10
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 79, Attempt 11
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 79, Attempt 12
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 79, Attempt 13
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 79, Attempt 14
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 79, Attempt 15
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 79, Attempt 16
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 79, Attempt 17
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 79, Attempt 18
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 79, Attempt 19
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 79, Attempt 20
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 79, Attempt 21
experiment Information: 0 : Input does not compile
experiment Start: 1 : Student 76
experiment Start: 1 : Student 76, Attempt 1
experiment Information: 4 : Student 76, Fixed Attempt 1
experiment Start: 1 : Student 67
experiment Start: 1 : Student 67, Attempt 1
experiment Information: 4 : Student 67, Fixed Attempt 1
experiment Start: 1 : Student 63
experiment Start: 1 : Student 63, Attempt 1
experiment Information: 4 : Student 63, Fixed Attempt 1
experiment Start: 1 : Student 53
experiment Start: 1 : Student 53, Attempt 1
experiment Information: 4 : Student 53, Fixed Attempt 1
experiment Start: 1 : Student 50
experiment Start: 1 : Student 50, Attempt 1
experiment Information: 4 : Student 50, Fixed Attempt 1
experiment Start: 1 : Student 49
experiment Start: 1 : Student 49, Attempt 1
experiment Information: 4 : Student 49, Fixed Attempt 1
experiment Start: 1 : Student 45
experiment Start: 1 : Student 45, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    if n == 0:
    	return 0
    elif n <= 3:
    	return n + g(n-1)
    	return g(n-1) + 2*g(n-2) + 3*g(n-3)

 

experiment Start: 1 : Student 45, Attempt 2
experiment Information: 4 : Student 45, Fixed Attempt 2
experiment Start: 1 : Student 43
experiment Start: 1 : Student 43, Attempt 1
experiment Information: 4 : Student 43, Fixed Attempt 1
experiment Start: 1 : Student 42
experiment Start: 1 : Student 42, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3:
        return n
    else:
        g(n-1) + 2 * g(n-2) + 3 * g(n-3)

 

experiment Start: 1 : Student 39
experiment Start: 1 : Student 39, Attempt 1
experiment Information: 4 : Student 39, Fixed Attempt 1
experiment Start: 1 : Student 34
experiment Start: 1 : Student 34, Attempt 1
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    if n <= 3:
        return G(n)
    else:
        return g(n-1)

 

experiment Start: 1 : Student 34, Attempt 2
experiment Information: 4 : Student 34, Fixed Attempt 2
experiment Start: 1 : Student 27
experiment Start: 1 : Student 27, Attempt 1
experiment Information: 4 : Student 27, Fixed Attempt 1
experiment Start: 1 : Student 26
experiment Start: 1 : Student 26, Attempt 1
experiment Information: 4 : Student 26, Fixed Attempt 1
experiment Start: 1 : Student 25
experiment Start: 1 : Student 25, Attempt 1
experiment Information: 4 : Student 25, Fixed Attempt 1
experiment Start: 1 : Student 23
experiment Start: 1 : Student 23, Attempt 1
experiment Error: 0 : def g(n):
	"""Return the value of G(n), computed recursively.

	>>> g(1)
	1
	>>> g(2)
	2
	>>> g(3)
	3
	>>> g(4)
	10
	>>> g(5)
	22
	>>> from construct_check import check
	>>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
	True
	"""
	p = 4
	if p % 2 == 1:
		p = 1
	if n <= 3:
		return n
	else:
		return g(p-1((n-1)))


experiment Start: 1 : Student 23, Attempt 2
experiment Information: 4 : Student 23, Fixed Attempt 2
experiment Start: 1 : Student 22
experiment Start: 1 : Student 22, Attempt 1
experiment Information: 4 : Student 22, Fixed Attempt 1
experiment Start: 1 : Student 21
experiment Start: 1 : Student 21, Attempt 1
experiment Information: 4 : Student 21, Fixed Attempt 1
experiment Start: 1 : Student 19
experiment Start: 1 : Student 19, Attempt 1
experiment Information: 4 : Student 19, Fixed Attempt 1
experiment Start: 1 : Student 17
experiment Start: 1 : Student 17, Attempt 1
experiment Information: 4 : Student 17, Fixed Attempt 1
experiment Start: 1 : Student 12
experiment Start: 1 : Student 12, Attempt 1
experiment Information: 4 : Student 12, Fixed Attempt 1
experiment Start: 1 : Student 6
experiment Start: 1 : Student 6, Attempt 1
experiment Information: 4 : Student 6, Fixed Attempt 1
experiment Start: 1 : Student 4
experiment Start: 1 : Student 4, Attempt 1
experiment Information: 4 : Student 4, Fixed Attempt 1
experiment Start: 1 : Student 1
experiment Start: 1 : Student 1, Attempt 1
experiment Information: 4 : Student 1, Fixed Attempt 1
experiment Information: 0 : Total time: 119.186616666667
experiment Information: 5 : Fixed, Total
experiment Information: 5 : 1, 1
experiment Information: 5 : 1, 10
experiment Information: 5 : 1, 6
experiment Information: 5 : 1, 18
experiment Information: 5 : 1, 1
experiment Information: 5 : 1, 1
experiment Information: 5 : 1, 1
experiment Information: 5 : 1, 1
experiment Information: 5 : 2, 2
experiment Information: 5 : 1, 3
experiment Information: 5 : 1, 2
experiment Information: 5 : 1, 1
experiment Information: 5 : 2, 29
experiment Information: 5 : 1, 8
experiment Information: 5 : 0, 1
experiment Information: 5 : 1, 28
experiment Information: 5 : 2, 3
experiment Information: 5 : 1, 11
experiment Information: 5 : 1, 1
experiment Information: 5 : 1, 1
experiment Information: 5 : 1, 1
experiment Information: 5 : 1, 1
experiment Information: 5 : 1, 3
experiment Information: 5 : 0, 21
experiment Information: 5 : 1, 1
experiment Information: 5 : 1, 1
experiment Information: 5 : 1, 1
experiment Information: 5 : 3, 3
experiment Information: 5 : 7, 11
experiment Information: 5 : 2, 10
experiment Information: 5 : 2, 7
experiment Information: 5 : 1, 2
experiment Information: 5 : 1, 1
experiment Information: 5 : 1, 4
experiment Information: 5 : 3, 6
experiment Information: 5 : 4, 4
experiment Information: 5 : 1, 3
experiment Information: 5 : 0, 1
experiment Information: 5 : 1, 9
experiment Information: 5 : 1, 3
experiment Information: 5 : 1, 4
experiment Information: 5 : 1, 1
experiment Information: 5 : 0, 1
experiment Information: 5 : 1, 1
experiment Information: 5 : 0, 1
experiment Information: 5 : 0, 1
experiment Information: 5 : 1, 7
experiment Information: 5 : 2, 9
experiment Information: 5 : 0, 1
experiment Information: 5 : 1, 1
experiment Information: 5 : 0, 1
experiment Information: 5 : 1, 1
experiment Information: 5 : 0, 1
experiment Information: 5 : 1, 1
experiment Information: 5 : 2, 2
experiment Information: 5 : 2, 8
experiment Information: 5 : 1, 1
experiment Information: 5 : 1, 3
experiment Information: 5 : 0, 3
experiment Information: 5 : 0, 1
experiment Information: 5 : 3, 4
experiment Information: 5 : 0, 1
experiment Information: 5 : 4, 6
experiment Information: 5 : 1, 9
experiment Information: 5 : 1, 1
experiment Information: 5 : 10, 31
experiment Information: 5 : 1, 1
experiment Information: 5 : 1, 8
experiment Information: 5 : 0, 8
experiment Information: 5 : 2, 2
experiment Information: 5 : 1, 1
experiment Information: 5 : 1, 2
experiment Information: 5 : 1, 2
experiment Information: 5 : 1, 3
experiment Information: 5 : 3, 3
experiment Information: 5 : 1, 2
experiment Information: 5 : 1, 1
experiment Information: 5 : 3, 8
experiment Information: 5 : 1, 1
experiment Information: 5 : 1, 1
experiment Information: 5 : 1, 1
experiment Information: 5 : 1, 4
experiment Information: 5 : 1, 16
experiment Information: 5 : 1, 10
experiment Information: 5 : 1, 2
experiment Information: 5 : 1, 1
experiment Information: 5 : 1, 1
experiment Information: 5 : 1, 2
experiment Information: 5 : 2, 7
experiment Information: 5 : 1, 1
experiment Information: 5 : 1, 1
experiment Information: 5 : 2, 3
experiment Information: 5 : 2, 2
experiment Information: 5 : 1, 5
experiment Information: 5 : 1, 1
experiment Information: 5 : 0, 1
experiment Information: 5 : 1, 1
experiment Information: 5 : 0, 1
experiment Information: 5 : 0, 5
experiment Information: 5 : 1, 2
experiment Information: 5 : 1, 1
experiment Information: 5 : 1, 2
experiment Information: 5 : 4, 4
experiment Information: 5 : 0, 3
experiment Information: 5 : 0, 1
experiment Information: 5 : 1, 1
experiment Information: 5 : 1, 1
experiment Information: 5 : 3, 8
experiment Information: 5 : 1, 23
experiment Information: 5 : 1, 1
experiment Information: 5 : 1, 1
experiment Information: 5 : 14, 14
experiment Information: 5 : 1, 2
experiment Information: 5 : 1, 1
experiment Information: 5 : 1, 1
experiment Information: 5 : 1, 2
experiment Information: 5 : 6, 16
experiment Information: 5 : 1, 1
experiment Information: 5 : 2, 5
experiment Information: 5 : 1, 1
experiment Information: 5 : 7, 7
experiment Information: 5 : 0, 1
experiment Information: 5 : 1, 1
experiment Information: 5 : 0, 1
experiment Information: 5 : 3, 9
experiment Information: 5 : 0, 1
experiment Information: 5 : 1, 23
experiment Information: 5 : 0, 31
experiment Information: 5 : 1, 1
experiment Information: 5 : 1, 2
experiment Information: 5 : 1, 3
experiment Information: 5 : 1, 3
experiment Information: 5 : 0, 4
experiment Information: 5 : 0, 1
experiment Information: 5 : 1, 30
experiment Information: 5 : 1, 30
experiment Information: 5 : 1, 1
experiment Information: 5 : 0, 6
experiment Information: 5 : 1, 1
experiment Information: 5 : 9, 57
experiment Information: 5 : 1, 1
experiment Information: 5 : 0, 1
experiment Information: 5 : 2, 3
experiment Information: 5 : 0, 10
experiment Information: 5 : 2, 2
experiment Information: 5 : 1, 2
experiment Information: 5 : 1, 7
experiment Information: 5 : 2, 3
experiment Information: 5 : 2, 2
experiment Information: 5 : 0, 1
experiment Information: 5 : 2, 2
experiment Information: 5 : 1, 1
experiment Information: 5 : 0, 2
experiment Information: 5 : 1, 12
experiment Information: 5 : 2, 2
experiment Information: 5 : 1, 1
experiment Information: 5 : 1, 1
experiment Information: 5 : 2, 16
experiment Information: 5 : 1, 1
experiment Information: 5 : 2, 7
experiment Information: 5 : 1, 1
experiment Information: 5 : 0, 1
experiment Information: 5 : 0, 1
experiment Information: 5 : 1, 2
experiment Information: 5 : 1, 1
experiment Information: 5 : 1, 2
experiment Information: 5 : 1, 1
experiment Information: 5 : 1, 1
experiment Information: 5 : 1, 27
experiment Information: 5 : 1, 2
experiment Information: 5 : 1, 14
experiment Information: 5 : 1, 1
experiment Information: 5 : 1, 78
experiment Information: 5 : 1, 2
experiment Information: 5 : 0, 1
experiment Information: 5 : 3, 4
experiment Information: 5 : 4, 6
experiment Information: 5 : 1, 2
experiment Information: 5 : 1, 1
experiment Information: 5 : 1, 1
experiment Information: 5 : 1, 2
experiment Information: 5 : 1, 21
experiment Information: 5 : 1, 7
experiment Information: 5 : 3, 68
experiment Information: 5 : 1, 1
experiment Information: 5 : 2, 15
experiment Information: 5 : 1, 2
experiment Information: 5 : 1, 2
experiment Information: 5 : 1, 2
experiment Information: 5 : 4, 45
experiment Information: 5 : 1, 10
experiment Information: 5 : 2, 3
experiment Information: 5 : 2, 2
experiment Information: 5 : 1, 1
experiment Information: 5 : 1, 1
experiment Information: 5 : 1, 1
experiment Information: 5 : 3, 3
experiment Information: 5 : 0, 1
experiment Information: 5 : 1, 1
experiment Information: 5 : 1, 2
experiment Information: 5 : 1, 1
experiment Information: 5 : 4, 8
experiment Information: 5 : 1, 1
experiment Information: 5 : 3, 3
experiment Information: 5 : 1, 1
experiment Information: 5 : 1, 3
experiment Information: 5 : 1, 1
experiment Information: 5 : 1, 23
experiment Information: 5 : 1, 1
experiment Information: 5 : 4, 4
experiment Information: 5 : 1, 7
experiment Information: 5 : 3, 8
experiment Information: 5 : 2, 2
experiment Information: 5 : 1, 1
experiment Information: 5 : 1, 1
experiment Information: 5 : 0, 1
experiment Information: 5 : 6, 6
experiment Information: 5 : 1, 1
experiment Information: 5 : 7, 7
experiment Information: 5 : 1, 17
experiment Information: 5 : 0, 2
experiment Information: 5 : 2, 2
experiment Information: 5 : 1, 1
experiment Information: 5 : 0, 1
experiment Information: 5 : 1, 2
experiment Information: 5 : 1, 2
experiment Information: 5 : 1, 1
experiment Information: 5 : 2, 2
experiment Information: 5 : 1, 1
experiment Information: 5 : 2, 2
experiment Information: 5 : 0, 1
experiment Information: 5 : 1, 8
experiment Information: 5 : 1, 15
experiment Information: 5 : 1, 1
experiment Information: 5 : 2, 5
experiment Information: 5 : 1, 2
experiment Information: 5 : 1, 2
experiment Information: 5 : 1, 16
experiment Information: 5 : 1, 3
experiment Information: 5 : 0, 1
experiment Information: 5 : 1, 1
experiment Information: 5 : 1, 9
experiment Information: 5 : 1, 1
experiment Information: 5 : 1, 7
experiment Information: 5 : 1, 3
experiment Information: 5 : 1, 12
experiment Information: 5 : 1, 1
experiment Information: 5 : 1, 1
experiment Information: 5 : 1, 7
experiment Information: 5 : 1, 3
experiment Information: 5 : 1, 17
experiment Information: 5 : 1, 1
experiment Information: 5 : 1, 1
experiment Information: 5 : 10, 21
experiment Information: 5 : 1, 12
experiment Information: 5 : 1, 2
experiment Information: 5 : 1, 4
experiment Information: 5 : 5, 5
experiment Information: 5 : 2, 12
experiment Information: 5 : 14, 15
experiment Information: 5 : 0, 15
experiment Information: 5 : 0, 2
experiment Information: 5 : 1, 16
experiment Information: 5 : 2, 3
experiment Information: 5 : 1, 1
experiment Information: 5 : 1, 6
experiment Information: 5 : 1, 6
experiment Information: 5 : 1, 1
experiment Information: 5 : 1, 4
experiment Information: 5 : 1, 16
experiment Information: 5 : 1, 4
experiment Information: 5 : 2, 3
experiment Information: 5 : 1, 1
experiment Information: 5 : 1, 2
experiment Information: 5 : 1, 1
experiment Information: 5 : 1, 1
experiment Information: 5 : 1, 2
experiment Information: 5 : 4, 8
experiment Information: 5 : 1, 27
experiment Information: 5 : 1, 2
experiment Information: 5 : 1, 1
experiment Information: 5 : 2, 2
experiment Information: 5 : 1, 1
experiment Information: 5 : 1, 1
experiment Information: 5 : 1, 1
experiment Information: 5 : 1, 1
experiment Information: 5 : 1, 1
experiment Information: 5 : 0, 5
experiment Information: 5 : 1, 40
experiment Information: 5 : 1, 1
experiment Information: 5 : 4, 4
experiment Information: 5 : 1, 1
experiment Information: 5 : 3, 12
experiment Information: 5 : 1, 2
experiment Information: 5 : 0, 2
experiment Information: 5 : 2, 2
experiment Information: 5 : 1, 1
experiment Information: 5 : 4, 10
experiment Information: 5 : 1, 2
experiment Information: 5 : 1, 9
experiment Information: 5 : 1, 1
experiment Information: 5 : 0, 3
experiment Information: 5 : 0, 6
experiment Information: 5 : 1, 15
experiment Information: 5 : 1, 2
experiment Information: 5 : 1, 1
experiment Information: 5 : 1, 1
experiment Information: 5 : 1, 1
experiment Information: 5 : 3, 3
experiment Information: 5 : 1, 13
experiment Information: 5 : 1, 2
experiment Information: 5 : 1, 3
experiment Information: 5 : 0, 1
experiment Information: 5 : 0, 4
experiment Information: 5 : 0, 6
experiment Information: 5 : 1, 3
experiment Information: 5 : 1, 1
experiment Information: 5 : 1, 2
experiment Information: 5 : 2, 75
experiment Information: 5 : 0, 1
experiment Information: 5 : 1, 12
experiment Information: 5 : 0, 1
experiment Information: 5 : 1, 2
experiment Information: 5 : 1, 1
experiment Information: 5 : 0, 2
experiment Information: 5 : 0, 1
experiment Information: 5 : 1, 6
experiment Information: 5 : 1, 1
experiment Information: 5 : 1, 1
experiment Information: 5 : 1, 1
experiment Information: 5 : 1, 8
experiment Information: 5 : 0, 2
experiment Information: 5 : 1, 10
experiment Information: 5 : 0, 1
experiment Information: 5 : 1, 2
experiment Information: 5 : 0, 1
experiment Information: 5 : 1, 1
experiment Information: 5 : 1, 14
experiment Information: 5 : 1, 1
experiment Information: 5 : 1, 1
experiment Information: 5 : 1, 3
experiment Information: 5 : 0, 1
experiment Information: 5 : 3, 4
experiment Information: 5 : 1, 1
experiment Information: 5 : 1, 7
experiment Information: 5 : 1, 1
experiment Information: 5 : 2, 5
experiment Information: 5 : 1, 1
experiment Information: 5 : 1, 1
experiment Information: 5 : 1, 1
experiment Information: 5 : 3, 3
experiment Information: 5 : 3, 5
experiment Information: 5 : 1, 1
experiment Information: 5 : 6, 10
experiment Information: 5 : 1, 32
experiment Information: 5 : 6, 11
experiment Information: 5 : 1, 31
experiment Information: 5 : 1, 1
experiment Information: 5 : 1, 7
experiment Information: 5 : 1, 1
experiment Information: 5 : 2, 6
experiment Information: 5 : 5, 6
experiment Information: 5 : 0, 5
experiment Information: 5 : 4, 7
experiment Information: 5 : 1, 1
experiment Information: 5 : 0, 1
experiment Information: 5 : 2, 2
experexperiment Start: 6 : Learning scripts from existing classification
experiment Information: 6 : Number of clusters: 163
experiment Information: 6 : Learning cluster 1 with mistakes: 1
experiment Information: 6 : Learning cluster 2 with mistakes: 1
experiment Information: 6 : Learning cluster 3 with mistakes: 1
experiment Information: 6 : Learning cluster 4 with mistakes: 1
experiment Information: 6 : Learning cluster 5 with mistakes: 1
experiment Information: 6 : Learning cluster 6 with mistakes: 53
experiment Information: 6 : Learning cluster 7 with mistakes: 6
experiment Information: 6 : Learning cluster 8 with mistakes: 1
experiment Information: 6 : Learning cluster 9 with mistakes: 4
experiment Information: 6 : Learning cluster 10 with mistakes: 5
experiment Information: 6 : Learning cluster 11 with mistakes: 1
experiment Information: 6 : Learning cluster 12 with mistakes: 1
experiment Information: 6 : Learning cluster 13 with mistakes: 11
experiment Information: 6 : Learning cluster 14 with mistakes: 1
experiment Information: 6 : Learning cluster 15 with mistakes: 1
experiment Information: 6 : Learning cluster 16 with mistakes: 1
experiment Information: 6 : Learning cluster 17 with mistakes: 1
experiment Information: 6 : Learning cluster 18 with mistakes: 2
experiment Information: 6 : Learning cluster 19 with mistakes: 4
experiment Information: 6 : Learning cluster 20 with mistakes: 1
experiment Information: 6 : Learning cluster 21 with mistakes: 1
experiment Information: 6 : Learning cluster 22 with mistakes: 6
experiment Information: 6 : Learning cluster 23 with mistakes: 1
experiment Information: 6 : Learning cluster 24 with mistakes: 1
experiment Information: 6 : Learning cluster 25 with mistakes: 1
experiment Information: 6 : Learning cluster 26 with mistakes: 4
experiment Information: 6 : Learning cluster 27 with mistakes: 11
experiment Information: 6 : Learning cluster 28 with mistakes: 1
experiment Information: 6 : Learning cluster 29 with mistakes: 1
experiment Information: 6 : Learning cluster 30 with mistakes: 1
experiment Information: 6 : Learning cluster 31 with mistakes: 1
experiment Information: 6 : Learning cluster 32 with mistakes: 1
experiment Information: 6 : Learning cluster 33 with mistakes: 5
experiment Information: 6 : Learning cluster 34 with mistakes: 16
experiment Information: 6 : Learning cluster 35 with mistakes: 1
experiment Information: 6 : Learning cluster 36 with mistakes: 1
experiment Information: 6 : Learning cluster 37 with mistakes: 1
experiment Information: 6 : Learning cluster 38 with mistakes: 1
experiment Information: 6 : Learning cluster 39 with mistakes: 1
experiment Information: 6 : Learning cluster 40 with mistakes: 2
experiment Information: 6 : Learning cluster 41 with mistakes: 1
experiment Information: 6 : Learning cluster 42 with mistakes: 1
experiment Information: 6 : Learning cluster 43 with mistakes: 1
experiment Information: 6 : Learning cluster 44 with mistakes: 5
experiment Information: 6 : Learning cluster 45 with mistakes: 1
experiment Information: 6 : Learning cluster 46 with mistakes: 1
experiment Information: 6 : Learning cluster 47 with mistakes: 2
experiment Information: 6 : Learning cluster 48 with mistakes: 1
experiment Information: 6 : Learning cluster 49 with mistakes: 1
experiment Information: 6 : Learning cluster 50 with mistakes: 5
experiment Information: 6 : Learning cluster 51 with mistakes: 2
experiment Information: 6 : Learning cluster 52 with mistakes: 2
experiment Information: 6 : Learning cluster 53 with mistakes: 1
experiment Information: 6 : Learning cluster 54 with mistakes: 1
experiment Information: 6 : Learning cluster 55 with mistakes: 2
experiment Information: 6 : Learning cluster 56 with mistakes: 1
experiment Information: 6 : Learning cluster 57 with mistakes: 1
experiment Information: 6 : Learning cluster 58 with mistakes: 1
experiment Information: 6 : Learning cluster 59 with mistakes: 1
experiment Information: 6 : Learning cluster 60 with mistakes: 2
experiment Information: 6 : Learning cluster 61 with mistakes: 4
experiment Information: 6 : Learning cluster 62 with mistakes: 1
experiment Information: 6 : Learning cluster 63 with mistakes: 1
experiment Information: 6 : Learning cluster 64 with mistakes: 1
experiment Information: 6 : Learning cluster 65 with mistakes: 1
experiment Information: 6 : Learning cluster 66 with mistakes: 1
experiment Information: 6 : Learning cluster 67 with mistakes: 1
experiment Information: 6 : Learning cluster 68 with mistakes: 1
experiment Information: 6 : Learning cluster 69 with mistakes: 4
experiment Information: 6 : Learning cluster 70 with mistakes: 3
experiment Information: 6 : Learning cluster 71 with mistakes: 1
experiment Information: 6 : Learning cluster 72 with mistakes: 1
experiment Information: 6 : Learning cluster 73 with mistakes: 1
experiment Information: 6 : Learning cluster 74 with mistakes: 2
experiment Information: 6 : Learning cluster 75 with mistakes: 1
experiment Information: 6 : Learning cluster 76 with mistakes: 1
experiment Information: 6 : Learning cluster 77 with mistakes: 2
experiment Information: 6 : Learning cluster 78 with mistakes: 1
experiment Information: 6 : Learning cluster 79 with mistakes: 1
experiment Information: 6 : Learning cluster 80 with mistakes: 1
experiment Information: 6 : Learning cluster 81 with mistakes: 2
experiment Information: 6 : Learning cluster 82 with mistakes: 1
experiment Information: 6 : Learning cluster 83 with mistakes: 1
experiment Information: 6 : Learning cluster 84 with mistakes: 1
experiment Information: 6 : Learning cluster 85 with mistakes: 2
experiment Information: 6 : Learning cluster 86 with mistakes: 1
experiment Information: 6 : Learning cluster 87 with mistakes: 1
experiment Information: 6 : Learning cluster 88 with mistakes: 1
experiment Information: 6 : Learning cluster 89 with mistakes: 1
experiment Information: 6 : Learning cluster 90 with mistakes: 1
experiment Information: 6 : Learning cluster 91 with mistakes: 1
experiment Information: 6 : Learning cluster 92 with mistakes: 1
experiment Information: 6 : Learning cluster 93 with mistakes: 1
experiment Information: 6 : Learning cluster 94 with mistakes: 1
experiment Information: 6 : Learning cluster 95 with mistakes: 1
experiment Information: 6 : Learning cluster 96 with mistakes: 1
experiment Information: 6 : Learning cluster 97 with mistakes: 1
experiment Information: 6 : Learning cluster 98 with mistakes: 1
experiment Information: 6 : Learning cluster 99 with mistakes: 2
experiment Information: 6 : Learning cluster 100 with mistakes: 1
experiment Information: 6 : Learning cluster 101 with mistakes: 1
experiment Information: 6 : Learning cluster 102 with mistakes: 1
experiment Information: 6 : Learning cluster 103 with mistakes: 1
experiment Information: 6 : Learning cluster 104 with mistakes: 1
experiment Information: 6 : Learning cluster 105 with mistakes: 1
experiment Information: 6 : Learning cluster 106 with mistakes: 1
experiment Information: 6 : Learning cluster 107 with mistakes: 1
experiment Information: 6 : Learning cluster 108 with mistakes: 1
experiment Information: 6 : Learning cluster 109 with mistakes: 1
experiment Information: 6 : Learning cluster 110 with mistakes: 1
experiment Information: 6 : Learning cluster 111 with mistakes: 1
experiment Information: 6 : Learning cluster 112 with mistakes: 1
experiment Information: 6 : Learning cluster 113 with mistakes: 1
experiment Information: 6 : Learning cluster 114 with mistakes: 1
experiment Information: 6 : Learning cluster 115 with mistakes: 2
experiment Information: 6 : Learning cluster 116 with mistakes: 1
experiment Information: 6 : Learning cluster 117 with mistakes: 1
experiment Information: 6 : Learning cluster 118 with mistakes: 1
experiment Information: 6 : Learning cluster 119 with mistakes: 1
experiment Information: 6 : Learning cluster 120 with mistakes: 1
experiment Information: 6 : Learning cluster 121 with mistakes: 1
experiment Information: 6 : Learning cluster 122 with mistakes: 1
experiment Information: 6 : Learning cluster 123 with mistakes: 1
experiment Information: 6 : Learning cluster 124 with mistakes: 1
experiment Information: 6 : Learning cluster 125 with mistakes: 1
experiment Information: 6 : Learning cluster 126 with mistakes: 1
experiment Information: 6 : Learning cluster 127 with mistakes: 1
experiment Information: 6 : Learning cluster 128 with mistakes: 1
experiment Information: 6 : Learning cluster 129 with mistakes: 1
experiment Information: 6 : Learning cluster 130 with mistakes: 1
experiment Information: 6 : Learning cluster 131 with mistakes: 1
experiment Information: 6 : Learning cluster 132 with mistakes: 1
experiment Information: 6 : Learning cluster 133 with mistakes: 1
experiment Information: 6 : Learning cluster 134 with mistakes: 1
experiment Information: 6 : Learning cluster 135 with mistakes: 1
experiment Information: 6 : Learning cluster 136 with mistakes: 1
experiment Information: 6 : Learning cluster 137 with mistakes: 1
experiment Information: 6 : Learning cluster 138 with mistakes: 1
experiment Information: 6 : Learning cluster 139 with mistakes: 1
experiment Information: 6 : Learning cluster 140 with mistakes: 1
experiment Information: 6 : Learning cluster 141 with mistakes: 1
experiment Information: 6 : Learning cluster 142 with mistakes: 1
experiment Information: 6 : Learning cluster 143 with mistakes: 1
experiment Information: 6 : Learning cluster 144 with mistakes: 1
experiment Information: 6 : Learning cluster 145 with mistakes: 1
experiment Information: 6 : Learning cluster 146 with mistakes: 1
experiment Information: 6 : Learning cluster 147 with mistakes: 1
experiment Information: 6 : Learning cluster 148 with mistakes: 1
experiment Information: 6 : Learning cluster 149 with mistakes: 1
experiment Information: 6 : Learning cluster 150 with mistakes: 1
experiment Information: 6 : Learning cluster 151 with mistakes: 1
experiment Information: 6 : Learning cluster 152 with mistakes: 1
experiment Information: 6 : Learning cluster 153 with mistakes: 1
experiment Information: 6 : Learning cluster 154 with mistakes: 1
experiment Information: 6 : Learning cluster 155 with mistakes: 1
experiment Information: 6 : Learning cluster 156 with mistakes: 1
experiment Information: 6 : Learning cluster 157 with mistakes: 1
experiment Information: 6 : Learning cluster 158 with mistakes: 1
experiment Information: 6 : Learning cluster 159 with mistakes: 1
experiment Information: 6 : Learning cluster 160 with mistakes: 1
experiment Information: 6 : Learning cluster 161 with mistakes: 1
experiment Information: 6 : Learning cluster 162 with mistakes: 1
experiment Information: 6 : Learning cluster 163 with mistakes: 1
experiment Stop: 6 : Learning scripts from existing classification
experiment Start: 1 : Submission 1
experiment Start: 1 : Submission 159
experiment Start: 1 : Submission 80
experiment Start: 1 : Submission 238
experiment Start: 1 : Submission 317
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """

    if n <= 3:
    	return n
    else:
    	return g(n-1) + 2* g * (n-2) + 3 * g * (n-3)


 
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """

    if n <= 3:
    	return n
    else:
    	return g(n-1) + 2 * g(n-2) + 3 * g(n-3)



experiment Start: 1 : Submission 2
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    def helper(j):
    	if n <= 3:
    		return n
    	else:
    		g(n-1) + 2*g(n-2) + 3*g(n-3)
    return helper(1)

 
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    if n <= 3:
    	return n
    else:
    	return g(n-1) + 2*g(n-2) + 3*g(n-3)


experiment Start: 1 : Submission 3
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """

    minusnum=1
    addnum=2   
    def secondcase(n, minusnum, addnum):
        if n<=3:
            return n
        elif minusnum==3:
            return secondcase(n-minusnum, minusnum+1, addnum)
        elif minusnum>3:
            return 1
        else:
            return (secondcase(n-minusnum, minusnum, addnum)+ addnum)*secondcase(n-(minusnum+1), minusnum+1, addnum+1)
    return secondcase(n, minusnum, addnum)

 
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    
    if n<=3:
        return n
    else:
        return g(n-1)+2 * g(n-2)+3 * g(n-3) 
    
    


experiment Start: 1 : Submission 4
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    i = 2
    k = 3
    j = 4
    if n > 3: 
        n = n - 1
        while n > 0:
            return g(n) + i * g(n-1) + k * g(n-2) + j
            i += 1
            k += 1
            j += 1
    else: 
        return n


 
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """

    if n <= 3: 
        return n
    else:
        return g(n-1) + 2*g(n-2) + 3*g(n-3)




experiment Start: 1 : Submission 5
experiment Start: 1 : Submission 8
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.
    G(n) = n,                                          if n <= 3
    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),     if n > 3

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    k = 0
    if n <= 3:
        return n
    if n > 3:
        return g(n-1) + (k + 1)*(g(n-2))

    "*** YOUR CODE HERE ***"

 
def g(n):
    """Return the value of G(n), computed recursively.
    G(n) = n,                                          if n <= 3
    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),     if n > 3

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    k = 1
    if n <= 3:
        return n
    if n > 3:
        return g(n-1) + (k + 1)*(g(n-2)) + (k + 2)*(g(n-3))

    "*** YOUR CODE HERE ***"


experiment Start: 1 : Submission 6
experiment Start: 1 : Submission 81
experiment Start: 1 : Submission 160
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    result = 0
    if n <= 0:
        result = 0
    if n<=3:
        result = n
    else: 
        result = (n-1)*g(n-1) + result
    return result

 
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    k = 1
    result = 0
    if n <= 0:
        result = 0
    if n<=3:
        result = n
    else: 
        result = k*g(n-k) + (k+1)*g(n-(k+1)) + (k+2)*g(n-(k+2))
    return result


experiment Start: 1 : Submission 82
experiment Start: 1 : Submission 239
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    if n <= 3:
        return (n-1)*n
    else:
        return g(n-1) + n

 
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    if n < 4:
        return n
    else:
        return g(n-1) + 2 * g(n-2) + 3 * g(n-3)


experiment Start: 1 : Submission 161
experiment Information: 4 : Program fixed: 161
experiment Start: 1 : Submission 162
experiment Start: 1 : Submission 318
experiment Information: 4 : Program fixed: 239
experiment Start: 1 : Submission 240
experiment Information: 4 : Program fixed: 238
experiment Start: 1 : Submission 242
experiment Start: 1 : Submission 9
experiment Information: 4 : Program fixed: 160
experiment Start: 1 : Submission 163
experiment Start: 1 : Submission 84
experiment Start: 1 : Submission 165
experiment Start: 1 : Submission 244
experiment Information: 4 : Program fixed: 9
experiment Start: 1 : Submission 10
experiment Information: 4 : Program fixed: 317
experiment Start: 1 : Submission 12
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    if n <= 3:
        return n
    else:
        return (n-1)*g(n-1) + 1

 
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    if n <= 3:
        return n
    else:
        return g(n-1) + 2*g(n-2) + 3*g(n-3)


experiment Start: 1 : Submission 11
experiment Information: 4 : Program fixed: 12
experiment Start: 1 : Submission 13
experiment Information: 4 : Program fixed: 162
experiment Start: 1 : Submission 166
experiment Information: 4 : Program fixed: 81
experiment Start: 1 : Submission 85
experiment Information: 4 : Program fixed: 240
experiment Start: 1 : Submission 241
experiment Start: 1 : Submission 14
experiment Information: 4 : Program fixed: 84
experiment Start: 1 : Submission 87
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    if n <= 3:
        return n
    else:
        return g(n-1) + 2*g(n-2) + n
        


 
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    if n <= 3:
        return n
    else:
        return g(n-1) + 2*g(n-2) + 3*g(n-3)
        



experiment Start: 1 : Submission 15
experiment Start: 1 : Submission 19
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n >= 3:
        return g(n-1) + 2*g(n-2) + 3*g(n-3)
    else:
        return n


 
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n > 3:
        return g(n-1) + 2*g(n-2) + 3*g(n-3)
    else:
        return n



experiment Start: 1 : Submission 170
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    
    other_num=1
    if n<=3:
        return (n)
    else:
        i+=1
        other_num+=1
        return (g(n-1))+g(n-other_num)*2+(g(n-3))*3
        

 
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    
    other_num=1
    if n<=3:
        return (n)
    else:
        other_num+=1
        return (g(n-1))+g(n-other_num)*2+(g(n-3))*3
        


experiment Start: 1 : Submission 20
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    def count(x):
        if x == 0:
            return 1
        if x <= 3:
            return x
        else:
            return (x+1) * count(x-1)
    return count(n)


 
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3:
        return n
    else:
        return g(n-1) + 2 * g(n-2) + 3 * g(n-3)


#G(n) = n,                                       if n <= 3
#G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3



experiment Start: 1 : Submission 22
experiment Information: 4 : Program fixed: 87
experiment Start: 1 : Submission 88
experiment Information: 4 : Program fixed: 85
experiment Start: 1 : Submission 86
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n == 1:
        return 1
    else:
        return g(n-1)

 
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <=3:
        return n
    else:
        return g(n-1) + 2*g(n-2) +3*g(n-3)


experiment Start: 1 : Submission 24
experiment Information: 4 : Program fixed: 8
experiment Start: 1 : Submission 26
experiment Information: 4 : Program fixed: 6
experiment Start: 1 : Submission 7
experiment Information: 4 : Program fixed: 241
experiment Start: 1 : Submission 245
experiment Start: 1 : Submission 89
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    i = 1
    if n <= 3:
        return n
    def ghelper(n,i):
        total = 0
        if i < n:
            total += i * g(n-i)
        else:
            return total
    return ghelper(n,i)

 
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    i = 1
    if n <= 3:
        return n
    else:
        return g(n-1)+2*g(n-2)+3*g(n-3)


experiment Start: 1 : Submission 23
experiment Start: 1 : Submission 172
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n == 0:
        return 0
    elif n == 1:
        return n
    else:
        return n * g(n-1)

 
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3:
        return n
    else:
        return g(n-1) + 2 * g(n-2) + 3 * g(n-3)


experiment Start: 1 : Submission 27
experiment Information: 4 : Program fixed: 11
experiment Start: 1 : Submission 28
experiment Information: 4 : Program fixed: 7
experiment Start: 1 : Submission 32
experiment Information: 4 : Program fixed: 20
experiment Start: 1 : Submission 21
experiment Information: 4 : Program fixed: 82
experiment Start: 1 : Submission 83
experiment Information: 0 : Input does not compile
experiment Start: 1 : Submission 90
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    g = 0
    if n <= 3:
        return n
    else:
        g = (n-1) + 2 * (n-2) + 3 * (n - 3)
        g = g + g(n-1)
        return g


 
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    G = 0
    if n <= 3:
        return n
    else:
        G = g(n-1) + 2 * g(n-2) + 3 * g(n - 3)
        return G



experiment Start: 1 : Submission 94
experiment Information: 4 : Program fixed: 24
experiment Start: 1 : Submission 25
experiment Information: 4 : Program fixed: 94
experiment Start: 1 : Submission 95
experiment Start: 1 : Submission 249
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    sum_g = 0
    i = 0
    if n <=3:
        return n
    else:
        i += 1
        sum_g = sum_g +  i * g(n-i) 
    return sum_g
 
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    sum_g = 0
    i = 0
    if n <=3:
        return n
    else:
        sum_g = sum_g + 1 * g(n-1) + 2 * g(n-2) + 3 * g(n-3) 
    return sum_g

experiment Start: 1 : Submission 29
experiment Start: 1 : Submission 40
experiment Information: 4 : Program fixed: 32
experiment Start: 1 : Submission 33
experiment Start: 1 : Submission 41
experiment Start: 1 : Submission 98
experiment Start: 1 : Submission 173
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3:
        return n
    else:
        g(n-1) + 2 * g(n-2) + 3 * g(n-3)

 
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3:
        return n
    else:
        return g(n-1) + 2 * g(n-2) + 3 * g(n-3)


experiment Start: 1 : Submission 16
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    def helper(x):
        if n <= 3:
            return n
        elif n > 3:
            return g(n-1)(x) + x+1 * g(n-2)(x) + x+2 * g(n-3)(x)
    return helper(1)

 
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    if n <= 3:
        return n
    if n > 3:
        return g(n-1) + 2 * g(n-2) + 3 * g(n - 3)


experiment Start: 1 : Submission 42
experiment Information: 4 : Program fixed: 21
experiment Start: 1 : Submission 46
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    def G_helper(n, i):
        if n <= 3:
            return n
        if n > 3:
            if i == n:
                return
            else:
                return G_helper(n-1, n-1) + 2 * G_helper(n-2, n-1) + 3 * G_helper(n-3, n-1)
    return G_helper(n, n)


 
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    if n <= 3:
        G_output = n
    if n > 3:
        G_output = g(n-1) + 2 * g(n-2) + 3 * g(n-3)
    return G_output



experiment Start: 1 : Submission 171
experiment Information: 4 : Program fixed: 40
experiment Start: 1 : Submission 50
experiment Information: 4 : Program fixed: 90
experiment Start: 1 : Submission 91
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    if n <= 3:
        return n
    total = 0
    def helper(k):
        if k == n:
            return k*(g(n-k))
        total = total + k*(g(n-k))
        k +=1
    return total


 
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    if n <= 3:
        return n
    else:
        return g(n-1) + 2 * g(n-2) + 3 * g(n-3)



experiment Start: 1 : Submission 34
experiment Information: 4 : Program fixed: 91
experiment Start: 1 : Submission 92
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    # counter = 0
    # if n > 3:
    #     return (counter + 1) * g(n - 1)
    x = 0
    x += 1 
    # print (x)
    if n <= 3:
        return n
    print (x)
    return  x * g(n - 1)

 
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3:
        return n
    return  1 * g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)


experiment Start: 1 : Submission 17
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n<=3:
        return n
    else:
        total+=g(n-1) + 2*g(n-2) + 3*g(n-3)
        return total

 
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n<=3:
        return n
    else:
        total=g(n-1) + 2*g(n-2) + 3*g(n-3)
        return total


experiment Start: 1 : Submission 52
experiment Information: 4 : Program fixed: 25
experiment Start: 1 : Submission 54
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n<=3:
        return n
    def pain(k,i,result):
        if k == n:
            return result
        print (result ,g(k-1))
    return pain(n,0,0)

 
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n<=3:
        return n
    return g(n-1)+2*g(n-2)+3*g(n-3)


experiment Start: 1 : Submission 51
experiment Information: 4 : Program fixed: 29
experiment Start: 1 : Submission 30
experiment Start: 1 : Submission 250
experiment Information: 4 : Program fixed: 54
experiment Start: 1 : Submission 55
experiment Start: 1 : Submission 58
experiment Information: 4 : Program fixed: 52
experiment Start: 1 : Submission 53
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    return g(n-1)+2*g(n-2)+3*g(n-3)

 
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n<=3:
        return n
    else:
        return g(n-1)+2*g(n-2)+3*g(n-3)


experiment Start: 1 : Submission 59
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
   


    def G(n):
        if n <= 3:
            return n
        else:
            return G(n-1) + 2*G(n-2) + 3*G(n-3)


 
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    def G(n):
        if n <= 3:
            return n
        else:
            return G(n-1) + 2*G(n-2) + 3*G(n-3)
    return G(n)


def G(n):
    if n <= 3:
        return n
    else:
        return G(n-1) + 2*G(n-2) + 3*G(n-3)



experiment Start: 1 : Submission 93
experiment Information: 4 : Program fixed: 242
experiment Start: 1 : Submission 243
experiment Start: 1 : Submission 63
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    if n == 0:
    	return 0
    elif n <= 3:
    	print(n)
    	return n + g(n-1)
    return g(n-1) + 2*g(n-2) + 3*g(n-3)

 
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    if n == 0:
    	return 0
    elif n <= 3:
    	return n 
    return g(n-1) + 2*g(n-2) + 3*g(n-3)


experiment Start: 1 : Submission 18
experiment Information: 4 : Program fixed: 171
experiment Start: 1 : Submission 174
experiment Information: 4 : Program fixed: 250
experiment Start: 1 : Submission 251
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n > 0:
        if n <= 3:
            return n
        else:
            g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)

 
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n > 0:
        if n <= 3:
            return n
        else:
            return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)


experiment Start: 1 : Submission 99
experiment Information: 4 : Program fixed: 163
experiment Start: 1 : Submission 164
experiment Information: 4 : Program fixed: 173
experiment Start: 1 : Submission 178
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3:
        return n
    def counter(i):
        if i == 4:
            return 1
        return g(n-i) + ((i+1)*g(n-(i+1)))
    return counter(1)


 
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3:
        return n
    return g(n-1) + 2*g(n-2) + 3*g(n-3)
    #def counter(i):
    #    if i == 4:
    #        return 1
    #    return g(n-i) + ((i+1)*g(n-(i+1)))
    #return counter(1)



experiment Start: 1 : Submission 56
experiment Information: 4 : Program fixed: 63
experiment Start: 1 : Submission 64
experiment Information: 4 : Program fixed: 244
experiment Start: 1 : Submission 253
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    
    if n <= 3:
        return n
    else:
        g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)

        

 
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    
    if n <= 3:
        return n
    else:
        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)

        


experiment Start: 1 : Submission 180
experiment Information: 4 : Program fixed: 166
experiment Start: 1 : Submission 167
experiment Information: 4 : Program fixed: 243
experiment Start: 1 : Submission 255
experiment Information: 4 : Program fixed: 30
experiment Start: 1 : Submission 31
experiment Start: 1 : Submission 101
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    k=0
    if k<=n:
        return n  
    else:
        k=k+1
        g(n-1)*n 

 
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n<=3:
        return n 
    if n>3:
        return g(n-1) +2*g(n-2) + 3*g(n-3)


experiment Start: 1 : Submission 254
experiment Start: 1 : Submission 182
experiment Information: 4 : Program fixed: 56
experiment Start: 1 : Submission 57
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    i = 0
    p = 0
    sum = 0
    def G(i):
        if n <= 3:
            return n
        if n > 3:
            return sum + ((i + 1) * G(n - (p - 1)))

    return G(n)

 
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """

    def G(i):
        if i <= 3:
            return i
        if i > 3:
            return G(i - 1) + 2*G(i - 2) + 3 * G(i - 3)

    return G(n)


experiment Start: 1 : Submission 60
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3:
        g = n
        return g
    else:
        k=n
        return g(k-1) + 2*g(k-2) + 3*g(k-3)
        k -= 1


 
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3:
        return n
    else:
        return g(n-1) + 2*g(n-2) + 3*g(n-3)
       



experiment Start: 1 : Submission 175
experiment Start: 1 : Submission 259
experiment Information: 4 : Program fixed: 175
experiment Start: 1 : Submission 176
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3:
        g(n) == n
        
    else: 
        g(n) == g(n-1) + 2 * g(n-2) + 3 * g(n-3)
        
 
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3:
        return n 
    else: 
        return g(n-1) + 2 * g(n-2) + 3 * g(n-3)
        

experiment Start: 1 : Submission 66
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    def recurse(n2, count, const):
        if n2<=3:
            return n2
        elif count == 1:
            return 3*g(n2-3)
        else:
            return (const * g(n2-1)) + recurse((n2-1), (count-1), (const+1))
    if n <= 3:
        return n
    else:
        return recurse(n, 3, 1)

 
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"

    if n <= 3:
        return n
    else:
        return g(n-1) + 2*g(n-2) + 3*g(n-3)



experiment Start: 1 : Submission 70
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n<=3:
        return n
    else:
        count=0
        while count<n:
            total+=count*g(n-1)
            count+=1
        return total

 
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n<=3:
        return n
    else:
        return g(n-1)+2*g(n-2)+3*g(n-3)


experiment Start: 1 : Submission 78
experiment Information: 4 : Program fixed: 255
experiment Start: 1 : Submission 256
experiment Start: 1 : Submission 102
experiment Information: 4 : Program fixed: 178
experiment Start: 1 : Submission 179
experiment Information: 4 : Program fixed: 180
experiment Start: 1 : Submission 181
experiment Information: 4 : Program fixed: 181
experiment Start: 1 : Submission 183
experiment Start: 1 : Submission 103
experiment Information: 4 : Program fixed: 182
experiment Start: 1 : Submission 187
experiment Information: 0 : Input does not compile
experiment Start: 1 : Submission 188
experiment Information: 4 : Program fixed: 259
experiment Start: 1 : Submission 260
experiment Information: 4 : Program fixed: 66
experiment Start: 1 : Submission 67
experiment Information: 4 : Program fixed: 183
experiment Start: 1 : Submission 184
experiment Information: 4 : Program fixed: 254
experiment Start: 1 : Submission 262
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    if n <= 3:
        return identity(n)
    else: 
        g(n-1) + 2 * g(n-2) + 3 * g(n-3) 

 
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    if n <= 3:
        return identity(n)
    else: 
        return g(n-1) + 2 * g(n-2) + 3 * g(n-3) 


experiment Start: 1 : Submission 104
experiment Error: 3 : Program not fixed:
before
def g(n,x):
    """Return the value of G(n), computed recursively.
    
    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n > 3:
        return g(n - 1) + 2*g(n - 2) + 3*g(n - 3)
    return n

 
def g(n):
    """Return the value of G(n), computed recursively.
    
    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n > 3:
        return g(n - 1) + 2*g(n - 2) + 3*g(n - 3)
    return n


experiment Start: 1 : Submission 257
experiment Information: 4 : Program fixed: 104
experiment Start: 1 : Submission 105
experiment Information: 0 : Input does not compile
experiment Start: 1 : Submission 106
experiment Information: 4 : Program fixed: 102
experiment Start: 1 : Submission 108
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n == 1:
        return G(1)
    else:
        return G(n) + g(n-1)

 
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3:
        return n
    else:
        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)


experiment Start: 1 : Submission 261
experiment Information: 4 : Program fixed: 188
experiment Start: 1 : Submission 189
experiment Information: 4 : Program fixed: 86
experiment Start: 1 : Submission 110
experiment Information: 4 : Program fixed: 262
experiment Start: 1 : Submission 263
experiment Information: 4 : Program fixed: 67
experiment Start: 1 : Submission 68
experiment Start: 1 : Submission 114
experiment Information: 0 : Input does not compile
experiment Start: 1 : Submission 115
experiment Information: 4 : Program fixed: 108
experiment Start: 1 : Submission 109
experiment Error: 0 : def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """

    return n if n <= 3 else g(n -1) * g(n-2) * g(n-3)

experiment Start: 1 : Submission 117
experiment Information: 4 : Program fixed: 184
experiment Start: 1 : Submission 185
experiment Information: 4 : Program fixed: 189
experiment Start: 1 : Submission 190
experiment Start: 1 : Submission 193
experiment Information: 4 : Program fixed: 190
experiment Start: 1 : Submission 191
experiment Start: 1 : Submission 266
experiment Start: 1 : Submission 121
experiment Information: 4 : Program fixed: 245
experiment Start: 1 : Submission 246
experiment Start: 1 : Submission 122
experiment Information: 4 : Program fixed: 110
experiment Start: 1 : Submission 111
experiment Information: 4 : Program fixed: 185
experiment Start: 1 : Submission 186
experiment Information: 4 : Program fixed: 111
experiment Start: 1 : Submission 112
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    if (n == 1):
        return G(n)
    return G(g(n-1))

 
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    if (n <= 3):
        return n
    return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)


experiment Start: 1 : Submission 247
experiment Start: 1 : Submission 123
experiment Information: 4 : Program fixed: 186
experiment Start: 1 : Submission 194
experiment Information: 4 : Program fixed: 106
experiment Start: 1 : Submission 107
experiment Error: 0 : def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    return n if n <= 3 else g(n) * g(n-1) * g(n-2) * g(n-3)


experiment Start: 1 : Submission 124
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    def G(n):
        if n==1:
            return 1
        if n<=3:
            return n
        if n>3:
            return G(n-1) + 2*G(n-2) + 3*G(n-3)
    return G

 
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    def G(n):
        if n<=3:
            return n
        if n>3:
            return G(n-1) + 2*G(n-2) + 3*G(n-3)
    return G(n)


experiment Start: 1 : Submission 202
experiment Information: 0 : Input does not compile
experiment Start: 1 : Submission 203
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3:
        return n
    else:
        g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)
    

 
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3:
        return n
    else:
        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)
    


experiment Start: 1 : Submission 132
experiment Information: 4 : Program fixed: 266
experiment Start: 1 : Submission 267
experiment Information: 0 : Input does not compile
experiment Start: 1 : Submission 268
experiment Error: 0 : def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    return n if n<= 3 else g(n -1) + 2


experiment Start: 1 : Submission 269
experiment Information: 4 : Program fixed: 68
experiment Start: 1 : Submission 69
experiment Information: 4 : Program fixed: 251
experiment Start: 1 : Submission 252
experiment Information: 4 : Program fixed: 60
experiment Start: 1 : Submission 61
experiment Information: 4 : Program fixed: 176
experiment Start: 1 : Submission 177
experiment Information: 4 : Program fixed: 123
experiment Start: 1 : Submission 140
experiment Information: 4 : Program fixed: 269
experiment Start: 1 : Submission 270
experiment Information: 4 : Program fixed: 164
experiment Start: 1 : Submission 204
experiment Information: 4 : Program fixed: 112
experiment Start: 1 : Submission 113
experiment Information: 4 : Program fixed: 122
experiment Start: 1 : Submission 142
experiment Information: 4 : Program fixed: 194
experiment Start: 1 : Submission 195
experiment Information: 4 : Program fixed: 113
experiment Start: 1 : Submission 144
experiment Information: 4 : Program fixed: 64
experiment Start: 1 : Submission 65
experiment Information: 4 : Program fixed: 132
experiment Start: 1 : Submission 133
experiment Information: 4 : Program fixed: 203
experiment Start: 1 : Submission 208
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    total = 1
    k = 1
    i = 2
    if n <= 3:
        return n
    else:
        total *= (g(n - k) + i)
        k += 1
        i += 1
    return total

 
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3:
        return n
    else:
        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)


experiment Start: 1 : Submission 62
experiment Information: 4 : Program fixed: 208
experiment Start: 1 : Submission 209
experiment Information: 4 : Program fixed: 177
experiment Start: 1 : Submission 212
experiment Information: 4 : Program fixed: 252
experiment Start: 1 : Submission 273
experiment Information: 4 : Program fixed: 142
experiment Start: 1 : Submission 143
experiment Information: 4 : Program fixed: 65
experiment Start: 1 : Submission 152
experiment Information: 4 : Program fixed: 95
experiment Start: 1 : Submission 96
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3:
        return n
    else:
        n -= 1
        return (n - 2) * g(n - (n - 3))



 
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3:
        return n
    else:
        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)




experiment Start: 1 : Submission 145
experiment Start: 1 : Submission 220
experiment Information: 4 : Program fixed: 204
experiment Start: 1 : Submission 205
experiment Information: 4 : Program fixed: 143
experiment Start: 1 : Submission 156
experiment Information: 4 : Program fixed: 145
experiment Start: 1 : Submission 146
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3:
    	return n
    else:
    	g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)




 
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3:
    	return n
    else:
    	return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)





experiment Start: 1 : Submission 258
experiment Error: 0 : def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n == 0:
        return
    elif n <= 3 and n > 0:
        return n
    else:
        return g(n-1) + 2*g(n-2) + g(n-3)


experiment Start: 1 : Submission 277
experiment Information: 4 : Program fixed: 62
experiment Start: 1 : Submission 221
experiment Information: 4 : Program fixed: 273
experiment Start: 1 : Submission 274
experiment Information: 0 : Input does not compile
experiment Start: 1 : Submission 275
experiment Information: 4 : Program fixed: 191
experiment Start: 1 : Submission 192
experiment Information: 4 : Program fixed: 152
experiment Start: 1 : Submission 153
experiment Information: 4 : Program fixed: 133
experiment Start: 1 : Submission 134
experiment Information: 4 : Program fixed: 249
experiment Start: 1 : Submission 285
experiment Information: 4 : Program fixed: 96
experiment Start: 1 : Submission 97
experiment Information: 4 : Program fixed: 98
experiment Start: 1 : Submission 229
experiment Information: 4 : Program fixed: 115
experiment Start: 1 : Submission 116
experiment Information: 4 : Program fixed: 209
experiment Start: 1 : Submission 210
experiment Information: 4 : Program fixed: 156
experiment Start: 1 : Submission 157
experiment Information: 4 : Program fixed: 146
experiment Start: 1 : Submission 147
experiment Start: 1 : Submission 287
experiment Information: 4 : Program fixed: 134
experiment Start: 1 : Submission 135
experiment Information: 4 : Program fixed: 147
experiment Start: 1 : Submission 148
experiment Information: 4 : Program fixed: 229
experiment Start: 1 : Submission 230
experiment Information: 4 : Program fixed: 97
experiment Start: 1 : Submission 231
experiment Information: 4 : Program fixed: 103
experiment Start: 1 : Submission 288
experiment Information: 4 : Program fixed: 231
experiment Start: 1 : Submission 232
experiment Information: 4 : Program fixed: 220
experiment Start: 1 : Submission 290
experiment Information: 4 : Program fixed: 290
experiment Start: 1 : Submission 291
experiment Information: 4 : Program fixed: 275
experiment Start: 1 : Submission 276
experiment Information: 4 : Program fixed: 34
experiment Start: 1 : Submission 35
experiment Information: 4 : Program fixed: 288
experiment Start: 1 : Submission 292
experiment Start: 1 : Submission 289
experiment Information: 4 : Program fixed: 230
experiment Start: 1 : Submission 293
experiment Information: 4 : Program fixed: 293
experiment Start: 1 : Submission 294
experiment Information: 4 : Program fixed: 276
experiment Start: 1 : Submission 297
experiment Information: 4 : Program fixed: 232
experiment Start: 1 : Submission 233
experiment Information: 4 : Program fixed: 42
experiment Start: 1 : Submission 43
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    i = n-1
    if n <= 3:
        return n
    else:
        return n + n-1 + i*(n-i)

 
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    i = n-1
    if n <= 3:
        return n
    else:
        return g(n-1)+ 2*g(n-2) + 3*g(n-3)


experiment Start: 1 : Submission 36
experiment Information: 4 : Program fixed: 46
experiment Start: 1 : Submission 47
experiment Start: 1 : Submission 305
experiment Information: 4 : Program fixed: 210
experiment Start: 1 : Submission 211
experiment Information: 0 : Input does not compile
experiment Start: 1 : Submission 306
experiment Information: 4 : Program fixed: 247
experiment Start: 1 : Submission 248
experiment Error: 0 : def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3 and n > 0:
        return n + (n-1)
    else: 
        g(n-1) + 2 * g(n-2) + 3 * g(n-3)


experiment Start: 1 : Submission 314
experiment Information: 4 : Program fixed: 148
experiment Start: 1 : Submission 149
experiment Information: 4 : Program fixed: 285
experiment Start: 1 : Submission 286
experiment Information: 4 : Program fixed: 157
experiment Start: 1 : Submission 158
experiment Information: 4 : Program fixed: 158
experiment Information: 4 : Program fixed: 297
experiment Start: 1 : Submission 298
experiment Information: 4 : Program fixed: 291
experiment Information: 4 : Program fixed: 298
experiment Start: 1 : Submission 299
experiment Information: 4 : Program fixed: 149
experiment Start: 1 : Submission 150
experiment Information: 0 : Input does not compile
experiment Start: 1 : Submission 151
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    if n <= 3:
        return n
    elif n == 4:
        return 1*g(n-1) + 2*g(n-2) + 3*g(n-3) + 4*g(n-4)
    #else:
        #return (dummy)*g(n-dummy) + (dummy+1)*g((n-2)

 
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    if n <= 3:
        return n
    else:
        return 1*g(n-1) + 2*g(n-2) + 3*g(n-3)
    #else:
        #return (dummy)*g(n-dummy) + (dummy+1)*g((n-2)


experiment Start: 1 : Submission 278
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    if n <= 3:
        return n
    else:
        g(n-1) + 2*g(n-2) + 3*g(n-3)

 
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    if n <= 3:
        return n
    else:
        return g(n-1) + 2*g(n-2) + 3*g(n-3)


experiment Start: 1 : Submission 196
experiment Information: 4 : Program fixed: 294
experiment Start: 1 : Submission 295
experiment Information: 4 : Program fixed: 58
experiment Information: 4 : Program fixed: 93
experiment Information: 4 : Program fixed: 286
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n==(1 or 2 or 3):
        return n
    else: 
        return g(n-1)+2*g(n-2)+3*g(n-3)
 
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n in [1,2,3]:
        return n
    else: 
        return g(n-1)+2*g(n-2)+3*g(n-3)

experiment Information: 4 : Program fixed: 305
experiment Information: 4 : Program fixed: 233
experiment Start: 1 : Submission 234
experiment Information: 4 : Program fixed: 299
experiment Start: 1 : Submission 300
experiment Information: 4 : Program fixed: 196
experiment Start: 1 : Submission 197
experiment Information: 4 : Program fixed: 124
experiment Start: 1 : Submission 125
experiment Information: 4 : Program fixed: 125
experiment Start: 1 : Submission 126
experiment Information: 4 : Program fixed: 289
experiment Information: 4 : Program fixed: 151
experiment Information: 4 : Program fixed: 197
experiment Start: 1 : Submission 198
experiment Information: 4 : Program fixed: 99
experiment Start: 1 : Submission 100
experiment Information: 4 : Program fixed: 234
experiment Start: 1 : Submission 235
experiment Information: 4 : Program fixed: 126
experiment Start: 1 : Submission 127
experiment Error: 0 : def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n >= 0 and n<=3:
        return n
    else:
        return n-1 * g(n-1)


experiment Start: 1 : Submission 128
experiment Information: 4 : Program fixed: 314
experiment Start: 1 : Submission 315
experiment Information: 0 : Input does not compile
experiment Start: 1 : Submission 316
experiment Information: 0 : Input does not compile
experiment Information: 4 : Program fixed: 235
experiment Start: 1 : Submission 236
experiment Information: 4 : Program fixed: 167
experiment Start: 1 : Submission 168
experiment Information: 4 : Program fixed: 116
experiment Information: 4 : Program fixed: 101
experiment Information: 4 : Program fixed: 100
experiment Information: 4 : Program fixed: 300
experiment Start: 1 : Submission 301
experiment Error: 0 : def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    a,b,c=1,2,3
    if n<=3:
        return n
    else:
        a,b,c=a+1,2*(a+b),3*(a+b+c)
        n-=1
    return (a+c)//2


experiment Start: 1 : Submission 302
experiment Information: 4 : Program fixed: 292
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3:
        return n
    else:
        g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)

 
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3:
        return n
    else:
        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)


experiment Start: 1 : Submission 37
experiment Information: 4 : Program fixed: 37
experiment Start: 1 : Submission 38
experiment Information: 4 : Program fixed: 236
experiment Start: 1 : Submission 237
experiment Information: 4 : Program fixed: 78
experiment Start: 1 : Submission 79
experiment Information: 4 : Program fixed: 70
experiment Start: 1 : Submission 71
experiment Information: 0 : Input does not compile
experiment Information: 4 : Program fixed: 168
experiment Start: 1 : Submission 169
experiment Information: 4 : Program fixed: 179
experiment Information: 4 : Program fixed: 295
experiment Start: 1 : Submission 296
experiment Information: 4 : Program fixed: 71
experiment Start: 1 : Submission 72
experiment Information: 4 : Program fixed: 263
experiment Start: 1 : Submission 264
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    def g_recursive(n):
        if n <= 0:
            return 0
        if n <= 3:
            return n
        else:
            return g_recursive(n - 1) + 2 * g_recursive(n - 2) + 3 * g_recursive(n - 3)
    return g_recursive

    

 
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    def g_recursive(n):
        if n <= 0:
            return 0
        if n <= 3:
            return n
        else:
            return g_recursive(n - 1) + 2 * g_recursive(n - 2) + 3 * g_recursive(n - 3)
    return g_recursive(n)

    


experiment Information: 4 : Program fixed: 261
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """

    if n <= 3:
        return n
    else:
        n = n + g(n - 1)

 
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3:
        return n
    if n > 3:
        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)


experiment Start: 1 : Submission 265
experiment Information: 4 : Program fixed: 296
experiment Information: 4 : Program fixed: 117
experiment Start: 1 : Submission 118
experiment Information: 4 : Program fixed: 265
experiment Information: 4 : Program fixed: 69
experiment Information: 4 : Program fixed: 121
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    def helper(x):
        if x <=3:
            return x
        elif x<=5:
            helper(x-1) + 2 * helper(x-2) + 3 * helper(x-3)

    return helper(n)


    #G(n) = n,                                       if n <= 3
    #G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3

 
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    def helper(x):
        if x <=3:
            return x
        else:
            return helper(x-1) + 2 * helper(x-2) + 3* helper(x-3)

    return helper(n)


    #G(n) = n,                                       if n <= 3
    #G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3


experiment Start: 1 : Submission 119
experiment Information: 4 : Program fixed: 140
experiment Start: 1 : Submission 141
experiment Information: 4 : Program fixed: 270
experiment Start: 1 : Submission 271
experiment Information: 4 : Program fixed: 72
experiment Start: 1 : Submission 73
experiment Information: 4 : Program fixed: 212
experiment Start: 1 : Submission 213
experiment Information: 4 : Program fixed: 205
experiment Start: 1 : Submission 206
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3:
        return n
    return 

 
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3:
        return n
    return g(n-1) + 2 * g(n - 2) + 3 * g(n - 3)


experiment Start: 1 : Submission 214
experiment Information: 4 : Program fixed: 119
experiment Start: 1 : Submission 120
experiment Information: 4 : Program fixed: 120
experiment Information: 4 : Program fixed: 206
experiment Start: 1 : Submission 207
experiment Information: 4 : Program fixed: 221
experiment Start: 1 : Submission 222
experiment Information: 4 : Program fixed: 222
experiment Start: 1 : Submission 223
experiment Information: 4 : Program fixed: 214
experiment Start: 1 : Submission 215
experiment Information: 4 : Program fixed: 271
experiment Start: 1 : Submission 272
experiment Information: 4 : Program fixed: 272
experiment Information: 4 : Program fixed: 153
experiment Start: 1 : Submission 154
experiment Information: 4 : Program fixed: 73
experiment Start: 1 : Submission 74
experiment Information: 4 : Program fixed: 154
experiment Start: 1 : Submission 155
experiment Information: 4 : Program fixed: 215
experiment Start: 1 : Submission 216
experiment Information: 4 : Program fixed: 141
experiment Information: 4 : Program fixed: 207
experiment Information: 4 : Program fixed: 287
experiment Information: 4 : Program fixed: 135
experiment Start: 1 : Submission 136
experiment Information: 4 : Program fixed: 223
experiment Start: 1 : Submission 224
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    counter = 0
    if n <= 3:
        return n
    else:
        counter += 1
        counter * g(n-1)

 
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    
    if n <= 3:
        return n
    else:
        return g(n-1) + 2 * g(n - 2) + 3 * g(n - 3)



experiment Information: 4 : Program fixed: 47
experiment Start: 1 : Submission 48
experiment Information: 4 : Program fixed: 43
experiment Start: 1 : Submission 44
experiment Information: 0 : Input does not compile
experiment Start: 1 : Submission 45
experiment Information: 4 : Program fixed: 216
experiment Start: 1 : Submission 217
experiment Information: 4 : Program fixed: 306
experiment Start: 1 : Submission 307
experiment Information: 4 : Program fixed: 278
experiment Start: 1 : Submission 279
experiment Information: 4 : Program fixed: 279
experiment Start: 1 : Submission 280
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    def help(i):
        if n <= 3:
            return n
        else:
            return g(n-1) + 2*g(n-2) + 3*g(n-3)

 
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3:
        return n
    else:
        return g(n-1) + 2*g(n-2) + 3*g(n-3)



experiment Start: 1 : Submission 225
experiment Information: 0 : Input does not compile
experiment Start: 1 : Submission 226
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3:
        return n
    else:
        a = 0
        b = 0
        c = 0
        a + (2*b) + (3*c)

        

 
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n <= 3:
        return n
    else:
       return g(n - 1) + 2*g(n - 2) + 3*g(n - 3)

        


experiment Start: 1 : Submission 308
experiment Information: 0 : Input does not compile
experiment Start: 1 : Submission 309
experiment Information: 4 : Program fixed: 198
experiment Start: 1 : Submission 199
experiment Information: 4 : Program fixed: 128
experiment Start: 1 : Submission 129
experiment Information: 4 : Program fixed: 217
experiment Start: 1 : Submission 218
experiment Information: 4 : Program fixed: 309
experiment Start: 1 : Submission 310
experiment Information: 4 : Program fixed: 199
experiment Start: 1 : Submission 200
experiment Information: 4 : Program fixed: 302
experiment Start: 1 : Submission 303
experiment Information: 4 : Program fixed: 38
experiment Start: 1 : Submission 39
experiment Information: 0 : Input does not compile
experiment Information: 4 : Program fixed: 237
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    
    if n <= 3:
        return n
    else:
        g(n-1) + 2 * g(n-2) + 3*g(n-3)


 
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    
    if n <= 3:
        return n
    else:
        return g(n-1) + 2 * g(n-2) + 3*g(n-3)



experiment Start: 1 : Submission 49
experiment Information: 4 : Program fixed: 49
experiment Information: 4 : Program fixed: 200
experiment Start: 1 : Submission 201
experiment Information: 4 : Program fixed: 74
experiment Start: 1 : Submission 75
experiment Information: 4 : Program fixed: 303
experiment Start: 1 : Submission 304
experiment Information: 4 : Program fixed: 136
experiment Start: 1 : Submission 137
experiment Information: 4 : Program fixed: 304
experiment Information: 4 : Program fixed: 45
experiment Information: 4 : Program fixed: 218
experiment Start: 1 : Submission 219
experiment Information: 4 : Program fixed: 129
experiment Start: 1 : Submission 130
experiment Information: 4 : Program fixed: 201
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    def recursion_3(n, total=0):
        if n==0:
            return total
        total += n
        return recursion_3(n-1,total)
    def recursion_complex(n,i,total=0):
        if n==0:
            return total
        total+= (i-n)*n
        return recursion_complex(n-1,i,total)
    if n<=3:
        return recursion_3(n)
    else:
        return recursion_complex(n-1,n)

 
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n<=3:
        return n
    else:
        return g(n-1) + 2*g(n-2) + 3*g(n-3)


experiment Start: 1 : Submission 311
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
#    if n <= 3:
#        return n
#    else:
#        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)
    sum = 0
    if n <= 3:
        return n
    else:
        for i in range(1,4):
            sum = sum + i * g_iter(n-i)
        return sum


 
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    if n <= 3:
        return n
    else:
        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)


experiment Start: 1 : Submission 138
experiment Information: 4 : Program fixed: 75
experiment Start: 1 : Submission 76
experiment Information: 4 : Program fixed: 311
experiment Start: 1 : Submission 312
experiment Information: 4 : Program fixed: 76
experiment Start: 1 : Submission 77
experiment Information: 4 : Program fixed: 138
experiment Start: 1 : Submission 139
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    if n <= 3:
        return n
    else:
        g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)
 
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    if n <= 3:
        return n
    return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)

experiment Start: 1 : Submission 131
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)

 
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    if n<= 3:
        return n
    if n > 3:
        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)


experiment Start: 1 : Submission 227
experiment Information: 0 : Input does not compile
experiment Start: 1 : Submission 228
experiment Information: 4 : Program fixed: 139
experiment Information: 4 : Program fixed: 219
experiment Information: 4 : Program fixed: 228
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    if n <= 3:
        return n
    else:
        g(n-1) + 2*g(n-2) + 3*(n-3)


 
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    if n <= 3:
        return n
    else:
        return g(n-1) + 2*g(n-2) + 3*(n-3)



experiment Information: 4 : Program fixed: 312
experiment Start: 1 : Submission 313
experiment Information: 4 : Program fixed: 77
experiment Information: 4 : Program fixed: 313
experiment Information: 4 : Program fixed: 280
experiment Start: 1 : Submission 281
experiment Error: 3 : Program not fixed:
before
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    if n < 3:
        return 3
    elif n == 2:
        return 2
    elif n == 1:
        return 1
    else:
        return g(n-1) + (2 * g(n-2)) + (3* g(n-3))

 
def g(n):
    """Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    """
    "*** YOUR CODE HERE ***"
    if n == 3:
        return 3
    elif n == 2:
        return 2
    elif n == 1:
        return 1
    else:
        return g(n-1) + (2 * g(n-2)) + (3* g(n-3))


experiment Start: 1 : Submission 282
experiment Information: 4 : Program fixed: 282
experiment Start: 1 : Submission 283
experiment Information: 4 : Program fixed: 283
experiment Start: 1 : Submission 284
experiment Information: 4 : Program fixed: 284
experiment Information: 0 : Total time: 48.4460833333333
experiment Information: 5 : Total submissions: 318
experiment Information: 5 : input does not compile: 17
experiment Information: 5 : Fixed: 230
experiment Information: 5 : Not Fixed: 88
experiment Information: 5 : parser not implemented: 7
experiment Information: 5 : Total of groups: 163
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), InOrderSort(ast))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, ConstNode(ReturnStatementNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ExpressionStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), Tutor.synthesis.MagicK)))), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))), Tutor.synthesis.MagicK), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), InOrderSort(ast))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(FunctionDefinitionNode-secondcase, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(FunctionDefinitionNode-secondcase, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChildren(Node(FunctionDefinitionNode-secondcase, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(FunctionDefinitionNode-secondcase, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChildren(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChildren(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(LeafWildcard("NameExpressionNode")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(LeafWildcard("NameExpressionNode")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(LeafWildcard("NameExpressionNode")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK))))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Target(Node(FunctionDefinitionNode-secondcase, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(FunctionDefinitionNode-secondcase, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(FunctionDefinitionNode-secondcase, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(FunctionDefinitionNode-secondcase, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(FunctionDefinitionNode-secondcase, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), InOrderSort(ast)))))))))))))))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(LeafWildcard("NameExpressionNode")))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(LeafWildcard("NameExpressionNode")))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(LeafWildcard("NameExpressionNode")))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(LeafWildcard("NameExpressionNode")))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(LeafWildcard("NameExpressionNode")))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(LeafWildcard("NameExpressionNode")))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(LeafWildcard("NameExpressionNode")))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(ReturnStatementNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK)))), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK)))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(LeafWildcard("NameExpressionNode")))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(LeafWildcard("NameExpressionNode"))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), TChild(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(LeafWildcard("NameExpressionNode"))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(LeafWildcard("NameExpressionNode")))))), TChildren(Target(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(LeafWildcard("NameExpressionNode")))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(LeafWildcard("NameExpressionNode")))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Target(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(LeafWildcard("NameExpressionNode")))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(LeafWildcard("NameExpressionNode")))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(LeafWildcard("NameExpressionNode")))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(LeafWildcard("NameExpressionNode")))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(LeafWildcard("NameExpressionNode")))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(LeafWildcard("NameExpressionNode")))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(LeafWildcard("NameExpressionNode")))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(LeafWildcard("NameExpressionNode")))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(LeafWildcard("NameExpressionNode")))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast)))))))))))))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(ConstNode(ParenthesisExpressionNode, SingleChild(ConstNode(BinaryExpressionNode-Add, Children(LeafConstNode(NameExpressionNode-k), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))), SingleChild(ConstNode(ParenthesisExpressionNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 53
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 6
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\x => Match(x, StartsWithTarget(Target(LeafWildcard("ConstantExpressionNode")))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK)))))))), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))))))))
experiment Information: 5 : Number of mistakes: 4
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(LeafWildcard("BinaryExpressionNode"))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithTarget(Target(LeafWildcard("any")))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithTarget(Target(LeafWildcard("any"))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithTarget(Target(LeafWildcard("any")))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 5
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))))))), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(FunctionDefinitionNode-count, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-count, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-3)))), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, Children(ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChild(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-count, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-count, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-count, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), InOrderSort(ast)))))))))))))))))))))))))))))
experiment Information: 5 : Number of mistakes: 11
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Update(node, ConstNode(ReturnStatementNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ExpressionStatementNode, TChild(Target(LeafWildcard("any"))))), Tutor.synthesis.MagicK)))), Selected(\x => Match(x, StartsWithTarget(Target(Node(ExpressionStatementNode, TChild(LeafWildcard("any")))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(PrintStatementNode, TChild(Node(ParenthesisExpressionNode, TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(PrintStatementNode, TChild(Node(ParenthesisExpressionNode, TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Target(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(PrintStatementNode, TChild(Node(ParenthesisExpressionNode, TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(PrintStatementNode, TChild(Node(ParenthesisExpressionNode, TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Target(Node(PrintStatementNode, TChild(Node(ParenthesisExpressionNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(PrintStatementNode, TChild(Node(ParenthesisExpressionNode, TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(PrintStatementNode, TChild(Node(ParenthesisExpressionNode, TChild(LeafWildcard("NameExpressionNode"))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(PrintStatementNode, TChild(Node(ParenthesisExpressionNode, TChild(LeafWildcard("NameExpressionNode"))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))), InOrderSort(ast))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(PrintStatementNode, TChild(Node(ParenthesisExpressionNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(PrintStatementNode, TChild(Node(ParenthesisExpressionNode, TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(PrintStatementNode, TChild(Node(ParenthesisExpressionNode, TChild(LeafWildcard("NameExpressionNode"))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(PrintStatementNode, TChild(Node(ParenthesisExpressionNode, TChild(LeafWildcard("NameExpressionNode"))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChildren(Target(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ParenthesisExpressionNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChildren(Target(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Target(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(ParenthesisExpressionNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), Tutor.synthesis.MagicK))))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(FunctionDefinitionNode-recurse, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-recurse, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))), Tutor.synthesis.MagicK), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-recurse, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-recurse, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))))))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-recurse, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))), InOrderSort(ast))))))))))))))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-3))))), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), InOrderSort(ast)))))))))
experiment Information: 5 : Number of mistakes: 2
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("any"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard("any")))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithTarget(Target(LeafWildcard("NameExpressionNode"))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard("any")))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 4
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), TChildren(Node(FunctionDefinitionNode-ghelper, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(FunctionDefinitionNode-ghelper, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-LessThan, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))))))), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(SuiteStatementNode, TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Target(Node(FunctionDefinitionNode-ghelper, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(FunctionDefinitionNode-ghelper, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-3)))), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, Children(ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChild(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))))))))), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(FunctionDefinitionNode-ghelper, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(FunctionDefinitionNode-ghelper, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(FunctionDefinitionNode-ghelper, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), InOrderSort(ast))))))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), Tutor.synthesis.MagicK))), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard("ConstantExpressionNode")), TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard("ConstantExpressionNode")), TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))), Tutor.synthesis.MagicK))), 3), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), InOrderSort(ast))))))))))))))))))
experiment Information: 5 : Number of mistakes: 6
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-3))))), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-2))))), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChildren(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))), InOrderSort(ast)))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, Children(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-n)))))))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), Tutor.synthesis.MagicK)))))), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))), InOrderSort(ast)))))))))
experiment Information: 5 : Number of mistakes: 4
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 11
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))))))), Selected(\x => Match(x, StartsWithTarget(Target(LeafWildcard("BinaryExpressionNode")))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("BinaryExpressionNode")))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-LessThan, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(AugmentedAssignStatementNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\x => Match(x, StartsWithParent(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Target(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Target(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Target(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Target(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Target(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), InOrderSort(ast))))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))))))), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("NameExpressionNode"))))), TChild(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChildren(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))))))), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ParenthesisExpressionNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChild(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChild(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ParenthesisExpressionNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), Tutor.synthesis.MagicK)))))), 0), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), TChild(Target(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, Children(ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChild(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), Tutor.synthesis.MagicK))))))))))), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Target(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), InOrderSort(ast)))))))))))))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Subtract, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Subtract, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Subtract, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))), Tutor.synthesis.MagicK)))))), 0), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Subtract, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Subtract, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))), Tutor.synthesis.MagicK)))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Update(node, ConstNode(AssignmentStatementNode, Children(ReferenceNode(node, StartsWithParent(Node(AugmentedAssignStatementNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 5
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, Children(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-n)))))))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))))))))), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 16
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(ReferenceNode(node, StartsWithTarget(Target(LeafWildcard("NameExpressionNode"))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithTarget(Target(LeafWildcard("ConstantExpressionNode"))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(LeafWildcard("BinaryExpressionNode")), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Target(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("ConstantExpressionNode"), TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("ConstantExpressionNode"), TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(WhileStatementNode, TChildren(Target(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("ConstantExpressionNode"), TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChildren(Target(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))))))), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard("ConstantExpressionNode")), TChild(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard("ConstantExpressionNode")), TChild(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard("ConstantExpressionNode")), TChild(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK))))))))))))), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Target(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard("ConstantExpressionNode")), TChild(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK)))))))))))))))), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\x => Match(x, StartsWithParent(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard("ConstantExpressionNode")), TChild(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))), Selected(\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(ReturnStatementNode, SingleChild(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard("ConstantExpressionNode")), TChild(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))))), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("ConstantExpressionNode"), TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChildren(Target(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("ConstantExpressionNode"), TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("ConstantExpressionNode"), TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), InOrderSort(ast))))))))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(FunctionDefinitionNode-pain, TChildren(Target(LeafWildcard("ParameterNode")), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(PrintStatementNode, TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Target(Node(FunctionDefinitionNode-pain, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(PrintStatementNode, TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(FunctionDefinitionNode-pain, TChildren(LeafWildcard("ParameterNode"), TChildren(Target(LeafWildcard("ParameterNode")), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(PrintStatementNode, TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Target(Node(FunctionDefinitionNode-pain, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(PrintStatementNode, TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChild(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChild(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChild(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChild(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1))))), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChild(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(PrintStatementNode, TChild(Target(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(FunctionDefinitionNode-pain, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(PrintStatementNode, TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Target(Node(FunctionDefinitionNode-pain, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(PrintStatementNode, TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), TChild(Node(PrintStatementNode, TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Target(Node(FunctionDefinitionNode-pain, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(PrintStatementNode, TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(PrintStatementNode, TChild(Target(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Target(Node(FunctionDefinitionNode-pain, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(PrintStatementNode, TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-3)))), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))))), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(FunctionDefinitionNode-pain, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(PrintStatementNode, TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Target(Node(FunctionDefinitionNode-pain, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(PrintStatementNode, TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(FunctionDefinitionNode-pain, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(PrintStatementNode, TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(FunctionDefinitionNode-pain, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(PrintStatementNode, TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(FunctionDefinitionNode-pain, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(PrintStatementNode, TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), InOrderSort(ast)))))))))))))))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, ConstNode(ReturnStatementNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK)))), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Equals, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Equals, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Equals, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ExpressionStatementNode, TChild(Target(Node(BinaryExpressionNode-Equals, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(ReturnStatementNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), Tutor.synthesis.MagicK)))), Selected(\x => Match(x, StartsWithParent(Node(ExpressionStatementNode, TChild(Target(Node(BinaryExpressionNode-Equals, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Equals, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Equals, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode"))))))))))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Equals, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ExpressionStatementNode, TChild(Target(Node(BinaryExpressionNode-Equals, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Equals, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode"))))))))))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Equals, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))), InOrderSort(ast)))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK)))), 0), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard("ConstantExpressionNode")), TChild(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))), InOrderSort(ast))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ParenthesisExpressionNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(ParenthesisExpressionNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Target(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ParenthesisExpressionNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Target(Node(FunctionDefinitionNode-counter, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(FunctionDefinitionNode-counter, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))))), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(FunctionDefinitionNode-counter, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(FunctionDefinitionNode-counter, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(FunctionDefinitionNode-counter, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), InOrderSort(ast)))))))))))))))))))
experiment Information: 5 : Number of mistakes: 2
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Target(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Target(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), InOrderSort(ast))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(FunctionDefinitionNode-G, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(FunctionDefinitionNode-G, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(FunctionDefinitionNode-G, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(FunctionDefinitionNode-G, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChildren(Node(FunctionDefinitionNode-G, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(FunctionDefinitionNode-G, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-i)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-i)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-i)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-GreaterThan, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(ParenthesisExpressionNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-G), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-i)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ParenthesisExpressionNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-G), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), Tutor.synthesis.MagicK))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-G), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-i), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))))), InOrderSort(ast)))))))))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(LeafWildcard("NameExpressionNode"))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(LeafWildcard("NameExpressionNode"))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(LeafWildcard("NameExpressionNode"))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(LeafWildcard("NameExpressionNode"))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(LeafWildcard("NameExpressionNode"))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(LeafWildcard("NameExpressionNode"))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(ParenthesisExpressionNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ParenthesisExpressionNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(LeafWildcard("NameExpressionNode"))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(LeafWildcard("NameExpressionNode"))))))))), TChildren(Target(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(LeafWildcard("NameExpressionNode"))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(AugmentedAssignStatementNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\x => Match(x, StartsWithParent(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ParenthesisExpressionNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(LeafWildcard("NameExpressionNode"))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(LeafWildcard("NameExpressionNode"))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(LeafWildcard("NameExpressionNode"))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(LeafWildcard("NameExpressionNode"))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(LeafWildcard("NameExpressionNode"))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), InOrderSort(ast)))))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-total), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)))), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), InOrderSort(ast)))))))))
experiment Information: 5 : Number of mistakes: 5
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard("any")))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("any"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard("any")))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, LeafConstNode(ParameterNode-value), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(FunctionDefinitionNode-compute_G, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-4)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compute_G), Children(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Add, Children(LeafConstNode(NameExpressionNode-i), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Add, Children(LeafConstNode(NameExpressionNode-value), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(NameExpressionNode-i), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(NameExpressionNode-i))))))))))))))))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-value))), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-compute_G, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(ConstantExpressionNode-0))), 2), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))), InOrderSort(ast)))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), InOrderSort(ast))))))))))
experiment Information: 5 : Number of mistakes: 2
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("any"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithTarget(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("any"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("any")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithTarget(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("any"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("any"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("any"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\x => Match(x, StartsWithTarget(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("any"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("any"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithTarget(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("any"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), InOrderSort(ast))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-n)))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-GreaterThan, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))))))))))), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-k), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(LeafConstNode(NameExpressionNode-k), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(ParenthesisExpressionNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ParenthesisExpressionNode, SingleChild(ConstNode(BinaryExpressionNode-Add, Children(LeafConstNode(NameExpressionNode-k), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK)))))), 1), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(NameExpressionNode-k), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(NameExpressionNode-k)))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(ConstNode(ParenthesisExpressionNode, SingleChild(ConstNode(BinaryExpressionNode-Add, Children(LeafConstNode(NameExpressionNode-k), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK)))))), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(ConstNode(ParenthesisExpressionNode, SingleChild(ConstNode(BinaryExpressionNode-Add, Children(LeafConstNode(NameExpressionNode-k), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK)))))))))))))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(LeafWildcard("NameExpressionNode")))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(LeafWildcard("NameExpressionNode")))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(ConstNode(ParenthesisExpressionNode, SingleChild(ConstNode(BinaryExpressionNode-Add, Children(LeafConstNode(NameExpressionNode-k), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(ConstNode(ParenthesisExpressionNode, SingleChild(ConstNode(BinaryExpressionNode-Add, Children(LeafConstNode(NameExpressionNode-k), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(LeafWildcard("NameExpressionNode")))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(LeafWildcard("NameExpressionNode")))))))))), InOrderSort(ast)))))))))))))
experiment Information: 5 : Number of mistakes: 5
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(LeafWildcard("any"))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithTarget(Target(LeafWildcard("SuiteStatementNode")))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 2
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 2
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-G)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-G)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Target(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Target(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-G)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))))))))))))))
experiment Information: 5 : Number of mistakes: 2
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast)))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChildren(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(SuiteStatementNode, TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(SuiteStatementNode, TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ForStatementNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(SuiteStatementNode, TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Target(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(SuiteStatementNode, TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK)))), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))), Tutor.synthesis.MagicK))))))))))), Selected(\x => Match(x, StartsWithParent(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Target(Node(SuiteStatementNode, TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Target(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(SuiteStatementNode, TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Target(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(SuiteStatementNode, TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))), Tutor.synthesis.MagicK)))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))))), 3), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(SuiteStatementNode, TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Target(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(SuiteStatementNode, TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(SuiteStatementNode, TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(SuiteStatementNode, TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(SuiteStatementNode, TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), InOrderSort(ast))))))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-G), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-n)))))))), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(FunctionDefinitionNode-G, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Insert(node, ConstNode(FunctionDefinitionNode-G, Children(LeafConstNode(ParameterNode-n), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(IfStatementNode, Children(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-n)))))))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-G), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-G), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-G), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))))))))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(PythonAstNode, TChild(Target(Node(SuiteStatementNode, TChild(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(FunctionDefinitionNode-G, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))))))))))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, LeafConstNode(ConstantExpressionNode-2), 0), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(ParenthesisExpressionNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))))))))))))
experiment Information: 5 : Number of mistakes: 2
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-3)))), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), InOrderSort(ast))))))))
experiment Information: 5 : Number of mistakes: 4
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\x => Match(x, StartsWithParent(Node(ExpressionStatementNode, TChild(Target(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, Children(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-n)))))))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK)))), 0), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast)))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(FunctionDefinitionNode-G, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), TChildren(Node(FunctionDefinitionNode-value, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(FunctionDefinitionNode-G, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), TChildren(Node(FunctionDefinitionNode-value, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChildren(Node(FunctionDefinitionNode-G, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), TChildren(Node(FunctionDefinitionNode-value, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(FunctionDefinitionNode-G, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), TChildren(Node(FunctionDefinitionNode-value, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(FunctionDefinitionNode-G, TChildren(Target(LeafWildcard("ParameterNode")), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Target(Node(FunctionDefinitionNode-G, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), TChildren(Node(FunctionDefinitionNode-value, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ParenthesisExpressionNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK)))), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-G, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-G, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChildren(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-G, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-G, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChild(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChild(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChild(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChild(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChildren(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-G, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChild(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-G, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChildren(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-G, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-G, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-G, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-G, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ParenthesisExpressionNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK)))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK)))))))), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-G, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(ReturnStatementNode, SingleChild(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ParenthesisExpressionNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK)))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK)))))))))), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Target(Node(FunctionDefinitionNode-G, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), TChildren(Node(FunctionDefinitionNode-value, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(FunctionDefinitionNode-G, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), TChildren(Target(Node(FunctionDefinitionNode-value, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(FunctionDefinitionNode-G, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), TChildren(Node(FunctionDefinitionNode-value, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(FunctionDefinitionNode-G, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), TChildren(Node(FunctionDefinitionNode-value, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(FunctionDefinitionNode-G, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), TChildren(Node(FunctionDefinitionNode-value, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))), InOrderSort(ast)))))))))))))))))))))))))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, ConstNode(ReturnStatementNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ExpressionStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), Tutor.synthesis.MagicK)))), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g_term), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK)))))), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-g_term, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), TChildren(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-g_term, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, Children(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g_term), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK))))))))))))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-g_term, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))), Tutor.synthesis.MagicK)))))), 3), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-g_term, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-g_term, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-g_term, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))))), InOrderSort(ast))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-rec)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-rec)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK)))))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 4
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 3
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithTarget(Target(LeafWildcard("ConstantExpressionNode")))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))), Tutor.synthesis.MagicK))), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(ReturnStatementNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ExpressionStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), Tutor.synthesis.MagicK)))), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), Tutor.synthesis.MagicK), 3), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))))), InOrderSort(ast))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ParenthesisExpressionNode, SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK)))))), 1), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(ParenthesisExpressionNode, SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK))))))))), SingleChild(ConstNode(ParenthesisExpressionNode, SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), InOrderSort(ast))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ForStatementNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK)))), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))), Tutor.synthesis.MagicK))))))))))), Selected(\x => Match(x, StartsWithParent(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Target(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))), Tutor.synthesis.MagicK)))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ForStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast)))))))))))))))))))
experiment Information: 5 : Number of mistakes: 2
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, ConstNode(ParenthesisExpressionNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("any"))))), Tutor.synthesis.MagicK)))), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Target(Node(ArgNode, TChild(LeafWildcard("any"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Multiply, Children(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("ConstantExpressionNode")), TChild(Node(ArgNode, TChild(LeafWildcard("any"))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ParenthesisExpressionNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("any"))))), Tutor.synthesis.MagicK))))))), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("any")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(ParenthesisExpressionNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("any"))))), Tutor.synthesis.MagicK)))), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Target(Node(ArgNode, TChild(LeafWildcard("any"))))))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Multiply, Children(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("ConstantExpressionNode")), TChild(Node(ArgNode, TChild(LeafWildcard("any"))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ParenthesisExpressionNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("any"))))), Tutor.synthesis.MagicK))))))), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("any"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("any")))))))))))), InOrderSort(ast))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))))))), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, Children(ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChild(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK)))))))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), InOrderSort(ast)))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(ParenthesisExpressionNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), InOrderSort(ast))))))))
experiment Information: 5 : Number of mistakes: 2
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK)))), 0), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), InOrderSort(ast))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ParenthesisExpressionNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), Tutor.synthesis.MagicK))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))), InOrderSort(ast)))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, Children(ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChild(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))))))))), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))))))))))), InOrderSort(ast)))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(FunctionDefinitionNode-add_function, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-add_function, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), Tutor.synthesis.MagicK), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-add_function, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), InOrderSort(ast))), Patch(EditMap(\node => Insert(node, ConstNode(ExpressionStatementNode, SingleChild(LeafConstNode(ConstantExpressionNode-def add_function(n):
        if n > 3:
            return g(n-1) 
        else:
            return n

    return add_function(n)))), 4), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-add_function, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast))))))))))))
experiment Information: 5 : Number of mistakes: 2
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-Return the value of G(n), computed recursively.

    >>> g(1)
    1
    >>> g(2)
    2
    >>> g(3)
    3
    >>> g(4)
    10
    >>> g(5)
    22
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])
    True
    )), Selected(\x => Match(x, StartsWithParent(Node(ExpressionStatementNode, TChild(Target(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard("ConstantExpressionNode")), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ParenthesisExpressionNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK)))), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Target(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(FunctionDefinitionNode-coefficient_func, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-coefficient_func, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-coefficient_func, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-coefficient_func, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-3)))), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-coefficient_func, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-coefficient_func, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, Children(ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ParenthesisExpressionNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK)))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-coefficient_func, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-coefficient_func, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-coefficient_func, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))), InOrderSort(ast)))))))))))))))))))))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(ParenthesisExpressionNode, SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))))), SingleChild(ConstNode(ParenthesisExpressionNode, SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-n)))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\x => Match(x, StartsWithParent(Node(ExpressionStatementNode, TChild(Target(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-GreaterThan, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))))))))))), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))), InOrderSort(ast))))))))
experiment Information: 5 : Number of mistakes: 2
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Target(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Target(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))), InOrderSort(ast))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(ConstantExpressionNode-0)))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-2)))), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK))))))))))), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(AugmentedAssignStatementNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ReferenceNode(node, StartsWithParent(Node(ExpressionStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)))))), 0), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))), InOrderSort(ast)))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, LeafConstNode(ConstantExpressionNode-2), 0), Selected(\x => Match(x, StartsWithParent(Node(ParenthesisExpressionNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ParenthesisExpressionNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(AugmentedAssignStatementNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\x => Match(x, StartsWithParent(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ParenthesisExpressionNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Target(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-answer), SingleChild(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(SuiteStatementNode, TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(SuiteStatementNode, TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), InOrderSort(ast)))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-4)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-LessThan, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-4))))), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(LambdaExpressionNode, TChild(Node(FunctionDefinitionNode-<lambda$1>, TChildren(LeafWildcard("ParameterNode"), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(LambdaExpressionNode, TChild(Node(FunctionDefinitionNode-<lambda$2>, TChildren(LeafWildcard("ParameterNode"), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(LambdaExpressionNode, TChild(Node(FunctionDefinitionNode-<lambda$1>, TChildren(LeafWildcard("ParameterNode"), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(LambdaExpressionNode, TChild(Node(FunctionDefinitionNode-<lambda$2>, TChildren(LeafWildcard("ParameterNode"), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(LambdaExpressionNode, TChild(Node(FunctionDefinitionNode-<lambda$1>, TChildren(LeafWildcard("ParameterNode"), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(LambdaExpressionNode, TChild(Node(FunctionDefinitionNode-<lambda$1>, TChildren(LeafWildcard("ParameterNode"), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(LambdaExpressionNode, TChild(Node(FunctionDefinitionNode-<lambda$1>, TChildren(LeafWildcard("ParameterNode"), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(LambdaExpressionNode, TChild(Node(FunctionDefinitionNode-<lambda$1>, TChildren(LeafWildcard("ParameterNode"), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChildren(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(LambdaExpressionNode, TChild(Node(FunctionDefinitionNode-<lambda$1>, TChildren(LeafWildcard("ParameterNode"), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(LambdaExpressionNode, TChild(Node(FunctionDefinitionNode-<lambda$2>, TChildren(LeafWildcard("ParameterNode"), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(LambdaExpressionNode, TChild(Node(FunctionDefinitionNode-<lambda$1>, TChildren(LeafWildcard("ParameterNode"), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(LambdaExpressionNode, TChild(Node(FunctionDefinitionNode-<lambda$2>, TChildren(LeafWildcard("ParameterNode"), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(LambdaExpressionNode, TChild(Node(FunctionDefinitionNode-<lambda$2>, TChildren(LeafWildcard("ParameterNode"), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(LambdaExpressionNode, TChild(Node(FunctionDefinitionNode-<lambda$2>, TChildren(LeafWildcard("ParameterNode"), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-2)))), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(LambdaExpressionNode, TChild(Node(FunctionDefinitionNode-<lambda$2>, TChildren(LeafWildcard("ParameterNode"), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(LambdaExpressionNode, TChild(Node(FunctionDefinitionNode-<lambda$2>, TChildren(LeafWildcard("ParameterNode"), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(LambdaExpressionNode, TChild(Node(FunctionDefinitionNode-<lambda$2>, TChildren(LeafWildcard("ParameterNode"), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, Children(ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChild(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(LambdaExpressionNode, TChild(Node(FunctionDefinitionNode-<lambda$1>, TChildren(LeafWildcard("ParameterNode"), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-GreaterThan, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK))))))))))))))))), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(LambdaExpressionNode, TChild(Node(FunctionDefinitionNode-<lambda$1>, TChildren(LeafWildcard("ParameterNode"), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(LambdaExpressionNode, TChild(Node(FunctionDefinitionNode-<lambda$2>, TChildren(LeafWildcard("ParameterNode"), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(LambdaExpressionNode, TChild(Node(FunctionDefinitionNode-<lambda$1>, TChildren(LeafWildcard("ParameterNode"), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), TChild(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(LambdaExpressionNode, TChild(Node(FunctionDefinitionNode-<lambda$2>, TChildren(LeafWildcard("ParameterNode"), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(LambdaExpressionNode, TChild(Node(FunctionDefinitionNode-<lambda$1>, TChildren(LeafWildcard("ParameterNode"), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(LambdaExpressionNode, TChild(Node(FunctionDefinitionNode-<lambda$2>, TChildren(LeafWildcard("ParameterNode"), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))))))), InOrderSort(ast))))))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-GreaterThan, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-n)))))), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-g_recursive, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-g_recursive, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-G_output), SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-G_output)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard("ReturnStatementNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(LeafWildcard("ReturnStatementNode"))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(LeafWildcard("ReturnStatementNode")))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard("ReturnStatementNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(LeafWildcard("ReturnStatementNode")))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(LeafWildcard("ReturnStatementNode")))))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(LeafWildcard("ReturnStatementNode")))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(LeafWildcard("ReturnStatementNode")))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-G_output), SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(LeafWildcard("ReturnStatementNode")))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(FunctionDefinitionNode-G_helper, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(LeafWildcard("ReturnStatementNode")))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-G_helper, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(LeafWildcard("ReturnStatementNode")))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(LeafWildcard("ReturnStatementNode")))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))))))), Tutor.synthesis.MagicK), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-G_helper, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(LeafWildcard("ReturnStatementNode")))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(LeafWildcard("ReturnStatementNode")))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))))))))))), Tutor.synthesis.MagicK), 3), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-G_helper, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(LeafWildcard("ReturnStatementNode")))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-G_output)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-G_helper, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(LeafWildcard("ReturnStatementNode")))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-G_helper, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(LeafWildcard("ReturnStatementNode")))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast)))))))))))))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChildren(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), TChild(Target(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast)))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), TChild(Node(FunctionDefinitionNode-counter, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(FunctionDefinitionNode-counter, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-GreaterThan, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-counter), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-n))))))))))))))), 3), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(FunctionDefinitionNode-counter, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))))))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChildren(Node(FunctionDefinitionNode-gre3, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(FunctionDefinitionNode-gre3, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Target(Node(FunctionDefinitionNode-gre3, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(FunctionDefinitionNode-gre3, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), TChildren(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(FunctionDefinitionNode-gre3, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))), Tutor.synthesis.MagicK), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(FunctionDefinitionNode-gre3, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(FunctionDefinitionNode-gre3, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(FunctionDefinitionNode-gre3, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast))))))))))))))))
experiment Information: 5 : Number of mistakes: 2
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)))), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), InOrderSort(ast))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Multiply, Children(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("ConstantExpressionNode")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Multiply, Children(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("ConstantExpressionNode")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), InOrderSort(ast))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard("ConstantExpressionNode")), TChild(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-G, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-n)))))), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-G, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-G, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-k), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(Node(CallExpressionNode, TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(ParenthesisExpressionNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK)))))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(ParenthesisExpressionNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Target(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ParenthesisExpressionNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Target(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ParenthesisExpressionNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Target(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ParenthesisExpressionNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(ParenthesisExpressionNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Target(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ParenthesisExpressionNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), Tutor.synthesis.MagicK)))))))), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Node(ArgNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), InOrderSort(ast))))))))))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChildren(Node(FunctionDefinitionNode-count_up, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(FunctionDefinitionNode-count_up, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Target(Node(FunctionDefinitionNode-count_up, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(FunctionDefinitionNode-count_up, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(FunctionDefinitionNode-count_up, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK)))), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-2)))), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK))))))))))), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast)))))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Target(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ParenthesisExpressionNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Multiply, Children(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("ConstantExpressionNode")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), InOrderSort(ast)))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-n)))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-GreaterThan, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))))))))))), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(ExpressionStatementNode, TChild(Target(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-n)))))))), 3), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))), InOrderSort(ast)))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, LeafConstNode(ConstantExpressionNode-2), 1), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Multiply, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), Tutor.synthesis.MagicK)))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(FunctionDefinitionNode-counter, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-counter, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-counter, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-counter, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-counter, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), InOrderSort(ast))))))))))))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))))))), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ReferenceNode(node, StartsWithParent(Node(ParenthesisExpressionNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Target(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ReferenceNode(node, StartsWithParent(Node(ParenthesisExpressionNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK)))))))), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))), InOrderSort(ast)))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK)))))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), InOrderSort(ast))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK)))))))), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Target(LeafWildcard("ReturnStatementNode")))))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-G), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-G), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), InOrderSort(ast))))))))
experiment Information: 5 : Number of mistakes: 2
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard("BinaryExpressionNode")))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("BinaryExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithTarget(Target(Node(ReturnStatementNode, TChild(LeafWildcard("BinaryExpressionNode")))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(ConstNode(ParenthesisExpressionNode, SingleChild(ConstNode(BinaryExpressionNode-Add, Children(LeafConstNode(NameExpressionNode-x), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK)))))))), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK)))))))), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))), TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK)))), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), Tutor.synthesis.MagicK)))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), TChild(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))))))))))), InOrderSort(ast)))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("ConstantExpressionNode"), TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("ConstantExpressionNode"), TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Target(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("ConstantExpressionNode"), TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("ConstantExpressionNode"), TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode")))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode"))))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(TupleExpressionNode-False, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Target(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard("ConstantExpressionNode")), TChild(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Target(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Target(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Target(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, Children(ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChild(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(ReferenceNode(node, StartsWithParent(Node(TupleExpressionNode-False, TChildren(LeafWildcard("ConstantExpressionNode"), TChildren(Target(LeafWildcard("ConstantExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))))))))), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("ConstantExpressionNode"), TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("ConstantExpressionNode"), TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChildren(Target(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("ConstantExpressionNode"), TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("ConstantExpressionNode"), TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("ConstantExpressionNode"), TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), InOrderSort(ast))))))))))))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(FunctionDefinitionNode-help, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(FunctionDefinitionNode-help, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(FunctionDefinitionNode-help, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))))))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-n)))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-GreaterThan, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), Tutor.synthesis.MagicK)))))))), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("NameExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), InOrderSort(ast)))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK)))))))), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Target(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-GreaterThan, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))))))))))), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))))))), InOrderSort(ast)))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Target(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast)))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChild(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChild(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChild(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), Tutor.synthesis.MagicK)))), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChild(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(ReturnStatementNode, SingleChild(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), Tutor.synthesis.MagicK)))), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), Tutor.synthesis.MagicK))))))), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(FunctionDefinitionNode-g_helper, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-g_helper, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))))))))))))))))), Tutor.synthesis.MagicK), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-g_helper, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-def g_helper(i):
        if n-i<=2:
            return n
        elif n-i>2:
            if i<=n:
                return i*g_helper(n-i) + (i+1)*g_helper(n-(i+1))
    return g_helper(1))), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(ExpressionStatementNode, SingleChild(LeafConstNode(ConstantExpressionNode-def g_helper(i):
        if n-i<=2:
            return n
        elif n-i>2:
            if i<=n:
                return i*g_helper(n-i) + (i+1)*g_helper(n-(i+1))
    return g_helper(1))))), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-g_helper, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-g_helper, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK), 3), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-g_helper, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), InOrderSort(ast)))))))))))))))))))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(LeafWildcard("NameExpressionNode")))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Multiply, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Target(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(LeafWildcard("NameExpressionNode"))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(ParenthesisExpressionNode, SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(LeafWildcard("NameExpressionNode"))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(LeafWildcard("NameExpressionNode"))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Target(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(LeafWildcard("NameExpressionNode"))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(LeafWildcard("NameExpressionNode"))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Target(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(LeafWildcard("NameExpressionNode"))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(LeafWildcard("NameExpressionNode"))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Target(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(LeafWildcard("NameExpressionNode"))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, Children(ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(LeafWildcard("NameExpressionNode"))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(AssignmentStatementNode, Children(ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(ParenthesisExpressionNode, SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))))), SingleChild(ConstNode(ParenthesisExpressionNode, SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))))))))))))), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(LeafWildcard("NameExpressionNode"))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(LeafWildcard("NameExpressionNode"))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(LeafWildcard("NameExpressionNode"))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(LeafWildcard("NameExpressionNode"))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK), 3), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(LeafWildcard("NameExpressionNode"))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), InOrderSort(ast)))))))))))))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ParenthesisExpressionNode, SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ParenthesisExpressionNode, SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), InOrderSort(ast))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-4)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-3))))), Selected(\x => Match(x, StartsWithParent(Node(ParenthesisExpressionNode, TChild(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))), InOrderSort(ast))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Target(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK)))))))), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ReferenceNode(node, StartsWithParent(Node(ParenthesisExpressionNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Target(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ReferenceNode(node, StartsWithParent(Node(ParenthesisExpressionNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK)))))))), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), InOrderSort(ast))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(NameExpressionNode-i)))), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast)))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("NameExpressionNode"))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("NameExpressionNode"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("NameExpressionNode"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Target(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("NameExpressionNode"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-GreaterThan, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))))))))))), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), InOrderSort(ast))))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(ParenthesisExpressionNode, SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(ParenthesisExpressionNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK)))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ParenthesisExpressionNode, SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(ParenthesisExpressionNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK)))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChildren(Target(LeafWildcard("ParameterNode")), TChild(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-G)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-another, TChildren(Target(LeafWildcard("ParameterNode")), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK))))))), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(FunctionDefinitionNode-another, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(FunctionDefinitionNode-another, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(FunctionDefinitionNode-another, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-G), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK)))))))))), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(FunctionDefinitionNode-another, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-G)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(FunctionDefinitionNode-another, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-G, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(FunctionDefinitionNode-another, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-G, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(FunctionDefinitionNode-another, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(FunctionDefinitionNode-G, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(FunctionDefinitionNode-another, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(FunctionDefinitionNode-G, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(FunctionDefinitionNode-another, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-G), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-G), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(FunctionDefinitionNode-G, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(FunctionDefinitionNode-another, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(FunctionDefinitionNode-G, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(FunctionDefinitionNode-another, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(FunctionDefinitionNode-G, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(FunctionDefinitionNode-another, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(FunctionDefinitionNode-G, Children(LeafConstNode(ParameterNode-n), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(IfStatementNode, Children(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-n)))))))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-G), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-G), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))))))))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(FunctionDefinitionNode-G, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(FunctionDefinitionNode-another, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(FunctionDefinitionNode-G, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(FunctionDefinitionNode-another, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(FunctionDefinitionNode-G, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(FunctionDefinitionNode-another, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-G), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-n)))))))), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(FunctionDefinitionNode-G, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(FunctionDefinitionNode-another, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), InOrderSort(ast))))))))))))))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-3))))), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), InOrderSort(ast)))))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-NotEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-NotEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(AugmentedAssignStatementNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\x => Match(x, StartsWithParent(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-NotEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-NotEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-NotEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-NotEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-NotEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChildren(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), InOrderSort(ast)))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-GreaterThan, Children(ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-3)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))))))))))), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-GreaterThan, Children(ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-3)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))))))))))))), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), Tutor.synthesis.MagicK), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))))), InOrderSort(ast))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Target(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Target(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Target(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Target(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), InOrderSort(ast)))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), InOrderSort(ast)))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(FunctionDefinitionNode-g_helper, TChildren(Target(LeafWildcard("ParameterNode")), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Target(Node(FunctionDefinitionNode-g_helper, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(FunctionDefinitionNode-g_helper, TChildren(LeafWildcard("ParameterNode"), TChildren(Target(LeafWildcard("ParameterNode")), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Target(Node(FunctionDefinitionNode-g_helper, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChild(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChild(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChild(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChild(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g_helper, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChild(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g_helper, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChildren(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g_helper, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g_helper, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK)))))))), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g_helper, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(ReturnStatementNode, SingleChild(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK)))))))))), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Target(Node(FunctionDefinitionNode-g_helper, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(FunctionDefinitionNode-g_helper, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(FunctionDefinitionNode-g_helper, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), InOrderSort(ast))))))))))))))))))))))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(SuiteStatementNode, TChild(Node(FunctionDefinitionNode-bigger_than_three, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(FunctionDefinitionNode-bigger_than_three, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(FunctionDefinitionNode-bigger_than_three, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-    
    else:
        def bigger_than_three(x):
            if x >= 3:
                return 1 #x  
            else:
                #return (x * g(n-x)) + (bigger_than_three(x+1) * g(n-x)) 
                #return x * g(n - x) + bigger_than_three(x+1)
    return bigger_than_three(1)
    )), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(ExpressionStatementNode, SingleChild(LeafConstNode(ConstantExpressionNode-    
    else:
        def bigger_than_three(x):
            if x >= 3:
                return 1 #x  
            else:
                #return (x * g(n-x)) + (bigger_than_three(x+1) * g(n-x)) 
                #return x * g(n - x) + bigger_than_three(x+1)
    return bigger_than_three(1)
    )))), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(FunctionDefinitionNode-bigger_than_three, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(FunctionDefinitionNode-bigger_than_three, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK), 3), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(FunctionDefinitionNode-bigger_than_three, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), InOrderSort(ast)))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-GreaterThan, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(FunctionDefinitionNode-nest, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-nest, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-nest, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-nest, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-nest, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-nest, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, Children(ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChild(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))))))))), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-nest, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-nest, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-nest, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))), InOrderSort(ast)))))))))))))))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChildren(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChildren(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-2)))), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))))), InOrderSort(ast))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), TChildren(Node(FunctionDefinitionNode-G, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(FunctionDefinitionNode-G, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ParenthesisExpressionNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, Children(ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChild(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(FunctionDefinitionNode-G, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(FunctionDefinitionNode-G, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Target(Node(FunctionDefinitionNode-G, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(FunctionDefinitionNode-G, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(FunctionDefinitionNode-G, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(FunctionDefinitionNode-G, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast)))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Equals, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThan, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(LambdaExpressionNode, TChild(Node(FunctionDefinitionNode-<lambda$3>, TChildren(LeafWildcard("ParameterNode"), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(LambdaExpressionNode, TChild(Node(FunctionDefinitionNode-<lambda$3>, TChildren(LeafWildcard("ParameterNode"), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(LambdaExpressionNode, TChild(Node(FunctionDefinitionNode-<lambda$3>, TChildren(LeafWildcard("ParameterNode"), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(LambdaExpressionNode, TChild(Node(FunctionDefinitionNode-<lambda$3>, TChildren(LeafWildcard("ParameterNode"), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(LambdaExpressionNode, TChild(Node(FunctionDefinitionNode-<lambda$3>, TChildren(LeafWildcard("ParameterNode"), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-2)))), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(Node(LambdaExpressionNode, TChild(Node(FunctionDefinitionNode-<lambda$3>, TChildren(LeafWildcard("ParameterNode"), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(Node(LambdaExpressionNode, TChild(Node(FunctionDefinitionNode-<lambda$3>, TChildren(LeafWildcard("ParameterNode"), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Target(Node(ArgNode, TChild(Node(LambdaExpressionNode, TChild(Node(FunctionDefinitionNode-<lambda$3>, TChildren(LeafWildcard("ParameterNode"), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(LambdaExpressionNode, TChild(Node(FunctionDefinitionNode-<lambda$3>, TChildren(LeafWildcard("ParameterNode"), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(LambdaExpressionNode, TChild(Node(FunctionDefinitionNode-<lambda$3>, TChildren(LeafWildcard("ParameterNode"), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(LambdaExpressionNode, TChild(Node(FunctionDefinitionNode-<lambda$3>, TChildren(LeafWildcard("ParameterNode"), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))), Tutor.synthesis.MagicK)))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(Node(LambdaExpressionNode, TChild(Node(FunctionDefinitionNode-<lambda$3>, TChildren(LeafWildcard("ParameterNode"), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))), Tutor.synthesis.MagicK)))))))))), SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(LambdaExpressionNode, TChild(Node(FunctionDefinitionNode-<lambda$3>, TChildren(LeafWildcard("ParameterNode"), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(FunctionDefinitionNode-counter, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(FunctionDefinitionNode-counter2, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(LambdaExpressionNode, TChild(Node(FunctionDefinitionNode-<lambda$3>, TChildren(LeafWildcard("ParameterNode"), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-counter, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(FunctionDefinitionNode-counter2, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(LambdaExpressionNode, TChild(Node(FunctionDefinitionNode-<lambda$3>, TChildren(LeafWildcard("ParameterNode"), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(FunctionDefinitionNode-counter2, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(LambdaExpressionNode, TChild(Node(FunctionDefinitionNode-<lambda$3>, TChildren(LeafWildcard("ParameterNode"), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-counter, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(FunctionDefinitionNode-counter2, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(LambdaExpressionNode, TChild(Node(FunctionDefinitionNode-<lambda$3>, TChildren(LeafWildcard("ParameterNode"), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-counter, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(FunctionDefinitionNode-counter2, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(LambdaExpressionNode, TChild(Node(FunctionDefinitionNode-<lambda$3>, TChildren(LeafWildcard("ParameterNode"), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-counter, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChildren(Node(FunctionDefinitionNode-counter2, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(Node(LambdaExpressionNode, TChild(Node(FunctionDefinitionNode-<lambda$3>, TChildren(LeafWildcard("ParameterNode"), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), InOrderSort(ast))))))))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ParenthesisExpressionNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ParenthesisExpressionNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ParenthesisExpressionNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), InOrderSort(ast))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK)))))))), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), Tutor.synthesis.MagicK), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))), InOrderSort(ast)))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))))), Tutor.synthesis.MagicK), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))))))))))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(FunctionDefinitionNode-counter, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(LeafWildcard("ReturnStatementNode")))))), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-counter, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(LeafWildcard("ReturnStatementNode")))))), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-counter, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(LeafWildcard("ReturnStatementNode")))))), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-counter, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(LeafWildcard("ReturnStatementNode")))))), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-counter, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(LeafWildcard("ReturnStatementNode")))))), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), InOrderSort(ast)))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-n)))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))), TChildren(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChildren(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), TChild(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Target(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ParenthesisExpressionNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), TChild(Target(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ParenthesisExpressionNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), InOrderSort(ast))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("ConstantExpressionNode"), TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(TupleExpressionNode-False, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("NameExpressionNode")))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-FloorDivide, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("ConstantExpressionNode"), TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(TupleExpressionNode-False, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("NameExpressionNode")))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-FloorDivide, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(TupleExpressionNode-False, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(TupleExpressionNode-False, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode"))))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(TupleExpressionNode-False, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))), Selected(\x => Match(x, StartsWithParent(Node(ParenthesisExpressionNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("NameExpressionNode"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Target(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("NameExpressionNode"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ParenthesisExpressionNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))), Selected(\x => Match(x, StartsWithParent(Node(ParenthesisExpressionNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Target(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Target(Node(TupleExpressionNode-False, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(TupleExpressionNode-False, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(TupleExpressionNode-False, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("NameExpressionNode")))))))))))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(TupleExpressionNode-False, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(TupleExpressionNode-False, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("NameExpressionNode")))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(TupleExpressionNode-False, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(TupleExpressionNode-False, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("NameExpressionNode"))))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(TupleExpressionNode-False, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(ConstNode(ParenthesisExpressionNode, SingleChild(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(TupleExpressionNode-False, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("NameExpressionNode")))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(TupleExpressionNode-False, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(TupleExpressionNode-False, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("NameExpressionNode")))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(TupleExpressionNode-False, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("NameExpressionNode")))))))))))))))), TChild(Target(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(TupleExpressionNode-False, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("NameExpressionNode")))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("ConstantExpressionNode"), TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(TupleExpressionNode-False, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("NameExpressionNode")))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-FloorDivide, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard("ConstantExpressionNode"), TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard("NameExpressionNode"), TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(TupleExpressionNode-False, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(LeafWildcard("NameExpressionNode")))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-FloorDivide, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), InOrderSort(ast)))))))))))))))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), TChildren(Node(FunctionDefinitionNode-num, TChildren(LeafWildcard("ParameterNode"), TChildren(Node(ParameterNode-answer, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode-a, TChild(LeafWildcard("NameExpressionNode")))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(FunctionDefinitionNode-num, TChildren(LeafWildcard("ParameterNode"), TChildren(Node(ParameterNode-answer, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode-a, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-G)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK)))), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-G)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-G)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-G), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK)))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-G), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-num, TChildren(LeafWildcard("ParameterNode"), TChildren(Node(ParameterNode-answer, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-num, TChildren(LeafWildcard("ParameterNode"), TChildren(Node(ParameterNode-answer, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(FunctionDefinitionNode-G, Children(LeafConstNode(ParameterNode-n), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(IfStatementNode, Children(ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChild(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-G), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))), Tutor.synthesis.MagicK)))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-G), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK))))))))))))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(FunctionDefinitionNode-num, TChildren(LeafWildcard("ParameterNode"), TChildren(Node(ParameterNode-answer, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode-a, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Target(Node(FunctionDefinitionNode-num, TChildren(LeafWildcard("ParameterNode"), TChildren(Node(ParameterNode-answer, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode-a, TChild(LeafWildcard("NameExpressionNode")))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(FunctionDefinitionNode-num, TChildren(LeafWildcard("ParameterNode"), TChildren(Node(ParameterNode-answer, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode-a, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-G)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(ArgNode-a, TChild(LeafWildcard("NameExpressionNode")))))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ArgNode-a, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK)))), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ArgNode-a, TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast)))))))))))))))))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Update(node, ConstNode(IfStatementNode, Children(ConstNode(IfStatementTestNode, Children(ReferenceNode(node, StartsWithParent(Node(WhileStatementNode, TChildren(Target(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChildren(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))), Tutor.synthesis.MagicK)))), SingleChild(ReferenceNode(node, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))))), InOrderSort(ast)))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))), Selected(\x => Match(x, StartsWithParent(Node(ParenthesisExpressionNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Target(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Target(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), Tutor.synthesis.MagicK))))), Selected(\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))), Tutor.synthesis.MagicK)))))))), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))))))), Tutor.synthesis.MagicK), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard("ParameterNode"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast)))))))))))))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), 0), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(ParenthesisExpressionNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ParenthesisExpressionNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ParenthesisExpressionNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(ParenthesisExpressionNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ParenthesisExpressionNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Target(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ExpressionStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ParenthesisExpressionNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(ExpressionStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Update(node, ConstNode(ReturnStatementNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ExpressionStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))), Tutor.synthesis.MagicK)))), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Target(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard("ConstantExpressionNode"), TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), InOrderSort(ast))))))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-2))))), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, Children(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-GreaterThan, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("NameExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))))))))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-n)))))))), 2), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))))))))))))))))))), InOrderSort(ast))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-3))))), Selected(\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard("NameExpressionNode")))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Target(Node(FunctionDefinitionNode-recursion_3, TChildren(LeafWildcard("ParameterNode"), TChildren(Node(ParameterNode-total, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))), TChildren(Node(FunctionDefinitionNode-recursion_complex, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(Node(ParameterNode-total, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-recursion_3, TChildren(LeafWildcard("ParameterNode"), TChildren(Node(ParameterNode-total, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), TChildren(Node(FunctionDefinitionNode-recursion_complex, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(Node(ParameterNode-total, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-recursion_complex, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(Node(ParameterNode-total, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChild(Target(LeafWildcard("NameExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Target(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode")))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-recursion_complex, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(Node(ParameterNode-total, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChild(Target(LeafWildcard("NameExpressionNode")))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-recursion_complex, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(Node(ParameterNode-total, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChildren(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-recursion_complex, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(Node(ParameterNode-total, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-recursion_complex, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(Node(ParameterNode-total, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-recursion_3, TChildren(LeafWildcard("ParameterNode"), TChildren(Node(ParameterNode-total, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), TChildren(Target(Node(FunctionDefinitionNode-recursion_complex, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(Node(ParameterNode-total, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-recursion_3, TChildren(LeafWildcard("ParameterNode"), TChildren(Node(ParameterNode-total, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), TChildren(Node(FunctionDefinitionNode-recursion_complex, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(Node(ParameterNode-total, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-recursion_3, TChildren(LeafWildcard("ParameterNode"), TChildren(Node(ParameterNode-total, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), TChildren(Node(FunctionDefinitionNode-recursion_complex, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(Node(ParameterNode-total, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode")))))), Tutor.synthesis.MagicK), 0), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-recursion_3, TChildren(LeafWildcard("ParameterNode"), TChildren(Node(ParameterNode-total, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), TChildren(Node(FunctionDefinitionNode-recursion_complex, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(Node(ParameterNode-total, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard("NameExpressionNode")), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(Target(LeafWildcard("ConstantExpressionNode"))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Target(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-recursion_3, TChildren(LeafWildcard("ParameterNode"), TChildren(Node(ParameterNode-total, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), TChildren(Node(FunctionDefinitionNode-recursion_complex, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(Node(ParameterNode-total, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK), 1), Selected(\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-recursion_3, TChildren(LeafWildcard("ParameterNode"), TChildren(Node(ParameterNode-total, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), TChildren(Node(FunctionDefinitionNode-recursion_complex, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(Node(ParameterNode-total, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode")))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, Children(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard("NameExpressionNode")), TChild(LeafWildcard("ConstantExpressionNode"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-3)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-n)))))))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))))))))))), 1), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-recursion_3, TChildren(LeafWildcard("ParameterNode"), TChildren(Node(ParameterNode-total, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), TChildren(Node(FunctionDefinitionNode-recursion_complex, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(Node(ParameterNode-total, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-recursion_3, TChildren(LeafWildcard("ParameterNode"), TChildren(Node(ParameterNode-total, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), TChildren(Node(FunctionDefinitionNode-recursion_complex, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(Node(ParameterNode-total, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-g, TChildren(LeafWildcard("ParameterNode"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard("ConstantExpressionNode"))), TChildren(Node(FunctionDefinitionNode-recursion_3, TChildren(LeafWildcard("ParameterNode"), TChildren(Node(ParameterNode-total, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))), TChildren(Node(FunctionDefinitionNode-recursion_complex, TChildren(LeafWildcard("ParameterNode"), TChildren(LeafWildcard("ParameterNode"), TChildren(Node(ParameterNode-total, TChild(LeafWildcard("ConstantExpressionNode"))), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard("NameExpressionNode")))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("NameExpressionNode")))))), TChild(LeafWildcard("NameExpressionNode"))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChildren(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard("NameExpressionNode"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard("NameExpressionNode"), TChild(LeafWildcard("ConstantExpressionNode")))))), TChild(Node(ArgNode, TChild(LeafWildcard("NameExpressionNode"))))))))))))))))))))))))), InOrderSort(ast))))))))))))))))))))))))))))))
experiment Information: 5 : Number of mistakes: 1
experiment Information: 5 : Apply(ast, Patch(EditMap(\node => Insert(node, ConstNode(IfStatementNode, Children(ConstNode(IfStatementTestNode, Children(ConstNode(ParenthesisExpressionNode, SingleChild(ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-n)))))))))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild