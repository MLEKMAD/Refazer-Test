[{"Id":1,"diff":"\r\nInputObject        SideIndicator\r\n-----------        -------------\r\n        if n == 0: =>           \r\n        if n == 1: <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def inner_repeated(i):\n        if n == 1:\n            return i\n        else:\n            return f(repeated(f, n-1)(i))\n    return inner_repeated\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def inner_repeated(i):\n        if n == 0:\n            return i\n        else:\n            return f(repeated(f, n-1)(i))\n    return inner_repeated\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":1261,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def inner_repeated(i):\r\n        if n==0:\r\n            return i\r\n        else:\r\n            return f(repeated(f, n-1)(i))\r\n    return inner_repeated\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, Skip(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, Skip(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":2,"diff":"\r\nInputObject            SideIndicator\r\n-----------            -------------\r\n    while count < n:   =>           \r\n    while count < n-1: <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    count = 0\n    g = lambda x: x\n    while count < n-1:\n        g = compose1(f,g)\n        count = count + 1\n    return g\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    count = 0\n    g = lambda x: x\n    while count < n:\n        g = compose1(f,g)\n        count = count + 1\n    return g\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":73,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    count = 0\r\n    g = lambda x: x\r\n    while count<n-0:\r\n        g = compose1(f, g)\r\n        count = count+1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(FunctionDefinitionNode-<lambda$88>, Children(ReferenceNode(node, Node(FunctionDefinitionNode-<lambda$87>, TChildren(Target(LeafWildcard(\"ParameterNode\")), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), 0), SingleChild(ReferenceNode(node, Node(FunctionDefinitionNode-<lambda$87>, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), 0))))), Selected(\\x => Match(x, Node(LambdaExpressionNode, TChild(Target(Node(FunctionDefinitionNode-<lambda$87>, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), 0)), Selected(\\x => Match(x, Node(WhileStatementNode, TChildren(Target(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))), 0), 1), Selected(\\x => Match(x, Node(WhileStatementNode, TChildren(Target(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), InOrderSort(ast)))))))","UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, Skip(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":3,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n        while i<=n:  =>           \r\n        if n==0:     <=           \r\n            return x <=           \r\n        while i<n:   <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def repeat(x):\n        i=1\n        if n==0: \n            return x\n        while i<n:\n            x=f(x)\n            i+=1\n        return x\n\n\n    return repeat\n\n\n\n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def repeat(x):\n        i=1\n        while i<=n:\n            x=f(x)\n            i+=1\n        return x\n\n\n    return repeat\n\n\n\n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":60,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def repeat(x):\r\n        i = 0\r\n        if n==0:\r\n            return x\r\n        while i<n:\r\n            x = f(x)\r\n            i += 1\r\n        return x\r\n    return repeat\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":"Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChildren(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), 0)), Selected(\\x => Match(x, Node(FunctionDefinitionNode-repeat, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(ReferenceNode(node, Node(BinaryExpressionNode-LessThan, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"NameExpressionNode\")))), 0), SingleChild(ReferenceNode(node, Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), 0))))), Selected(\\x => Match(x, Node(WhileStatementNode, TChildren(Target(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\"))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))))))","UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, Skip(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":4,"diff":"\r\nInputObject      SideIndicator\r\n-----------      -------------\r\n    while n > 0: =>           \r\n    while n > 1: <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    #f is a function\n    g = identity\n    while n > 1:\n        g = compose1(f, g)\n        n = n - 1\n    return g\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    #f is a function\n    g = identity\n    while n > 0:\n        g = compose1(f, g)\n        n = n - 1\n    return g\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":83,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    g = identity\r\n    while n>0:\r\n        g = compose1(f, g)\r\n        n = n-1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, Skip(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, Skip(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":5,"diff":"\r\nInputObject               SideIndicator\r\n-----------               -------------\r\n    for i in range(0, n): =>           \r\n    for i in range(1, n): <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    help = identity\n    for i in range(1, n):\n        help = compose1(f, help)\n    return help\n\n\n    #apply f to extra argument n times \n\n    #CHECKTHIS\n    # if n==1:\n    #     return f(x)\n\n    # for i in range(0,n+1)\n    #     test = compose1(f,)\n    #     compose1(f, )\n\n    # return lambda x: f(x) * repeated(f,n-1)\n\n\n    # def helper(x):\n    #     return f(x)\n    # while n+1>=0:\n    #     n-=1\n    #     return lambda x: f(x) *\n\n    # lambda x: f(x)\n\n    \n\n\n    #square twice on 5\n\n    #return compose1(increment, f)\n    # return compose1()\n    # def h(x):\n    #     return f(x)    \n\n    # n+=1\n    # while n>=0:\n    #     n-=1\n    #     return compose1(f,x)\n        \ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    help = identity\n    for i in range(0, n):\n        help = compose1(f, help)\n    return help\n\n\n    #apply f to extra argument n times \n\n    #CHECKTHIS\n    # if n==1:\n    #     return f(x)\n\n    # for i in range(0,n+1)\n    #     test = compose1(f,)\n    #     compose1(f, )\n\n    # return lambda x: f(x) * repeated(f,n-1)\n\n\n    # def helper(x):\n    #     return f(x)\n    # while n+1>=0:\n    #     n-=1\n    #     return lambda x: f(x) *\n\n    # lambda x: f(x)\n\n    \n\n\n    #square twice on 5\n\n    #return compose1(increment, f)\n    # return compose1()\n    # def h(x):\n    #     return f(x)    \n\n    # n+=1\n    # while n>=0:\n    #     n-=1\n    #     return compose1(f,x)\n        \ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":115,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    help = identity\r\n    for i in range(0, n):\r\n        help = compose1(f, help)\r\n    return help\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, Skip(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, Skip(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":6,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n                n-=1 <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n==0:\n        return lambda x:x\n    def fn(x):\n        def g(n):\n            if n==1:\n                return f\n            else:\n                n-=1\n                return compose1(g(n-1),f)\n            \n        func=g(n)\n        return func(x)\n    return fn\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\ndef g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\ndef pingpong(n):\n    \"\"\"Return the nth element of the ping-pong sequence.\n\n    >>> pingpong(7)\n    7\n    >>> pingpong(8)\n    6\n    >>> pingpong(15)\n    1\n    >>> pingpong(21)\n    -1\n    >>> pingpong(22)\n    0\n    >>> pingpong(30)\n    6\n    >>> pingpong(68)\n    2\n    >>> pingpong(69)\n    1\n    >>> pingpong(70)\n    0\n    >>> pingpong(71)\n    1\n    >>> pingpong(72)\n    0\n    >>> pingpong(100)\n    2\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'pingpong', ['Assign', 'AugAssign'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\ndef has_seven(k):\n    \"\"\"Returns True if at least one of the digits of k is a 7, False otherwise.\n\n    >>> has_seven(3)\n    False\n    >>> has_seven(7)\n    True\n    >>> has_seven(2734)\n    True\n    >>> has_seven(2634)\n    False\n    >>> has_seven(734)\n    True\n    >>> has_seven(7777)\n    True\n    \"\"\"\n    if k % 10 == 7:\n        return True\n    elif k < 10:\n        return False\n    else:\n        return has_seven(k // 10)\n\ndef count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n\ndef move_stack(n, start, end):\n    \"\"\"Print the moves required to move n disks on the start pole to the end\n    pole without violating the rules of Towers of Hanoi.\n\n    n -- number of disks\n    start -- a pole position, either 1, 2, or 3\n    end -- a pole position, either 1, 2, or 3\n\n    There are exactly three poles, and start and end must be different. Assume\n    that the start pole has at least n disks of increasing size, and the end\n    pole is either empty or has a top disk larger than the top n start disks.\n\n    >>> move_stack(1, 1, 3)\n    Move the top disk from rod 1 to rod 3\n    >>> move_stack(2, 1, 3)\n    Move the top disk from rod 1 to rod 2\n    Move the top disk from rod 1 to rod 3\n    Move the top disk from rod 2 to rod 3\n    >>> move_stack(3, 1, 3)\n    Move the top disk from rod 1 to rod 3\n    Move the top disk from rod 1 to rod 2\n    Move the top disk from rod 3 to rod 2\n    Move the top disk from rod 1 to rod 3\n    Move the top disk from rod 2 to rod 1\n    Move the top disk from rod 2 to rod 3\n    Move the top disk from rod 1 to rod 3\n    \"\"\"\n    assert 1 <= start <= 3 and 1 <= end <= 3 and start != end, \"Bad start/end\"\n    \"*** YOUR CODE HERE ***\"\n\n###################\n# Extra Questions #\n###################\n\nfrom operator import sub, mul\n\ndef Y(f):\n    \"\"\"The Y (\"paradoxical\") combinator.\"\"\"\n    return f(lambda: Y(f))\n\n\ndef Y_tester():\n    \"\"\"\n    >>> tmp = Y_tester()\n    >>> tmp(1)\n    1\n    >>> tmp(5)\n    120\n    >>> tmp(2)\n    2\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    return Y(________)  # Replace \n\ndef zero(f):\n    return lambda x: x\n\ndef successor(n):\n    return lambda f: lambda x: f(n(f)(x))\ndef one(f):\n    \"\"\"Church numeral 1: same as successor(zero)\"\"\"\n    \"*** YOUR CODE HERE ***\"\n\ndef two(f):\n    \"\"\"Church numeral 2: same as successor(successor(zero))\"\"\"\n    \"*** YOUR CODE HERE ***\"\n\nthree = successor(two)\n\ndef church_to_int(n):\n    \"\"\"Convert the Church numeral n to a Python integer.\n\n    >>> church_to_int(zero)\n    0\n    >>> church_to_int(one)\n    1\n    >>> church_to_int(two)\n    2\n    >>> church_to_int(three)\n    3\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\ndef add_church(m, n):\n    \"\"\"Return the Church numeral for m + n, for Church numerals m and n.\n\n    >>> church_to_int(add_church(two, three))\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\ndef mul_church(m, n):\n    \"\"\"Return the Church numeral for m * n, for Church numerals m and n.\n\n    >>> four = successor(three)\n    >>> church_to_int(mul_church(two, three))\n    6\n    >>> church_to_int(mul_church(three, four))\n    12\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\ndef pow_church(m, n):\n    \"\"\"Return the Church numeral m ** n, for Church numerals m and n.\n\n    >>> church_to_int(pow_church(two, three))\n    8\n    >>> church_to_int(pow_church(three, two))\n    9\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n==0:\n        return lambda x:x\n    def fn(x):\n        def g(n):\n            if n==1:\n                return f\n            else:\n                return compose1(g(n-1),f)\n            \n        func=g(n)\n        return func(x)\n    return fn\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\ndef g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\ndef pingpong(n):\n    \"\"\"Return the nth element of the ping-pong sequence.\n\n    >>> pingpong(7)\n    7\n    >>> pingpong(8)\n    6\n    >>> pingpong(15)\n    1\n    >>> pingpong(21)\n    -1\n    >>> pingpong(22)\n    0\n    >>> pingpong(30)\n    6\n    >>> pingpong(68)\n    2\n    >>> pingpong(69)\n    1\n    >>> pingpong(70)\n    0\n    >>> pingpong(71)\n    1\n    >>> pingpong(72)\n    0\n    >>> pingpong(100)\n    2\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'pingpong', ['Assign', 'AugAssign'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\ndef has_seven(k):\n    \"\"\"Returns True if at least one of the digits of k is a 7, False otherwise.\n\n    >>> has_seven(3)\n    False\n    >>> has_seven(7)\n    True\n    >>> has_seven(2734)\n    True\n    >>> has_seven(2634)\n    False\n    >>> has_seven(734)\n    True\n    >>> has_seven(7777)\n    True\n    \"\"\"\n    if k % 10 == 7:\n        return True\n    elif k < 10:\n        return False\n    else:\n        return has_seven(k // 10)\n\ndef count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n\ndef move_stack(n, start, end):\n    \"\"\"Print the moves required to move n disks on the start pole to the end\n    pole without violating the rules of Towers of Hanoi.\n\n    n -- number of disks\n    start -- a pole position, either 1, 2, or 3\n    end -- a pole position, either 1, 2, or 3\n\n    There are exactly three poles, and start and end must be different. Assume\n    that the start pole has at least n disks of increasing size, and the end\n    pole is either empty or has a top disk larger than the top n start disks.\n\n    >>> move_stack(1, 1, 3)\n    Move the top disk from rod 1 to rod 3\n    >>> move_stack(2, 1, 3)\n    Move the top disk from rod 1 to rod 2\n    Move the top disk from rod 1 to rod 3\n    Move the top disk from rod 2 to rod 3\n    >>> move_stack(3, 1, 3)\n    Move the top disk from rod 1 to rod 3\n    Move the top disk from rod 1 to rod 2\n    Move the top disk from rod 3 to rod 2\n    Move the top disk from rod 1 to rod 3\n    Move the top disk from rod 2 to rod 1\n    Move the top disk from rod 2 to rod 3\n    Move the top disk from rod 1 to rod 3\n    \"\"\"\n    assert 1 <= start <= 3 and 1 <= end <= 3 and start != end, \"Bad start/end\"\n    \"*** YOUR CODE HERE ***\"\n\n###################\n# Extra Questions #\n###################\n\nfrom operator import sub, mul\n\ndef Y(f):\n    \"\"\"The Y (\"paradoxical\") combinator.\"\"\"\n    return f(lambda: Y(f))\n\n\ndef Y_tester():\n    \"\"\"\n    >>> tmp = Y_tester()\n    >>> tmp(1)\n    1\n    >>> tmp(5)\n    120\n    >>> tmp(2)\n    2\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    return Y(________)  # Replace \n\ndef zero(f):\n    return lambda x: x\n\ndef successor(n):\n    return lambda f: lambda x: f(n(f)(x))\ndef one(f):\n    \"\"\"Church numeral 1: same as successor(zero)\"\"\"\n    \"*** YOUR CODE HERE ***\"\n\ndef two(f):\n    \"\"\"Church numeral 2: same as successor(successor(zero))\"\"\"\n    \"*** YOUR CODE HERE ***\"\n\nthree = successor(two)\n\ndef church_to_int(n):\n    \"\"\"Convert the Church numeral n to a Python integer.\n\n    >>> church_to_int(zero)\n    0\n    >>> church_to_int(one)\n    1\n    >>> church_to_int(two)\n    2\n    >>> church_to_int(three)\n    3\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\ndef add_church(m, n):\n    \"\"\"Return the Church numeral for m + n, for Church numerals m and n.\n\n    >>> church_to_int(add_church(two, three))\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\ndef mul_church(m, n):\n    \"\"\"Return the Church numeral for m * n, for Church numerals m and n.\n\n    >>> four = successor(three)\n    >>> church_to_int(mul_church(two, three))\n    6\n    >>> church_to_int(mul_church(three, four))\n    12\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\ndef pow_church(m, n):\n    \"\"\"Return the Church numeral m ** n, for Church numerals m and n.\n\n    >>> church_to_int(pow_church(two, three))\n    8\n    >>> church_to_int(pow_church(three, two))\n    9\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":7,"diff":"\r\nInputObject    SideIndicator\r\n-----------    -------------\r\n    if n == 0: =>           \r\n    if n == 1: <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 1:\n        return (lambda x: x)\n    else:\n        return (lambda x: f (repeated(f,n-1)(x)))\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return (lambda x: x)\n    else:\n        return (lambda x: f (repeated(f,n-1)(x)))\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":55,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return (lambda x: x)\r\n    else:\r\n        return (lambda x: f(repeated(f, n-1)(x)))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, ConstNode(FunctionDefinitionNode-<lambda$310>, Children(ReferenceNode(node, Node(FunctionDefinitionNode-<lambda$308>, TChildren(Target(LeafWildcard(\"ParameterNode\")), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), 0), SingleChild(ReferenceNode(node, Node(FunctionDefinitionNode-<lambda$308>, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), 0))))), Selected(\\x => Match(x, Node(LambdaExpressionNode, TChild(Target(Node(FunctionDefinitionNode-<lambda$308>, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(FunctionDefinitionNode-<lambda$311>, Children(ReferenceNode(node, Node(FunctionDefinitionNode-<lambda$309>, TChildren(Target(LeafWildcard(\"ParameterNode\")), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))), 0), SingleChild(ReferenceNode(node, Node(FunctionDefinitionNode-<lambda$309>, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))), 0))))), Selected(\\x => Match(x, Node(LambdaExpressionNode, TChild(Target(Node(FunctionDefinitionNode-<lambda$309>, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))), InOrderSort(ast)))))))","UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, Skip(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":8,"diff":"\r\nInputObject     SideIndicator\r\n-----------     -------------\r\n    counter = 0 =>           \r\n    counter = 1 <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    x = identity\n    counter = 1\n    while counter < n:\n        x = compose1(x, f)\n        counter += 1\n    return x\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    x = identity\n    counter = 0\n    while counter < n:\n        x = compose1(x, f)\n        counter += 1\n    return x\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":84,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    x = identity\r\n    counter = 0\r\n    while counter<n:\r\n        x = compose1(x, f)\r\n        counter += 1\r\n    return x\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, Skip(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, Skip(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":9,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n            h = f(h) =>           \r\n        return h     =>           \r\n            s = f(h) <=           \r\n        return s     <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    def helper(x):\n        counter = 1\n        if n == 0:\n            return x\n        h = f(x)\n        while counter < n:\n            s = f(h)\n            counter += 1\n        return s\n    return helper\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    def helper(x):\n        counter = 1\n        if n == 0:\n            return x\n        h = f(x)\n        while counter < n:\n            h = f(h)\n            counter += 1\n        return h\n    return helper\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":21040,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-h)), Selected(\\x => Match(x, Node(AssignmentStatementNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-h)), Selected(\\x => Match(x, Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), InOrderSort(ast))))))","UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":10,"diff":"\r\nInputObject                                                                                                        SideIndicator\r\n-----------                                                                                                        -------------\r\n    i = 0                                                                                                          =>           \r\n    if n <= 3:                                                                                                     =>           \r\n        return n                                                                                                   =>           \r\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3)                                                                    =>           \r\n    answer = 0                                                                                                     =>           \r\n    i = 4                                                                                                          =>           \r\n    sequence = [1,2,3]                                                                                             =>           \r\n    while len(sequence)<n:                                                                                         =>           \r\n        sequence.append(sequence[len(sequence)-1] + 2 * sequence[len(sequence)-2] + 3 * sequence[len(sequence)-3]) =>           \r\n    return sequence[n-1]                                                                                           =>           \r\n                                                                                                                   =>           \r\n    def countdown(k,i):                                                                                            =>           \r\n        if k==n:                                                                                                   =>           \r\n            return i                                                                                               =>           \r\n        elif k%7==0 or has_seven(k):                                                                               =>           \r\n            countup(k+1,i+1)                                                                                       =>           \r\n        return countdown(k+1,i-1)                                                                                  =>           \r\n    def countup(k,i):                                                                                              =>           \r\n        if k==n:                                                                                                   =>           \r\n            return i                                                                                               =>           \r\n        elif k%7==0 or has_seven(k):                                                                               =>           \r\n            countdown(k+1,i-1)                                                                                     =>           \r\n        return countup(k+1,i+1)                                                                                    =>           \r\n    return countup(1,1)                                                                                            =>           \r\n    else:                                                                                                          =>           \r\n                                                                                                                   =>           \r\n                                                                                                                   =>           \r\n    i = 1                                                                                                          <=           \r\n    \"*** YOUR CODE HERE ***\"                                                                                       <=           \r\n    \"*** YOUR CODE HERE ***\"                                                                                       <=           \r\n    \"*** YOUR CODE HERE ***\"                                                                                       <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n==0:\n        return identity\n    i = 1\n    intermediate = identity\n    while i<n:\n        intermediate = compose1(f, intermediate)\n        i += 1\n\n\n    return intermediate\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n==0:\n        return identity\n    i = 0\n    intermediate = identity\n    while i<n:\n        intermediate = compose1(f, intermediate)\n        i += 1\n\n\n    return intermediate\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":66,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    i = 0\r\n    intermediate = identity\r\n    while i<n:\r\n        intermediate = compose1(f, intermediate)\r\n        i += 1\r\n    return intermediate\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, Skip(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, Skip(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":11,"diff":"\r\nInputObject                        SideIndicator\r\n-----------                        -------------\r\n    final = identity               =>           \r\n        final = compose1(f, final) =>           \r\n    if n == 0:                     <=           \r\n        return identity            <=           \r\n    if n == 1:                     <=           \r\n        return f(identity)         <=           \r\n        final = compose1(f, f)     <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return identity\n    if n == 1:\n        return f(identity)\n    while n!= 0:\n        final = compose1(f, f)\n        n -= 1\n    return final\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    final = identity\n    while n!= 0:\n        final = compose1(f, final)\n        n -= 1\n    return final\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":34870,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":"Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-NotEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), 0)), Selected(\\x => Match(x, Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-NotEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-final)), Selected(\\x => Match(x, Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), 0)), Selected(\\x => Match(x, Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))), 0), 1), Selected(\\x => Match(x, Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-final), SingleChild(ReferenceNode(node, Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))), 0))))), Selected(\\x => Match(x, Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-NotEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), 0)), Selected(\\x => Match(x, Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-NotEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), 0), 1), Selected(\\x => Match(x, Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-NotEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-final)), Selected(\\x => Match(x, Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), InOrderSort(ast))))))))))))","UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":12,"diff":"\r\nInputObject                        SideIndicator\r\n-----------                        -------------\r\n    final = identity               =>           \r\n        final = compose1(f, final) =>           \r\n    if n == 0:                     <=           \r\n        return identity            <=           \r\n    if n == 1:                     <=           \r\n        return f(identity)         <=           \r\n        final = compose1(f, f)     <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return identity\n    if n == 1:\n        return f(identity)\n    while n!= 0:\n        final = compose1(f, f)\n        n -= 1\n    return final\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    final = identity\n    while n!= 0:\n        final = compose1(f, final)\n        n -= 1\n    return final\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":30042,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":"Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-NotEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), 0)), Selected(\\x => Match(x, Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-NotEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-final)), Selected(\\x => Match(x, Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), 0)), Selected(\\x => Match(x, Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))), 0), 1), Selected(\\x => Match(x, Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-final), SingleChild(ReferenceNode(node, Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))), 0))))), Selected(\\x => Match(x, Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-NotEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), 0)), Selected(\\x => Match(x, Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-NotEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), 0), 1), Selected(\\x => Match(x, Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-NotEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-final)), Selected(\\x => Match(x, Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), InOrderSort(ast))))))))))))","UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":13,"diff":"\r\nInputObject                    SideIndicator\r\n-----------                    -------------\r\n            h = compose1(f, h) =>           \r\n            h = compose1(f, f) <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def pooh(x):\n        k = n\n        if k == 0:\n            return x\n        if k == 1:\n            return f(x)\n        h = f\n        while k > 1:\n            h = compose1(f, f)\n            k -= 1\n        return h(x)\n    return pooh\n\n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def pooh(x):\n        k = n\n        if k == 0:\n            return x\n        if k == 1:\n            return f(x)\n        h = f\n        while k > 1:\n            h = compose1(f, h)\n            k -= 1\n        return h(x)\n    return pooh\n\n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":21145,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-h)), Selected(\\x => Match(x, Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), InOrderSort(ast)))))","UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":14,"diff":"\r\nInputObject                           SideIndicator\r\n-----------                           -------------\r\n            result = f(result)        =>           \r\n            result = compose1(f,f)(x) <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def nth(x):\n        result = x\n        count = n\n        while count > 0:\n            result = compose1(f,f)(x)\n            count -= 1\n        return result\n    return nth\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def nth(x):\n        result = x\n        count = n\n        while count > 0:\n            result = f(result)\n            count -= 1\n        return result\n    return nth\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":22749,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":"Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), 0)), Selected(\\x => Match(x, Node(CallExpressionNode, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), 0)), Selected(\\x => Match(x, Node(CallExpressionNode, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))), 0), 0), Selected(\\x => Match(x, Node(CallExpressionNode, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-result)), Selected(\\x => Match(x, Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), 0)), Selected(\\x => Match(x, Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, Node(CallExpressionNode, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), 0), 1), Selected(\\x => Match(x, Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), InOrderSort(ast))))))))))","UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":15,"diff":"\r\nInputObject      SideIndicator\r\n-----------      -------------\r\n        return f =>           \r\n        return   <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return \n    if n == 1:\n        return lambda x: x\n    return compose1(f, repeated(f,n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return lambda x: x\n    if n == 1:\n        return f\n    return compose1(f, repeated(f,n-1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":4124,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-x), 0), Selected(\\x => Match(x, Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\"))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(ConstNode(LambdaExpressionNode, SingleChild(ConstNode(FunctionDefinitionNode-<lambda$389>, Children(LeafConstNode(ParameterNode-x), SingleChild(ReferenceNode(node, Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))), 0)))))))), 0), Selected(\\x => Match(x, Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Target(Node(SuiteStatementNode, TChild(LeafWildcard(\"ReturnStatementNode\")))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))), 0)), Selected(\\x => Match(x, Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Target(Node(SuiteStatementNode, TChild(LeafWildcard(\"ReturnStatementNode\")))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(LambdaExpressionNode, TChild(Node(FunctionDefinitionNode-<lambda$388>, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), 0)), Selected(\\x => Match(x, Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(LambdaExpressionNode, TChild(Node(FunctionDefinitionNode-<lambda$388>, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, Node(FunctionDefinitionNode-<lambda$388>, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), 0), 0), Selected(\\x => Match(x, Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(LambdaExpressionNode, TChild(Node(FunctionDefinitionNode-<lambda$388>, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))), InOrderSort(ast))))))))))","UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":16,"diff":"\r\nInputObject                    SideIndicator\r\n-----------                    -------------\r\n    if n == 0:                 =>           \r\n        return identity        =>           \r\n        x = compose1(f, x)     =>           \r\n        i += 1                 =>           \r\n    return x                   =>           \r\n        if x == 0:             <=           \r\n            return n           <=           \r\n        else:                  <=           \r\n            x = compose1(f, x) <=           \r\n            i += 1             <=           \r\n            return x           <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    x = f\n    i = 1\n    while i < n:\n        if x == 0:\n            return n\n        else:\n            x = compose1(f, x)\n            i += 1\n            return x\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return identity\n    x = f\n    i = 1\n    while i < n:\n        x = compose1(f, x)\n        i += 1\n    return x\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":2881,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(WhileStatementNode, Children(ReferenceNode(node, Node(WhileStatementNode, TChildren(Target(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\"))))), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), 0), SingleChild(ConstNode(SuiteStatementNode, Children(ReferenceNode(node, Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), 0), SingleChild(ReferenceNode(node, Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Target(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), 0))))))), 4), Selected(\\x => Match(x, Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Target(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))))))), 0)), Selected(\\x => Match(x, Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), 0), 5), Selected(\\x => Match(x, Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))))))))), InOrderSort(ast))))))))","UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":17,"diff":"\r\nInputObject                               SideIndicator\r\n-----------                               -------------\r\n    new_f = f                             =>           \r\n        new_f = compose1(f,new_f)         =>           \r\n                                          <=           \r\n        new_f = compose1(f,f)             <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n\n    if n == 0:\n        return identity\n    while n>1:\n        new_f = compose1(f,f)        \n        n -= 1\n    return new_f\n   \ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    new_f = f\n    if n == 0:\n        return identity\n    while n>1:\n        new_f = compose1(f,new_f)        \n        n -= 1\n    return new_f\n   \ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":23630,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-new_f), SingleChild(LeafConstNode(NameExpressionNode-f)))), 1), Selected(\\x => Match(x, Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-new_f)), Selected(\\x => Match(x, Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), InOrderSort(ast))))))","UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":18,"diff":"\r\nInputObject                       SideIndicator\r\n-----------                       -------------\r\n            return compose1(g, f) =>           \r\n            return g              <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return identity\n    def repeated_helper(g, n, i):\n        if i == n:\n            return g\n        else:\n            return repeated_helper(compose1(g, f), n, i+1)\n    return repeated_helper(identity, n, 1)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return identity\n    def repeated_helper(g, n, i):\n        if i == n:\n            return compose1(g, f)\n        else:\n            return repeated_helper(compose1(g, f), n, i+1)\n    return repeated_helper(identity, n, 1)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":5024,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(ReferenceNode(node, Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))), 0))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-f))))))), 0), Selected(\\x => Match(x, Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))), 0)), Selected(\\x => Match(x, Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":19,"diff":"\r\nInputObject      SideIndicator\r\n-----------      -------------\r\n    while n > 0: =>           \r\n    else:        =>           \r\n    while n > 1: <=           \r\n    if n == 1:   <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def compose(f, g):\n            def h(x):\n                return f(g(x))\n            return h\n    def h(x):\n        return x\n    while n > 1:\n        h = compose(f, h)\n        n -= 1\n    if n == 1:\n        return h\n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def compose(f, g):\n            def h(x):\n                return f(g(x))\n            return h\n    def h(x):\n        return x\n    while n > 0:\n        h = compose(f, h)\n        n -= 1\n    else:\n        return h\n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":6474,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(FunctionDefinitionNode-compose, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(FunctionDefinitionNode-h, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(FunctionDefinitionNode-h, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChildren(Target(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))), 0)), Selected(\\x => Match(x, Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(FunctionDefinitionNode-compose, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(FunctionDefinitionNode-h, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(FunctionDefinitionNode-h, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(WhileStatementNode, Children(ReferenceNode(node, Node(WhileStatementNode, TChildren(Target(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), 0), Children(ReferenceNode(node, Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), 0), SingleChild(ReferenceNode(node, Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), 0))))), 4), Selected(\\x => Match(x, Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(FunctionDefinitionNode-compose, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(FunctionDefinitionNode-h, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(FunctionDefinitionNode-h, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(FunctionDefinitionNode-compose, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(FunctionDefinitionNode-h, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(FunctionDefinitionNode-h, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))), 0)), Selected(\\x => Match(x, Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(FunctionDefinitionNode-compose, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(FunctionDefinitionNode-h, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(FunctionDefinitionNode-h, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))))))))), InOrderSort(ast))))))))","UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":20,"diff":"\r\nInputObject                                    SideIndicator\r\n-----------                                    -------------\r\n    if n == 0:                                 =>           \r\n        return compose1(identity, identity)    =>           \r\n        return compose1(f, repeated(f, n - 1)) =>           \r\n    if n != 0:                                 <=           \r\n        while n > 0:                           <=           \r\n             return compose1(f, f)             <=           \r\n        return x                               <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def compose1(f, g):\n        \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n        def h(x):\n            return f(g(x))\n        return h\n    if n != 0:\n        while n > 0:\n             return compose1(f, f)\n    else:\n        return x\n\n\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def compose1(f, g):\n        \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n        def h(x):\n            return f(g(x))\n        return h\n    if n == 0:\n        return compose1(identity, identity)\n    else:\n        return compose1(f, repeated(f, n - 1))\n\n\n\n","Time":3566,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Equals, Children(ReferenceNode(node, Node(BinaryExpressionNode-NotEqual, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))), 0), SingleChild(ReferenceNode(node, Node(BinaryExpressionNode-NotEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))), 0))))), Selected(\\x => Match(x, Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-NotEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), TChild(Node(SuiteStatementNode, TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-NotEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Target(Node(SuiteStatementNode, TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))), 0)), Selected(\\x => Match(x, Node(IfStatementNode, TChildren(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-NotEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), 0), 1), Selected(\\x => Match(x, Node(IfStatementNode, TChildren(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-NotEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-f))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-repeated), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-f))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))))))))))))), 0), Selected(\\x => Match(x, Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))), 0)), Selected(\\x => Match(x, Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast)))))))))))","UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":21,"diff":"\r\nInputObject   SideIndicator\r\n-----------   -------------\r\n        i = 0 =>           \r\n        i = 1 <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def h(x):\n        i = 1\n        while i != n:\n            x = f(x)\n            i += 1\n        return x\n    \n    return h\n    \ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def h(x):\n        i = 0\n        while i != n:\n            x = f(x)\n            i += 1\n        return x\n    \n    return h\n    \ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":60,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def h(x):\r\n        i = 0\r\n        while i!=n:\r\n            x = f(x)\r\n            i += 1\r\n        return x\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, Skip(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, Skip(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":22,"diff":"\r\nInputObject        SideIndicator\r\n-----------        -------------\r\n        if k==n+1: =>           \r\n        if k==n:   <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def partial_rep(k,val):\n        if k==n:\n            return val\n        else:\n            return partial_rep(k+1,f(val))\n    return lambda x: partial_rep(1,x)\n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def partial_rep(k,val):\n        if k==n+1:\n            return val\n        else:\n            return partial_rep(k+1,f(val))\n    return lambda x: partial_rep(1,x)\n\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":2711,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), 0), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 1), Selected(\\x => Match(x, Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), 0)), Selected(\\x => Match(x, Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(FunctionDefinitionNode-<lambda$453>, Children(ReferenceNode(node, Node(FunctionDefinitionNode-<lambda$452>, TChildren(Target(LeafWildcard(\"ParameterNode\")), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), 0), SingleChild(ReferenceNode(node, Node(FunctionDefinitionNode-<lambda$452>, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), 0))))), Selected(\\x => Match(x, Node(LambdaExpressionNode, TChild(Target(Node(FunctionDefinitionNode-<lambda$452>, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))), InOrderSort(ast)))))))","UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":23,"diff":"\r\nInputObject       SideIndicator\r\n-----------       -------------\r\n            a -=1 =>           \r\n            a -=a <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n\n    def h(x):\n        a=n\n        b = f(x)\n        if n==0:\n            return x\n        while a > 1:\n            b = f(b)\n            a -=a\n        return b\n    return h\n\n    \n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n\n    def h(x):\n        a=n\n        b = f(x)\n        if n==0:\n            return x\n        while a > 1:\n            b = f(b)\n            a -=1\n        return b\n    return h\n\n    \n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":5074,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast)))))","UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":24,"diff":"\r\nInputObject      SideIndicator\r\n-----------      -------------\r\n    while n > 0: =>           \r\n    while n > 1: <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def identity(x):\n        return x\n\n    #if n == 1:\n    #    return f\n    #elif n == 0:\n    #    return identity\n    #else:\n    #    return repeated(compose1(f, f), (n - 1))\n    a = identity\n    while n > 1:\n        a = compose1(f, a)\n        n -= 1\n    return a\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def identity(x):\n        return x\n\n    #if n == 1:\n    #    return f\n    #elif n == 0:\n    #    return identity\n    #else:\n    #    return repeated(compose1(f, f), (n - 1))\n    a = identity\n    while n > 0:\n        a = compose1(f, a)\n        n -= 1\n    return a\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":70,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def identity(x):\r\n        return x\r\n    a = identity\r\n    while n>0:\r\n        a = compose1(f, a)\r\n        n -= 1\r\n    return a\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, Skip(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, Skip(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":25,"diff":"\r\nInputObject                      SideIndicator\r\n-----------                      -------------\r\n    >>> repeated(square, 0)(5)   =>           \r\n        h=f                      =>           \r\n            h=compose1(h,f)      =>           \r\n    >>> repeated(square, 0)(5)   <=           \r\n            h=compose1(f,f)      <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n==0:\n        return identity\n    elif n==1:\n        return f\n    else:\n        i=2\n        while i<=n:\n            h=compose1(f,f)\n            i+=1\n        return h\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)  \n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n==0:\n        return identity\n    elif n==1:\n        return f\n    else:\n        i=2\n        h=f\n        while i<=n:\n            h=compose1(h,f)\n            i+=1\n        return h\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":23986,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)  \n    5\n    )), Selected(\\x => Match(x, Node(ExpressionStatementNode, TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-h), SingleChild(LeafConstNode(NameExpressionNode-f)))), 1), Selected(\\x => Match(x, Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-h)), Selected(\\x => Match(x, Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), InOrderSort(ast)))))))","UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":26,"diff":"\r\nInputObject                  SideIndicator\r\n-----------                  -------------\r\n        for i in range(0,n): =>           \r\n        for i in range(1,n): <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def repeater(x):\n        for i in range(1,n):\n            x = f(x)\n        return x\n    return repeater\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def repeater(x):\n        for i in range(0,n):\n            x = f(x)\n        return x\n    return repeater\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":96,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def repeater(x):\r\n        for i in range(0, n):\r\n            x = f(x)\r\n        return x\r\n    return repeater\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, Skip(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, Skip(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":27,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n        if count==0: =>           \r\n                     =>           \r\n        if count==1: <=           \r\n                     <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n\n    def func(x, count=n):\n        if count==1:\n            return x\n        else:\n            \n            return func(f(x), count-1)\n    return func\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n\n    def func(x, count=n):\n        if count==0:\n            return x\n        else:\n\n            return func(f(x), count-1)\n    return func\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":63,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def func(x, count = n):\r\n        if count==0:\r\n            return x\r\n        else:\r\n            return func(f(x), count-1)\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, Skip(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, Skip(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":28,"diff":"\r\nInputObject      SideIndicator\r\n-----------      -------------\r\n    while n > 0: =>           \r\n    while n > 1: <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def value_holder(x):\n        return x\n    while n > 1:\n        value_holder = compose1(f, value_holder)\n        n -= 1\n    return value_holder\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    def value_holder(x):\n        return x\n    while n > 0:\n        value_holder = compose1(f, value_holder)\n        n -= 1\n    return value_holder\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":53,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def value_holder(x):\r\n        return x\r\n    while n>0:\r\n        value_holder = compose1(f, value_holder)\r\n        n -= 1\r\n    return value_holder\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, Skip(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, Skip(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":29,"diff":"\r\nInputObject   SideIndicator\r\n-----------   -------------\r\n    g = f     =>           \r\n        g = f <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        f = lambda z: z\n        g = lambda y: y\n        return compose1(f, g)\n    while n > 1:\n        g = f\n        g = compose1(f, g)\n        n -= 1\n    return g\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    g = f\n    if n == 0:\n        f = lambda z: z\n        g = lambda y: y\n        return compose1(f, g)\n    while n > 1:\n        g = compose1(f, g)\n        n -= 1\n    return g\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":22908,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(LeafConstNode(NameExpressionNode-f)))), 1), Selected(\\x => Match(x, Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(LambdaExpressionNode, TChild(Node(FunctionDefinitionNode-<lambda$488>, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(LambdaExpressionNode, TChild(Node(FunctionDefinitionNode-<lambda$489>, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, ConstNode(FunctionDefinitionNode-<lambda$490>, Children(ReferenceNode(node, Node(FunctionDefinitionNode-<lambda$488>, TChildren(Target(LeafWildcard(\"ParameterNode\")), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), 0), SingleChild(ReferenceNode(node, Node(FunctionDefinitionNode-<lambda$488>, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), 0))))), Selected(\\x => Match(x, Node(LambdaExpressionNode, TChild(Target(Node(FunctionDefinitionNode-<lambda$488>, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, ConstNode(FunctionDefinitionNode-<lambda$491>, Children(ReferenceNode(node, Node(FunctionDefinitionNode-<lambda$489>, TChildren(Target(LeafWildcard(\"ParameterNode\")), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), 0), SingleChild(ReferenceNode(node, Node(FunctionDefinitionNode-<lambda$489>, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), 0))))), Selected(\\x => Match(x, Node(LambdaExpressionNode, TChild(Target(Node(FunctionDefinitionNode-<lambda$489>, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\"))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), 0)), Selected(\\x => Match(x, Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))))))))","UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":30,"diff":"\r\nInputObject            SideIndicator\r\n-----------            -------------\r\n        while k != 0 : =>           \r\n        while k != 1 : <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    def repeated_2(x) :\n        k = n\n        sum5 = x\n        while k != 1 :\n            sum5 = f(sum5)\n            k -= 1\n        return sum5\n    return repeated_2\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    def repeated_2(x) :\n        k = n\n        sum5 = x\n        while k != 0 :\n            sum5 = f(sum5)\n            k -= 1\n        return sum5\n    return repeated_2\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":985,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def repeated_2(x):\r\n        k = n\r\n        sum5 = x\r\n        while k!=0:\r\n            sum5 = f(sum5)\r\n            k -= 1\r\n        return sum5\r\n    return repeated_2\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, Skip(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, Skip(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":31,"diff":"\r\nInputObject    SideIndicator\r\n-----------    -------------\r\n    if n == 0: =>           \r\n    if n == 1: <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 1:\n        return lambda x: x\n    else:\n        return compose1(f, repeated(f, n - 1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    if n == 0:\n        return lambda x: x\n    else:\n        return compose1(f, repeated(f, n - 1))\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":87,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: x\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(FunctionDefinitionNode-<lambda$501>, Children(ReferenceNode(node, Node(FunctionDefinitionNode-<lambda$500>, TChildren(Target(LeafWildcard(\"ParameterNode\")), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), 0), SingleChild(ReferenceNode(node, Node(FunctionDefinitionNode-<lambda$500>, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), 0))))), Selected(\\x => Match(x, Node(LambdaExpressionNode, TChild(Target(Node(FunctionDefinitionNode-<lambda$500>, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))))))","UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, Skip(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":32,"diff":"\r\nInputObject               SideIndicator\r\n-----------               -------------\r\n    h = f                 =>           \r\n        h = compose1(h,f) =>           \r\n        h = compose1(f,f) <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    while n > 1:\n        h = compose1(f,f)\n        n -= 1\n\n    def evaluated(x):\n        if n == 0:\n            return x \n        return h(x)\n\n    return evaluated\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    h = f \n    while n > 1:\n        h = compose1(h,f)\n        n -= 1\n\n    def evaluated(x):\n        if n == 0:\n            return x \n        return h(x)\n\n    return evaluated\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":23726,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-h), SingleChild(LeafConstNode(NameExpressionNode-f)))), 1), Selected(\\x => Match(x, Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChildren(Node(FunctionDefinitionNode-evaluated, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-h)), Selected(\\x => Match(x, Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), InOrderSort(ast))))))","UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":33,"diff":"\r\nInputObject           SideIndicator\r\n-----------           -------------\r\n        while c <= n: =>           \r\n        while c != n: <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def applier(a):\n        c = 1\n        out = a\n        while c != n:\n            out = f(out)\n            c += 1\n        return out\n    return applier\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def applier(a):\n        c = 1\n        out = a\n        while c <= n:\n            out = f(out)\n            c += 1\n        return out\n    return applier\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":67,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def applier(a):\r\n        c = 0\r\n        out = a\r\n        while c!=n:\r\n            out = f(out)\r\n            c += 1\r\n        return out\r\n    return applier\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(ReferenceNode(node, Node(BinaryExpressionNode-NotEqual, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"NameExpressionNode\")))), 0), SingleChild(ReferenceNode(node, Node(BinaryExpressionNode-NotEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), 0))))), Selected(\\x => Match(x, Node(WhileStatementNode, TChildren(Target(Node(BinaryExpressionNode-NotEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\"))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))","UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, Skip(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":34,"diff":"\r\nInputObject                                       SideIndicator\r\n-----------                                       -------------\r\n    for _ in range(n):                            =>           \r\n    if n == 1:                                    =>           \r\n        print_move(start, end)                    =>           \r\n    else:                                         =>           \r\n        move_stack(n - 1, start, 6 - start - end) =>           \r\n        print_move(start, end)                    =>           \r\n        move_stack(n - 1, 6 - start - end, end)   =>           \r\n                                                  =>           \r\n    while n > 1:                                  <=           \r\n        n = n - 1                                 <=           \r\n    \"*** YOUR CODE HERE ***\"                      <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \n    g = identity\n    while n > 1: \n        g = compose1(f, g)\n        n = n - 1\n    return g\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \n    g = identity\n    for _ in range(n):\n        g = compose1(f, g)\n    return g\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n","Time":77,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    g = identity\r\n    while n>0:\r\n        g = compose1(f, g)\r\n        n = n-1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":"Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))), 0)), Selected(\\x => Match(x, Node(WhileStatementNode, TChildren(Target(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), 0)), Selected(\\x => Match(x, Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(ForStatementNode, Children(LeafConstNode(NameExpressionNode-_), Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-range), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-n)))))), SingleChild(ReferenceNode(node, Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), 0)))))), Selected(\\x => Match(x, Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChildren(Target(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast)))))))","UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, Skip(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":35,"diff":"\r\nInputObject           SideIndicator\r\n-----------           -------------\r\n        while i <= n: =>           \r\n        while i < n:  <=           \r\n\r\n\r\n","before":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n\n    def h(x):\n        i = 1\n        total = x\n        while i < n:\n            total = f(total)\n            i = i + 1\n        return total\n    return h\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n    # def h(x):\n    #     if n == 0:\n    #         return f(x)\n    #     else:\n    #         return f(x) * repeated (f, n-1)\n\n    # def hannah(x):\n    #     total = f(x)\n    #     if n == 0:\n    #         return total\n    #     else:\n    #         a = repeated(f, n-1)\n    #         total = a + total\n    #     return total\n    # return hannah\n\n    # def hannah(x):\n    #     result = f(x)\n    #     for i in range(n-1):\n    #         result = f(result)\n    #     return result\n    # return hannah\n\n    # def compose(f, n, x):\n    #     if n == 0:\n    #         return f(x)\n    #     return compose(f, n-1, f(x))\n    # return compose(f, n, x)\n\n\n","after":"def repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n\n    def h(x):\n        i = 1\n        total = x\n        while i <= n:\n            total = f(total)\n            i = i + 1\n        return total\n    return h\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\n    # def h(x):\n    #     if n == 0:\n    #         return f(x)\n    #     else:\n    #         return f(x) * repeated (f, n-1)\n\n    # def hannah(x):\n    #     total = f(x)\n    #     if n == 0:\n    #         return total\n    #     else:\n    #         a = repeated(f, n-1)\n    #         total = a + total\n    #     return total\n    # return hannah\n\n    # def hannah(x):\n    #     result = f(x)\n    #     for i in range(n-1):\n    #         result = f(result)\n    #     return result\n    # return hannah\n\n    # def compose(f, n, x):\n    #     if n == 0:\n    #         return f(x)\n    #     return compose(f, n-1, f(x))\n    # return compose(f, n, x)\n\n\n","Time":54,"SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def h(x):\r\n        i = 0\r\n        total = x\r\n        while i<n:\r\n            total = f(total)\r\n            i = i+1\r\n        return total\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(ReferenceNode(node, Node(BinaryExpressionNode-LessThan, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"NameExpressionNode\")))), 0), SingleChild(ReferenceNode(node, Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), 0))))), Selected(\\x => Match(x, Node(WhileStatementNode, TChildren(Target(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\"))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), InOrderSort(ast)))))","UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, Skip(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]}]